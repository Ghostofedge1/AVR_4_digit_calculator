
KEY_PAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00004a1a  00004aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008001aa  008001aa  00004bf8  2**0
                  ALLOC
  3 .stab         00002e2c  00000000  00000000  00004bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102a  00000000  00000000  00007a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00008a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00008c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00008e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000cd19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000e0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000e607  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f05d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 1c 	call	0x389c	; 0x389c <main>
      8a:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e8       	ldi	r22, 0x88	; 136
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e0 57       	subi	r30, 0x70	; 112
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_interface.h"
#include "DIO_PRIVATE.h"

//***************/* setting pin direction*/******************
void DIO_VidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Direction){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	27 97       	sbiw	r28, 0x07	; 7
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	6a 83       	std	Y+2, r22	; 0x02
     f62:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction==Input){
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	88 23       	and	r24, r24
     f68:	09 f0       	breq	.+2      	; 0xf6c <DIO_VidSetPinDirection+0x22>
     f6a:	74 c0       	rjmp	.+232    	; 0x1054 <DIO_VidSetPinDirection+0x10a>
		switch(Copy_u8Port){
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3f 83       	std	Y+7, r19	; 0x07
     f74:	2e 83       	std	Y+6, r18	; 0x06
     f76:	8e 81       	ldd	r24, Y+6	; 0x06
     f78:	9f 81       	ldd	r25, Y+7	; 0x07
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	91 05       	cpc	r25, r1
     f7e:	59 f1       	breq	.+86     	; 0xfd6 <DIO_VidSetPinDirection+0x8c>
     f80:	2e 81       	ldd	r18, Y+6	; 0x06
     f82:	3f 81       	ldd	r19, Y+7	; 0x07
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <DIO_VidSetPinDirection+0x4a>
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f0       	breq	.+26     	; 0xfac <DIO_VidSetPinDirection+0x62>
     f92:	d2 c0       	rjmp	.+420    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
     f94:	2e 81       	ldd	r18, Y+6	; 0x06
     f96:	3f 81       	ldd	r19, Y+7	; 0x07
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	89 f1       	breq	.+98     	; 0x1000 <DIO_VidSetPinDirection+0xb6>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_VidSetPinDirection+0x60>
     fa8:	40 c0       	rjmp	.+128    	; 0x102a <DIO_VidSetPinDirection+0xe0>
     faa:	c6 c0       	rjmp	.+396    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		case PORT_A:CLR_BIT(DDRA,Copy_u8Pin);
     fac:	aa e3       	ldi	r26, 0x3A	; 58
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ea e3       	ldi	r30, 0x3A	; 58
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_VidSetPinDirection+0x80>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_VidSetPinDirection+0x7c>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	b1 c0       	rjmp	.+354    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		break;
		case PORT_B:CLR_BIT(DDRB,Copy_u8Pin);
     fd6:	a7 e3       	ldi	r26, 0x37	; 55
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e7 e3       	ldi	r30, 0x37	; 55
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_VidSetPinDirection+0xaa>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_VidSetPinDirection+0xa6>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	9c c0       	rjmp	.+312    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		break;
		case PORT_C:CLR_BIT(DDRC,Copy_u8Pin);
    1000:	a4 e3       	ldi	r26, 0x34	; 52
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e4 e3       	ldi	r30, 0x34	; 52
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_VidSetPinDirection+0xd4>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_VidSetPinDirection+0xd0>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	87 c0       	rjmp	.+270    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		break;
		case PORT_D:CLR_BIT(DDRD,Copy_u8Pin);
    102a:	a1 e3       	ldi	r26, 0x31	; 49
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e1 e3       	ldi	r30, 0x31	; 49
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_VidSetPinDirection+0xfe>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_VidSetPinDirection+0xfa>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	72 c0       	rjmp	.+228    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		break;

		}
	}
	else if(Copy_u8Direction==Output){
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <DIO_VidSetPinDirection+0x112>
    105a:	6e c0       	rjmp	.+220    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
		switch(Copy_u8Port){
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 83       	std	Y+5, r19	; 0x05
    1064:	2c 83       	std	Y+4, r18	; 0x04
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	49 f1       	breq	.+82     	; 0x10c2 <DIO_VidSetPinDirection+0x178>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	2c f4       	brge	.+10     	; 0x1084 <DIO_VidSetPinDirection+0x13a>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	61 f0       	breq	.+24     	; 0x109a <DIO_VidSetPinDirection+0x150>
    1082:	5a c0       	rjmp	.+180    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	71 f1       	breq	.+92     	; 0x10ea <DIO_VidSetPinDirection+0x1a0>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	e9 f1       	breq	.+122    	; 0x1112 <DIO_VidSetPinDirection+0x1c8>
    1098:	4f c0       	rjmp	.+158    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
				case PORT_A:SET_BIT(DDRA,Copy_u8Pin);
    109a:	aa e3       	ldi	r26, 0x3A	; 58
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_VidSetPinDirection+0x16e>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_VidSetPinDirection+0x16a>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	3b c0       	rjmp	.+118    	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
				break;
				case PORT_B:SET_BIT(DDRB,Copy_u8Pin);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_VidSetPinDirection+0x196>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_VidSetPinDirection+0x192>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	27 c0       	rjmp	.+78     	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
				break;
				case PORT_C:SET_BIT(DDRC,Copy_u8Pin);
    10ea:	a4 e3       	ldi	r26, 0x34	; 52
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e4 e3       	ldi	r30, 0x34	; 52
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_VidSetPinDirection+0x1be>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_VidSetPinDirection+0x1ba>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	13 c0       	rjmp	.+38     	; 0x1138 <DIO_VidSetPinDirection+0x1ee>
				break;
				case PORT_D:SET_BIT(DDRD,Copy_u8Pin);
    1112:	a1 e3       	ldi	r26, 0x31	; 49
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e1 e3       	ldi	r30, 0x31	; 49
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_VidSetPinDirection+0x1e6>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_VidSetPinDirection+0x1e2>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
				break;

				}
	}
}
    1138:	27 96       	adiw	r28, 0x07	; 7
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <DIO_VidSetPinValue>:



//****************/* setting pin value*/****************
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	27 97       	sbiw	r28, 0x07	; 7
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==PinLow){
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <DIO_VidSetPinValue+0x22>
    116a:	74 c0       	rjmp	.+232    	; 0x1254 <DIO_VidSetPinValue+0x10a>
			switch(Copy_u8Port){
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3f 83       	std	Y+7, r19	; 0x07
    1174:	2e 83       	std	Y+6, r18	; 0x06
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	59 f1       	breq	.+86     	; 0x11d6 <DIO_VidSetPinValue+0x8c>
    1180:	2e 81       	ldd	r18, Y+6	; 0x06
    1182:	3f 81       	ldd	r19, Y+7	; 0x07
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_VidSetPinValue+0x4a>
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f0       	breq	.+26     	; 0x11ac <DIO_VidSetPinValue+0x62>
    1192:	d2 c0       	rjmp	.+420    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
    1194:	2e 81       	ldd	r18, Y+6	; 0x06
    1196:	3f 81       	ldd	r19, Y+7	; 0x07
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	89 f1       	breq	.+98     	; 0x1200 <DIO_VidSetPinValue+0xb6>
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_VidSetPinValue+0x60>
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <DIO_VidSetPinValue+0xe0>
    11aa:	c6 c0       	rjmp	.+396    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORT_A:CLR_BIT(PORTA,Copy_u8Pin);
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_VidSetPinValue+0x80>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_VidSetPinValue+0x7c>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	b1 c0       	rjmp	.+354    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			break;
			case PORT_B:CLR_BIT(PORTB,Copy_u8Pin);
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_VidSetPinValue+0xaa>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_VidSetPinValue+0xa6>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	9c c0       	rjmp	.+312    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			break;
			case PORT_C:CLR_BIT(PORTC,Copy_u8Pin);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_VidSetPinValue+0xd4>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_VidSetPinValue+0xd0>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	87 c0       	rjmp	.+270    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			break;
			case PORT_D:CLR_BIT(PORTD,Copy_u8Pin);
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_VidSetPinValue+0xfe>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_VidSetPinValue+0xfa>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	72 c0       	rjmp	.+228    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			break;

			}
		}
		else if(Copy_u8Value==PinHigh){
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	09 f0       	breq	.+2      	; 0x125c <DIO_VidSetPinValue+0x112>
    125a:	6e c0       	rjmp	.+220    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			switch(Copy_u8Port){
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3d 83       	std	Y+5, r19	; 0x05
    1264:	2c 83       	std	Y+4, r18	; 0x04
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	49 f1       	breq	.+82     	; 0x12c2 <DIO_VidSetPinValue+0x178>
    1270:	2c 81       	ldd	r18, Y+4	; 0x04
    1272:	3d 81       	ldd	r19, Y+5	; 0x05
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_VidSetPinValue+0x13a>
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	61 f0       	breq	.+24     	; 0x129a <DIO_VidSetPinValue+0x150>
    1282:	5a c0       	rjmp	.+180    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	71 f1       	breq	.+92     	; 0x12ea <DIO_VidSetPinValue+0x1a0>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	e9 f1       	breq	.+122    	; 0x1312 <DIO_VidSetPinValue+0x1c8>
    1298:	4f c0       	rjmp	.+158    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
					case PORT_A:SET_BIT(PORTA,Copy_u8Pin);
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_VidSetPinValue+0x16e>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_VidSetPinValue+0x16a>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	3b c0       	rjmp	.+118    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
					break;
					case PORT_B:SET_BIT(PORTB,Copy_u8Pin);
    12c2:	a8 e3       	ldi	r26, 0x38	; 56
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e8 e3       	ldi	r30, 0x38	; 56
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_VidSetPinValue+0x196>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_VidSetPinValue+0x192>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	27 c0       	rjmp	.+78     	; 0x1338 <DIO_VidSetPinValue+0x1ee>
					break;
					case PORT_C:SET_BIT(PORTC,Copy_u8Pin);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_VidSetPinValue+0x1be>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_VidSetPinValue+0x1ba>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	13 c0       	rjmp	.+38     	; 0x1338 <DIO_VidSetPinValue+0x1ee>
					break;
					case PORT_D:SET_BIT(PORTD,Copy_u8Pin);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_VidSetPinValue+0x1e6>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_VidSetPinValue+0x1e2>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24

					}
		}


}
    1338:	27 96       	adiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <DIO_VidGetPinValue>:

//************************/* getting pin value*/****************************
void DIO_VidGetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *pu8Data){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <DIO_VidGetPinValue+0x6>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_VidGetPinValue+0x8>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <DIO_VidGetPinValue+0xa>
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	6a 83       	std	Y+2, r22	; 0x02
    135c:	5c 83       	std	Y+4, r21	; 0x04
    135e:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	4d 81       	ldd	r20, Y+5	; 0x05
    136c:	5e 81       	ldd	r21, Y+6	; 0x06
    136e:	41 30       	cpi	r20, 0x01	; 1
    1370:	51 05       	cpc	r21, r1
    1372:	c1 f1       	breq	.+112    	; 0x13e4 <DIO_VidGetPinValue+0x9a>
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	91 05       	cpc	r25, r1
    137c:	34 f4       	brge	.+12     	; 0x138a <DIO_VidGetPinValue+0x40>
    137e:	2d 81       	ldd	r18, Y+5	; 0x05
    1380:	3e 81       	ldd	r19, Y+6	; 0x06
    1382:	21 15       	cp	r18, r1
    1384:	31 05       	cpc	r19, r1
    1386:	71 f0       	breq	.+28     	; 0x13a4 <DIO_VidGetPinValue+0x5a>
    1388:	8c c0       	rjmp	.+280    	; 0x14a2 <DIO_VidGetPinValue+0x158>
    138a:	4d 81       	ldd	r20, Y+5	; 0x05
    138c:	5e 81       	ldd	r21, Y+6	; 0x06
    138e:	42 30       	cpi	r20, 0x02	; 2
    1390:	51 05       	cpc	r21, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_VidGetPinValue+0x4c>
    1394:	47 c0       	rjmp	.+142    	; 0x1424 <DIO_VidGetPinValue+0xda>
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <DIO_VidGetPinValue+0x58>
    13a0:	61 c0       	rjmp	.+194    	; 0x1464 <DIO_VidGetPinValue+0x11a>
    13a2:	7f c0       	rjmp	.+254    	; 0x14a2 <DIO_VidGetPinValue+0x158>
						case PORT_A:*pu8Data=GET_BIT(PINA,Copy_u8Pin);
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_VidGetPinValue+0x74>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	2a 95       	dec	r18
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_VidGetPinValue+0x70>
    13c2:	9a 01       	movw	r18, r20
    13c4:	28 23       	and	r18, r24
    13c6:	39 23       	and	r19, r25
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_VidGetPinValue+0x8c>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_VidGetPinValue+0x88>
    13da:	ca 01       	movw	r24, r20
    13dc:	eb 81       	ldd	r30, Y+3	; 0x03
    13de:	fc 81       	ldd	r31, Y+4	; 0x04
    13e0:	80 83       	st	Z, r24
    13e2:	5f c0       	rjmp	.+190    	; 0x14a2 <DIO_VidGetPinValue+0x158>
						break;
						case PORT_B:*pu8Data=GET_BIT(PINB,Copy_u8Pin);
    13e4:	e6 e3       	ldi	r30, 0x36	; 54
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_VidGetPinValue+0xb4>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	2a 95       	dec	r18
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_VidGetPinValue+0xb0>
    1402:	9a 01       	movw	r18, r20
    1404:	28 23       	and	r18, r24
    1406:	39 23       	and	r19, r25
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a9 01       	movw	r20, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_VidGetPinValue+0xcc>
    1412:	55 95       	asr	r21
    1414:	47 95       	ror	r20
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_VidGetPinValue+0xc8>
    141a:	ca 01       	movw	r24, r20
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	80 83       	st	Z, r24
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <DIO_VidGetPinValue+0x158>
						break;
						case PORT_C:*pu8Data=GET_BIT(PINC,Copy_u8Pin);
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_VidGetPinValue+0xf4>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	2a 95       	dec	r18
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_VidGetPinValue+0xf0>
    1442:	9a 01       	movw	r18, r20
    1444:	28 23       	and	r18, r24
    1446:	39 23       	and	r19, r25
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_VidGetPinValue+0x10c>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_VidGetPinValue+0x108>
    145a:	ca 01       	movw	r24, r20
    145c:	eb 81       	ldd	r30, Y+3	; 0x03
    145e:	fc 81       	ldd	r31, Y+4	; 0x04
    1460:	80 83       	st	Z, r24
    1462:	1f c0       	rjmp	.+62     	; 0x14a2 <DIO_VidGetPinValue+0x158>
						break;
						case PORT_D:*pu8Data=GET_BIT(PIND,Copy_u8Pin);
    1464:	e0 e3       	ldi	r30, 0x30	; 48
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_VidGetPinValue+0x134>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	2a 95       	dec	r18
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_VidGetPinValue+0x130>
    1482:	9a 01       	movw	r18, r20
    1484:	28 23       	and	r18, r24
    1486:	39 23       	and	r19, r25
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_VidGetPinValue+0x14c>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_VidGetPinValue+0x148>
    149a:	ca 01       	movw	r24, r20
    149c:	eb 81       	ldd	r30, Y+3	; 0x03
    149e:	fc 81       	ldd	r31, Y+4	; 0x04
    14a0:	80 83       	st	Z, r24
						break;

						}

}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <DIO_VidSetPortDirection>:


//*************************/* setting port direction*/*******************
void DIO_VidSetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction){
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DIO_VidSetPortDirection+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_VidSetPortDirection+0x8>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_VidSetPortDirection+0xa>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Direction==Input){
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	88 23       	and	r24, r24
    14ca:	79 f5       	brne	.+94     	; 0x152a <DIO_VidSetPortDirection+0x76>
		switch(Copy_u8Port){
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3e 83       	std	Y+6, r19	; 0x06
    14d4:	2d 83       	std	Y+5, r18	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	c9 f0       	breq	.+50     	; 0x1512 <DIO_VidSetPortDirection+0x5e>
    14e0:	2d 81       	ldd	r18, Y+5	; 0x05
    14e2:	3e 81       	ldd	r19, Y+6	; 0x06
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <DIO_VidSetPortDirection+0x40>
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <DIO_VidSetPortDirection+0x56>
    14f2:	50 c0       	rjmp	.+160    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	71 f0       	breq	.+28     	; 0x151a <DIO_VidSetPortDirection+0x66>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	69 f0       	breq	.+26     	; 0x1522 <DIO_VidSetPortDirection+0x6e>
    1508:	45 c0       	rjmp	.+138    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
							case PORT_A:DDRA=0x00;
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
    1510:	41 c0       	rjmp	.+130    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
							break;
							case PORT_B:DDRB=0x00;
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	10 82       	st	Z, r1
    1518:	3d c0       	rjmp	.+122    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
							break;
							case PORT_C:DDRC=0x00;
    151a:	e4 e3       	ldi	r30, 0x34	; 52
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	10 82       	st	Z, r1
    1520:	39 c0       	rjmp	.+114    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
							break;
							case PORT_D:DDRD=0x00;
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	10 82       	st	Z, r1
    1528:	35 c0       	rjmp	.+106    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
							break;

							}
	}
	else if(Copy_u8Direction==Output){
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 f5       	brne	.+100    	; 0x1594 <DIO_VidSetPortDirection+0xe0>
		switch(Copy_u8Port){
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	d1 f0       	breq	.+52     	; 0x1578 <DIO_VidSetPortDirection+0xc4>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <DIO_VidSetPortDirection+0xa4>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 f0       	breq	.+24     	; 0x156e <DIO_VidSetPortDirection+0xba>
    1556:	1e c0       	rjmp	.+60     	; 0x1594 <DIO_VidSetPortDirection+0xe0>
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <DIO_VidSetPortDirection+0xce>
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	81 f0       	breq	.+32     	; 0x158c <DIO_VidSetPortDirection+0xd8>
    156c:	13 c0       	rjmp	.+38     	; 0x1594 <DIO_VidSetPortDirection+0xe0>
								case PORT_A:DDRA=0xFF;
    156e:	ea e3       	ldi	r30, 0x3A	; 58
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	80 83       	st	Z, r24
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <DIO_VidSetPortDirection+0xe0>
								break;
								case PORT_B:DDRB=0xFF;
    1578:	e7 e3       	ldi	r30, 0x37	; 55
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 83       	st	Z, r24
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <DIO_VidSetPortDirection+0xe0>
								break;
								case PORT_C:DDRC=0xFF;
    1582:	e4 e3       	ldi	r30, 0x34	; 52
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	80 83       	st	Z, r24
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <DIO_VidSetPortDirection+0xe0>
								break;
								case PORT_D:DDRD=0xFF;
    158c:	e1 e3       	ldi	r30, 0x31	; 49
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
								break;

								}
	}

}
    1594:	26 96       	adiw	r28, 0x06	; 6
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <DIO_VidSetPortValue>:


//*********************/* setting port value*/*******************
void DIO_VidSetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value){
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <DIO_VidSetPortValue+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <DIO_VidSetPortValue+0x8>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_u8Port){
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3c 83       	std	Y+4, r19	; 0x04
    15be:	2b 83       	std	Y+3, r18	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <DIO_VidSetPortValue+0x58>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <DIO_VidSetPortValue+0x38>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <DIO_VidSetPortValue+0x4e>
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <DIO_VidSetPortValue+0x74>
    15de:	2b 81       	ldd	r18, Y+3	; 0x03
    15e0:	3c 81       	ldd	r19, Y+4	; 0x04
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <DIO_VidSetPortValue+0x62>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <DIO_VidSetPortValue+0x6c>
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <DIO_VidSetPortValue+0x74>
							case PORT_A:PORTA=Copy_u8Value;
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	80 83       	st	Z, r24
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <DIO_VidSetPortValue+0x74>
							break;
							case PORT_B:PORTB=Copy_u8Value;
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	80 83       	st	Z, r24
    1606:	09 c0       	rjmp	.+18     	; 0x161a <DIO_VidSetPortValue+0x74>
							break;
							case PORT_C:PORTC=Copy_u8Value;
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 83       	st	Z, r24
    1610:	04 c0       	rjmp	.+8      	; 0x161a <DIO_VidSetPortValue+0x74>
							break;
							case PORT_D:PORTD=Copy_u8Value;
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 83       	st	Z, r24
							break;

							}
	}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <DIO_VidGetPortValue>:


//************************/* getting port Value*/**********************
void DIO_VidGetPortValue(u8 Copy_u8Port ,u8 *pu8Data){
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <DIO_VidGetPortValue+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <DIO_VidGetPortValue+0x8>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	7b 83       	std	Y+3, r23	; 0x03
    163a:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3d 83       	std	Y+5, r19	; 0x05
    1644:	2c 83       	std	Y+4, r18	; 0x04
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	e1 f0       	breq	.+56     	; 0x1688 <DIO_VidGetPortValue+0x60>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <DIO_VidGetPortValue+0x3c>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <DIO_VidGetPortValue+0x52>
    1662:	26 c0       	rjmp	.+76     	; 0x16b0 <DIO_VidGetPortValue+0x88>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	a1 f0       	breq	.+40     	; 0x1696 <DIO_VidGetPortValue+0x6e>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	b1 f0       	breq	.+44     	; 0x16a4 <DIO_VidGetPortValue+0x7c>
    1678:	1b c0       	rjmp	.+54     	; 0x16b0 <DIO_VidGetPortValue+0x88>
							case PORT_A:*pu8Data=PORTA;
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	ea 81       	ldd	r30, Y+2	; 0x02
    1682:	fb 81       	ldd	r31, Y+3	; 0x03
    1684:	80 83       	st	Z, r24
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <DIO_VidGetPortValue+0x88>
							break;
							case PORT_B:*pu8Data=PORTA;
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	ea 81       	ldd	r30, Y+2	; 0x02
    1690:	fb 81       	ldd	r31, Y+3	; 0x03
    1692:	80 83       	st	Z, r24
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <DIO_VidGetPortValue+0x88>
							break;
							case PORT_C:*pu8Data=PORTA;
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	ea 81       	ldd	r30, Y+2	; 0x02
    169e:	fb 81       	ldd	r31, Y+3	; 0x03
    16a0:	80 83       	st	Z, r24
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <DIO_VidGetPortValue+0x88>
							break;
							case PORT_D:*pu8Data=PORTA;
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	ea 81       	ldd	r30, Y+2	; 0x02
    16ac:	fb 81       	ldd	r31, Y+3	; 0x03
    16ae:	80 83       	st	Z, r24
							break;

							}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <KPD_VoidInit>:
#include "STD_TYPES.h"
#include "DIO_interface.h"
#include "Key_Pad_interface.h"
#include "Key_Pad_config.h"

void KPD_VoidInit(void){
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	    DIO_VidSetPinDirection(PORT_D,Pin0,Output);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin1,Output);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin2,Output);
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin3,Output);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	63 e0       	ldi	r22, 0x03	; 3
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin4,Input);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin5,Input);
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	65 e0       	ldi	r22, 0x05	; 5
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin6,Input);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	66 e0       	ldi	r22, 0x06	; 6
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORT_D,Pin7,Input);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	67 e0       	ldi	r22, 0x07	; 7
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>

		DIO_VidSetPortValue(PORT_D,0xFF);
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	6f ef       	ldi	r22, 0xFF	; 255
    171c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>



}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(void){
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <KPD_u8GetPressedKey+0x6>
    172c:	00 d0       	rcall	.+0      	; 0x172e <KPD_u8GetPressedKey+0x8>
    172e:	0f 92       	push	r0
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62

	u8 local_u8_Pressed_Key=KPD_NO_PRESSED_KEY;
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	8b 83       	std	Y+3, r24	; 0x03

	static u8 local_u8_Column_Arr[COLUMN_NUM]={KPD_COLUMN_0,KPD_COLUMN_1,KPD_COLUMN_2,KPD_COLUMN_3};

	static u8 local_u8_Row_Arr[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};

	for(local_u8_colunmn_counter=0;local_u8_colunmn_counter<COLUMN_NUM;local_u8_colunmn_counter++){
    1738:	1a 82       	std	Y+2, r1	; 0x02
    173a:	5e c0       	rjmp	.+188    	; 0x17f8 <KPD_u8GetPressedKey+0xd2>


		DIO_VidSetPinValue(KPD_PORT,local_u8_Column_Arr[local_u8_colunmn_counter],PinLow);
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	ec 56       	subi	r30, 0x6C	; 108
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	90 81       	ld	r25, Z
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	69 2f       	mov	r22, r25
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>


		for(local_u8_row_counter=0;local_u8_row_counter<ROW_NUM;local_u8_row_counter++){
    1754:	19 82       	std	Y+1, r1	; 0x01
    1756:	3d c0       	rjmp	.+122    	; 0x17d2 <KPD_u8GetPressedKey+0xac>

			DIO_VidGetPinValue(KPD_PORT,local_u8_Row_Arr[local_u8_row_counter],&local_u8_Pin_State);
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	e0 57       	subi	r30, 0x70	; 112
    1762:	fe 4f       	sbci	r31, 0xFE	; 254
    1764:	90 81       	ld	r25, Z
    1766:	9e 01       	movw	r18, r28
    1768:	2c 5f       	subi	r18, 0xFC	; 252
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	69 2f       	mov	r22, r25
    1770:	a9 01       	movw	r20, r18
    1772:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_VidGetPinValue>

			if(local_u8_Pin_State==PinLow){
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	88 23       	and	r24, r24
    177a:	41 f5       	brne	.+80     	; 0x17cc <KPD_u8GetPressedKey+0xa6>

				local_u8_Pressed_Key=local_u8_kpd_Arr[local_u8_row_counter][local_u8_colunmn_counter];
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	48 2f       	mov	r20, r24
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	ca 01       	movw	r24, r20
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	fc 01       	movw	r30, r24
    1798:	e8 56       	subi	r30, 0x68	; 104
    179a:	fe 4f       	sbci	r31, 0xFE	; 254
    179c:	80 81       	ld	r24, Z
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <KPD_u8GetPressedKey+0x9a>

				while(local_u8_Pin_State==PinLow){

					DIO_VidGetPinValue(KPD_PORT,local_u8_Row_Arr[local_u8_row_counter],&local_u8_Pin_State);
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	e0 57       	subi	r30, 0x70	; 112
    17ac:	fe 4f       	sbci	r31, 0xFE	; 254
    17ae:	90 81       	ld	r25, Z
    17b0:	9e 01       	movw	r18, r28
    17b2:	2c 5f       	subi	r18, 0xFC	; 252
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	69 2f       	mov	r22, r25
    17ba:	a9 01       	movw	r20, r18
    17bc:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_VidGetPinValue>

			if(local_u8_Pin_State==PinLow){

				local_u8_Pressed_Key=local_u8_kpd_Arr[local_u8_row_counter][local_u8_colunmn_counter];

				while(local_u8_Pin_State==PinLow){
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	88 23       	and	r24, r24
    17c4:	71 f3       	breq	.-36     	; 0x17a2 <KPD_u8GetPressedKey+0x7c>

					DIO_VidGetPinValue(KPD_PORT,local_u8_Row_Arr[local_u8_row_counter],&local_u8_Pin_State);
				}
				return local_u8_Pressed_Key;
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	1c c0       	rjmp	.+56     	; 0x1804 <KPD_u8GetPressedKey+0xde>


		DIO_VidSetPinValue(KPD_PORT,local_u8_Column_Arr[local_u8_colunmn_counter],PinLow);


		for(local_u8_row_counter=0;local_u8_row_counter<ROW_NUM;local_u8_row_counter++){
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	08 f4       	brcc	.+2      	; 0x17da <KPD_u8GetPressedKey+0xb4>
    17d8:	bf cf       	rjmp	.-130    	; 0x1758 <KPD_u8GetPressedKey+0x32>
				}
				return local_u8_Pressed_Key;
			}
		}

		DIO_VidSetPinValue(KPD_PORT,local_u8_Column_Arr[local_u8_colunmn_counter],PinHigh);
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	fc 01       	movw	r30, r24
    17e2:	ec 56       	subi	r30, 0x6C	; 108
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	90 81       	ld	r25, Z
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	69 2f       	mov	r22, r25
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

	static u8 local_u8_Column_Arr[COLUMN_NUM]={KPD_COLUMN_0,KPD_COLUMN_1,KPD_COLUMN_2,KPD_COLUMN_3};

	static u8 local_u8_Row_Arr[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};

	for(local_u8_colunmn_counter=0;local_u8_colunmn_counter<COLUMN_NUM;local_u8_colunmn_counter++){
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <KPD_u8GetPressedKey+0xda>
    17fe:	9e cf       	rjmp	.-196    	; 0x173c <KPD_u8GetPressedKey+0x16>
		}

		DIO_VidSetPinValue(KPD_PORT,local_u8_Column_Arr[local_u8_colunmn_counter],PinHigh);

	}
	return local_u8_Pressed_Key;
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <LCD_VoidSendCommand>:
#include <math.h>

#define send_upper(PORT,Data) (PORT=(PORT & 0xF0)|((Data >> 4) & 0x0F))
#define send_lower(PORT,Data) (PORT=(PORT & 0xF0)|(Data  & 0x0F))

void LCD_VoidSendCommand(u8 Copy_u8Command){
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	6d 97       	sbiw	r28, 0x1d	; 29
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	8d 8f       	std	Y+29, r24	; 0x1d

	// switching RS to the Command mode
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,PinLow);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

	// switching RW to the Write mode
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,PinLow);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

	// assigning  the command to the port
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1844:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

	// initiating the enable pin so the LCD can receive the Command
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e8       	ldi	r26, 0x80	; 128
    1858:	bf e3       	ldi	r27, 0x3F	; 63
    185a:	89 8f       	std	Y+25, r24	; 0x19
    185c:	9a 8f       	std	Y+26, r25	; 0x1a
    185e:	ab 8f       	std	Y+27, r26	; 0x1b
    1860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a e7       	ldi	r20, 0x7A	; 122
    1870:	55 e4       	ldi	r21, 0x45	; 69
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8d 8b       	std	Y+21, r24	; 0x15
    187c:	9e 8b       	std	Y+22, r25	; 0x16
    187e:	af 8b       	std	Y+23, r26	; 0x17
    1880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	69 8d       	ldd	r22, Y+25	; 0x19
    18be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <LCD_VoidSendCommand+0xee>
    18e6:	80 e9       	ldi	r24, 0x90	; 144
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	9a 8b       	std	Y+18, r25	; 0x12
    18ec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ee:	89 89       	ldd	r24, Y+17	; 0x11
    18f0:	9a 89       	ldd	r25, Y+18	; 0x12
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_VoidSendCommand+0xdc>
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <LCD_VoidSendCommand+0xd0>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6d 89       	ldd	r22, Y+21	; 0x15
    1910:	7e 89       	ldd	r23, Y+22	; 0x16
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	98 8d       	ldd	r25, Y+24	; 0x18
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	98 8b       	std	Y+16, r25	; 0x10
    1928:	8f 87       	std	Y+15, r24	; 0x0f
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	98 89       	ldd	r25, Y+16	; 0x10
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_VoidSendCommand+0x118>
    1932:	98 8b       	std	Y+16, r25	; 0x10
    1934:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	8b 87       	std	Y+11, r24	; 0x0b
    194a:	9c 87       	std	Y+12, r25	; 0x0c
    194c:	ad 87       	std	Y+13, r26	; 0x0d
    194e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	55 e4       	ldi	r21, 0x45	; 69
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	98 87       	std	Y+8, r25	; 0x08
    196c:	a9 87       	std	Y+9, r26	; 0x09
    196e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_VoidSendCommand+0x1dc>
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_VoidSendCommand+0x1ca>
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_VoidSendCommand+0x1be>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_VoidSendCommand+0x206>
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1a24:	6d 96       	adiw	r28, 0x1d	; 29
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_VoidSendData>:


void LCD_VoidSendData(u8 Copy_u8Data){
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	8d 8f       	std	Y+29, r24	; 0x1d
        // switching RS to the Data mode
	    DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,PinHigh);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

	    // switching RW to the Write mode
		DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,PinLow);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

		// assigning  the Data to the port
		DIO_VidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a64:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

		// initiating the enable pin so the LCD can receive the data
		DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	89 8f       	std	Y+25, r24	; 0x19
    1a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	69 8d       	ldd	r22, Y+25	; 0x19
    1a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8d 8b       	std	Y+21, r24	; 0x15
    1a9c:	9e 8b       	std	Y+22, r25	; 0x16
    1a9e:	af 8b       	std	Y+23, r26	; 0x17
    1aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <LCD_VoidSendData+0xee>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	9a 8b       	std	Y+18, r25	; 0x12
    1b0c:	89 8b       	std	Y+17, r24	; 0x11
    1b0e:	89 89       	ldd	r24, Y+17	; 0x11
    1b10:	9a 89       	ldd	r25, Y+18	; 0x12
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_VoidSendData+0xdc>
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8b 89       	ldd	r24, Y+19	; 0x13
    1b26:	9c 89       	ldd	r25, Y+20	; 0x14
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <LCD_VoidSendData+0xd0>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	98 8b       	std	Y+16, r25	; 0x10
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4c:	98 89       	ldd	r25, Y+16	; 0x10
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_VoidSendData+0x118>
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	55 e4       	ldi	r21, 0x45	; 69
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_VoidSendData+0x17c>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <LCD_VoidSendData+0x1fa>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <LCD_VoidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_VoidSendData+0x1dc>
    1bf4:	80 e9       	ldi	r24, 0x90	; 144
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_VoidSendData+0x1ca>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <LCD_VoidSendData+0x1be>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <LCD_VoidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_VoidSendData+0x206>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(1);

}
    1c44:	6d 96       	adiw	r28, 0x1d	; 29
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <LCD_VoidInit>:

void LCD_VoidInit(void){
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	aa 97       	sbiw	r28, 0x2a	; 42
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61

	DIO_VidSetPortDirection(LCD_DATA_PORT,Output);
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,PinHigh);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,PinHigh);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e2       	ldi	r26, 0x20	; 32
    1c96:	b2 e4       	ldi	r27, 0x42	; 66
    1c98:	8f a3       	std	Y+39, r24	; 0x27
    1c9a:	98 a7       	std	Y+40, r25	; 0x28
    1c9c:	a9 a7       	std	Y+41, r26	; 0x29
    1c9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	55 e4       	ldi	r21, 0x45	; 69
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8b a3       	std	Y+35, r24	; 0x23
    1cba:	9c a3       	std	Y+36, r25	; 0x24
    1cbc:	ad a3       	std	Y+37, r26	; 0x25
    1cbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <LCD_VoidInit+0x8c>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9a a3       	std	Y+34, r25	; 0x22
    1cde:	89 a3       	std	Y+33, r24	; 0x21
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1ce2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1d00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9a a3       	std	Y+34, r25	; 0x22
    1d20:	89 a3       	std	Y+33, r24	; 0x21
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <LCD_VoidInit+0xec>
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	98 a3       	std	Y+32, r25	; 0x20
    1d2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_VoidInit+0xda>
    1d34:	98 a3       	std	Y+32, r25	; 0x20
    1d36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9a a3       	std	Y+34, r25	; 0x22
    1d40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	89 a1       	ldd	r24, Y+33	; 0x21
    1d44:	9a a1       	ldd	r25, Y+34	; 0x22
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <LCD_VoidInit+0xce>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d50:	8d a1       	ldd	r24, Y+37	; 0x25
    1d52:	9e a1       	ldd	r25, Y+38	; 0x26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9a a3       	std	Y+34, r25	; 0x22
    1d5e:	89 a3       	std	Y+33, r24	; 0x21
    1d60:	89 a1       	ldd	r24, Y+33	; 0x21
    1d62:	9a a1       	ldd	r25, Y+34	; 0x22
    1d64:	9e 8f       	std	Y+30, r25	; 0x1e
    1d66:	8d 8f       	std	Y+29, r24	; 0x1d
    1d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_VoidInit+0x116>
    1d70:	9e 8f       	std	Y+30, r25	; 0x1e
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

// Function set command : 2 lines , 5*8 font size
	LCD_VoidSendCommand(0b00111000);
    1d74:	88 e3       	ldi	r24, 0x38	; 56
    1d76:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_VoidSendCommand>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	89 8f       	std	Y+25, r24	; 0x19
    1d84:	9a 8f       	std	Y+26, r25	; 0x1a
    1d86:	ab 8f       	std	Y+27, r26	; 0x1b
    1d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a e7       	ldi	r20, 0x7A	; 122
    1d98:	55 e4       	ldi	r21, 0x45	; 69
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8d 8b       	std	Y+21, r24	; 0x15
    1da4:	9e 8b       	std	Y+22, r25	; 0x16
    1da6:	af 8b       	std	Y+23, r26	; 0x17
    1da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1daa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dac:	7e 89       	ldd	r23, Y+22	; 0x16
    1dae:	8f 89       	ldd	r24, Y+23	; 0x17
    1db0:	98 8d       	ldd	r25, Y+24	; 0x18
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_VoidInit+0x176>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	69 8d       	ldd	r22, Y+25	; 0x19
    1de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_VoidInit+0x1d6>
    1e0e:	80 e9       	ldi	r24, 0x90	; 144
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	9a 8b       	std	Y+18, r25	; 0x12
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_VoidInit+0x1c4>
    1e1e:	9a 8b       	std	Y+18, r25	; 0x12
    1e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_VoidInit+0x1b8>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	98 8b       	std	Y+16, r25	; 0x10
    1e50:	8f 87       	std	Y+15, r24	; 0x0f
    1e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e54:	98 89       	ldd	r25, Y+16	; 0x10
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_VoidInit+0x200>
    1e5a:	98 8b       	std	Y+16, r25	; 0x10
    1e5c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	// display on off control : display enable ,disable cursor ,no blink cursor
	LCD_VoidSendCommand(0b00001110);
    1e5e:	8e e0       	ldi	r24, 0x0E	; 14
    1e60:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_VoidSendCommand>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	bf e3       	ldi	r27, 0x3F	; 63
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	9c 87       	std	Y+12, r25	; 0x0c
    1e70:	ad 87       	std	Y+13, r26	; 0x0d
    1e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a e7       	ldi	r20, 0x7A	; 122
    1e82:	55 e4       	ldi	r21, 0x45	; 69
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	a9 87       	std	Y+9, r26	; 0x09
    1e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <LCD_VoidInit+0x260>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <LCD_VoidInit+0x2c0>
    1ef8:	80 e9       	ldi	r24, 0x90	; 144
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_VoidInit+0x2ae>
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <LCD_VoidInit+0x2a2>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_VoidInit+0x2ea>
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

	//clear display
	LCD_VoidSendCommand(1);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_VoidSendCommand>



}
    1f4e:	aa 96       	adiw	r28, 0x2a	; 42
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <LCD_VoidSendString>:

/*  function to send string */
void LCD_VoidSendString(s8 * Copy_u8ptrString){
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <LCD_VoidSendString+0x6>
    1f66:	0f 92       	push	r0
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	9b 83       	std	Y+3, r25	; 0x03
    1f6e:	8a 83       	std	Y+2, r24	; 0x02

	u8 LCD_u8Iterator =0;
    1f70:	19 82       	std	Y+1, r1	; 0x01
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <LCD_VoidSendString+0x30>

	while(Copy_u8ptrString[LCD_u8Iterator]!='\0'){
		LCD_VoidSendData(Copy_u8ptrString[LCD_u8Iterator]);
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	80 81       	ld	r24, Z
    1f86:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VoidSendData>
		LCD_u8Iterator++;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	89 83       	std	Y+1, r24	; 0x01
/*  function to send string */
void LCD_VoidSendString(s8 * Copy_u8ptrString){

	u8 LCD_u8Iterator =0;

	while(Copy_u8ptrString[LCD_u8Iterator]!='\0'){
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	80 81       	ld	r24, Z
    1fa2:	88 23       	and	r24, r24
    1fa4:	39 f7       	brne	.-50     	; 0x1f74 <LCD_VoidSendString+0x14>
		LCD_VoidSendData(Copy_u8ptrString[LCD_u8Iterator]);
		LCD_u8Iterator++;
	}
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_VoidSendInteger>:
/*  function to send Integers */
void LCD_VoidSendInteger(s32 Copy_s32Int){
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	64 97       	sbiw	r28, 0x14	; 20
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	69 8b       	std	Y+17, r22	; 0x11
    1fc8:	7a 8b       	std	Y+18, r23	; 0x12
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
	  s8 ASCi[16];
	  sprintf(ASCi, "%d", Copy_s32Int);
    1fce:	ce 01       	movw	r24, r28
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	2d b7       	in	r18, 0x3d	; 61
    1fd4:	3e b7       	in	r19, 0x3e	; 62
    1fd6:	28 50       	subi	r18, 0x08	; 8
    1fd8:	30 40       	sbci	r19, 0x00	; 0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	3e bf       	out	0x3e, r19	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	2d bf       	out	0x3d, r18	; 61
    1fe4:	ed b7       	in	r30, 0x3d	; 61
    1fe6:	fe b7       	in	r31, 0x3e	; 62
    1fe8:	31 96       	adiw	r30, 0x01	; 1
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	80 e6       	ldi	r24, 0x60	; 96
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	93 83       	std	Z+3, r25	; 0x03
    1ff4:	82 83       	std	Z+2, r24	; 0x02
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffa:	ab 89       	ldd	r26, Y+19	; 0x13
    1ffc:	bc 89       	ldd	r27, Y+20	; 0x14
    1ffe:	84 83       	std	Z+4, r24	; 0x04
    2000:	95 83       	std	Z+5, r25	; 0x05
    2002:	a6 83       	std	Z+6, r26	; 0x06
    2004:	b7 83       	std	Z+7, r27	; 0x07
    2006:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <sprintf>
    200a:	8d b7       	in	r24, 0x3d	; 61
    200c:	9e b7       	in	r25, 0x3e	; 62
    200e:	08 96       	adiw	r24, 0x08	; 8
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	9e bf       	out	0x3e, r25	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	8d bf       	out	0x3d, r24	; 61
	  LCD_VoidSendString(ASCi);
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidSendString>

}
    2022:	64 96       	adiw	r28, 0x14	; 20
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_VoidSetPosition>:

/*  function to set the position */
void LCD_VoidSetPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_VoidSetPosition+0x6>
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row==LCD_ROW_1){
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	29 f4       	brne	.+10     	; 0x2052 <LCD_VoidSetPosition+0x1e>
		LCD_VoidSendCommand((0x80)+Copy_u8Col);
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	80 58       	subi	r24, 0x80	; 128
    204c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_VoidSendCommand>
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <LCD_VoidSetPosition+0x2c>
	}
	else if(Copy_u8Row==LCD_ROW_2){
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	21 f4       	brne	.+8      	; 0x2060 <LCD_VoidSetPosition+0x2c>
		LCD_VoidSendCommand((0x80)+64+Copy_u8Col);
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	80 54       	subi	r24, 0x40	; 64
    205c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_VoidSendCommand>
	}
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <LCD_VoidInit4BitMode>:

void LCD_VoidInit4BitMode(){
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	c4 55       	subi	r28, 0x54	; 84
    2078:	d0 40       	sbci	r29, 0x00	; 0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61

	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin0,Output);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin1,Output);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin2,Output);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	62 e0       	ldi	r22, 0x02	; 2
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin3,Output);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	63 e0       	ldi	r22, 0x03	; 3
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,Output);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,Output);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,Output);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ef 5a       	subi	r30, 0xAF	; 175
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 ea       	ldi	r26, 0xA0	; 160
    20d6:	b1 e4       	ldi	r27, 0x41	; 65
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	8e 01       	movw	r16, r28
    20e2:	03 5b       	subi	r16, 0xB3	; 179
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	ef 5a       	subi	r30, 0xAF	; 175
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	55 e4       	ldi	r21, 0x45	; 69
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	f8 01       	movw	r30, r16
    2106:	80 83       	st	Z, r24
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	a2 83       	std	Z+2, r26	; 0x02
    210c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    210e:	fe 01       	movw	r30, r28
    2110:	e3 5b       	subi	r30, 0xB3	; 179
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	44 f4       	brge	.+16     	; 0x213c <LCD_VoidInit4BitMode+0xd2>
		__ticks = 1;
    212c:	fe 01       	movw	r30, r28
    212e:	e5 5b       	subi	r30, 0xB5	; 181
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	64 c0       	rjmp	.+200    	; 0x2204 <LCD_VoidInit4BitMode+0x19a>
	else if (__tmp > 65535)
    213c:	fe 01       	movw	r30, r28
    213e:	e3 5b       	subi	r30, 0xB3	; 179
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <LCD_VoidInit4BitMode+0xf2>
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <LCD_VoidInit4BitMode+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	fe 01       	movw	r30, r28
    215e:	ef 5a       	subi	r30, 0xAF	; 175
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8e 01       	movw	r16, r28
    217c:	05 5b       	subi	r16, 0xB5	; 181
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	1f c0       	rjmp	.+62     	; 0x21d2 <LCD_VoidInit4BitMode+0x168>
    2194:	fe 01       	movw	r30, r28
    2196:	e7 5b       	subi	r30, 0xB7	; 183
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 e9       	ldi	r24, 0x90	; 144
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	fe 01       	movw	r30, r28
    21a4:	e7 5b       	subi	r30, 0xB7	; 183
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_VoidInit4BitMode+0x142>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 5b       	subi	r30, 0xB7	; 183
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	de 01       	movw	r26, r28
    21bc:	a5 5b       	subi	r26, 0xB5	; 181
    21be:	bf 4f       	sbci	r27, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	e5 5b       	subi	r30, 0xB5	; 181
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	9c 93       	st	X, r25
    21d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	fe 01       	movw	r30, r28
    21d4:	e5 5b       	subi	r30, 0xB5	; 181
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	d1 f6       	brne	.-76     	; 0x2194 <LCD_VoidInit4BitMode+0x12a>
    21e0:	27 c0       	rjmp	.+78     	; 0x2230 <LCD_VoidInit4BitMode+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	8e 01       	movw	r16, r28
    21e4:	05 5b       	subi	r16, 0xB5	; 181
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e3 5b       	subi	r30, 0xB3	; 179
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	de 01       	movw	r26, r28
    2206:	a9 5b       	subi	r26, 0xB9	; 185
    2208:	bf 4f       	sbci	r27, 0xFF	; 255
    220a:	fe 01       	movw	r30, r28
    220c:	e5 5b       	subi	r30, 0xB5	; 181
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	8d 93       	st	X+, r24
    2216:	9c 93       	st	X, r25
    2218:	fe 01       	movw	r30, r28
    221a:	e9 5b       	subi	r30, 0xB9	; 185
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_VoidInit4BitMode+0x1b8>
    2226:	fe 01       	movw	r30, r28
    2228:	e9 5b       	subi	r30, 0xB9	; 185
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24


	_delay_ms(20);
	LCD_VoidSendCommand4BitMode(0x33);
    2230:	83 e3       	ldi	r24, 0x33	; 51
    2232:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    2236:	fe 01       	movw	r30, r28
    2238:	ed 5b       	subi	r30, 0xBD	; 189
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e8       	ldi	r26, 0x80	; 128
    2242:	bf e3       	ldi	r27, 0x3F	; 63
    2244:	80 83       	st	Z, r24
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	a2 83       	std	Z+2, r26	; 0x02
    224a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	8e 01       	movw	r16, r28
    224e:	01 5c       	subi	r16, 0xC1	; 193
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	fe 01       	movw	r30, r28
    2254:	ed 5b       	subi	r30, 0xBD	; 189
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	60 81       	ld	r22, Z
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	55 e4       	ldi	r21, 0x45	; 69
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	80 83       	st	Z, r24
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	a2 83       	std	Z+2, r26	; 0x02
    2278:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    227a:	fe 01       	movw	r30, r28
    227c:	ff 96       	adiw	r30, 0x3f	; 63
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <LCD_VoidInit4BitMode+0x236>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9e af       	std	Y+62, r25	; 0x3e
    229c:	8d af       	std	Y+61, r24	; 0x3d
    229e:	46 c0       	rjmp	.+140    	; 0x232c <LCD_VoidInit4BitMode+0x2c2>
	else if (__tmp > 65535)
    22a0:	fe 01       	movw	r30, r28
    22a2:	ff 96       	adiw	r30, 0x3f	; 63
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	64 f5       	brge	.+88     	; 0x2314 <LCD_VoidInit4BitMode+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	fe 01       	movw	r30, r28
    22be:	ed 5b       	subi	r30, 0xBD	; 189
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9e af       	std	Y+62, r25	; 0x3e
    22e8:	8d af       	std	Y+61, r24	; 0x3d
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <LCD_VoidInit4BitMode+0x2a0>
    22ec:	80 e9       	ldi	r24, 0x90	; 144
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	9c af       	std	Y+60, r25	; 0x3c
    22f2:	8b af       	std	Y+59, r24	; 0x3b
    22f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    22f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_VoidInit4BitMode+0x28e>
    22fc:	9c af       	std	Y+60, r25	; 0x3c
    22fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8d ad       	ldd	r24, Y+61	; 0x3d
    2302:	9e ad       	ldd	r25, Y+62	; 0x3e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9e af       	std	Y+62, r25	; 0x3e
    2308:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8d ad       	ldd	r24, Y+61	; 0x3d
    230c:	9e ad       	ldd	r25, Y+62	; 0x3e
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <LCD_VoidInit4BitMode+0x282>
    2312:	16 c0       	rjmp	.+44     	; 0x2340 <LCD_VoidInit4BitMode+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	fe 01       	movw	r30, r28
    2316:	ff 96       	adiw	r30, 0x3f	; 63
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e af       	std	Y+62, r25	; 0x3e
    232a:	8d af       	std	Y+61, r24	; 0x3d
    232c:	8d ad       	ldd	r24, Y+61	; 0x3d
    232e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2330:	9a af       	std	Y+58, r25	; 0x3a
    2332:	89 af       	std	Y+57, r24	; 0x39
    2334:	89 ad       	ldd	r24, Y+57	; 0x39
    2336:	9a ad       	ldd	r25, Y+58	; 0x3a
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_VoidInit4BitMode+0x2ce>
    233c:	9a af       	std	Y+58, r25	; 0x3a
    233e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_VoidSendCommand4BitMode(0x32);// start the 4 bit mode
    2340:	82 e3       	ldi	r24, 0x32	; 50
    2342:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e8       	ldi	r26, 0x80	; 128
    234c:	bf e3       	ldi	r27, 0x3F	; 63
    234e:	8d ab       	std	Y+53, r24	; 0x35
    2350:	9e ab       	std	Y+54, r25	; 0x36
    2352:	af ab       	std	Y+55, r26	; 0x37
    2354:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6d a9       	ldd	r22, Y+53	; 0x35
    2358:	7e a9       	ldd	r23, Y+54	; 0x36
    235a:	8f a9       	ldd	r24, Y+55	; 0x37
    235c:	98 ad       	ldd	r25, Y+56	; 0x38
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	89 ab       	std	Y+49, r24	; 0x31
    2370:	9a ab       	std	Y+50, r25	; 0x32
    2372:	ab ab       	std	Y+51, r26	; 0x33
    2374:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2376:	69 a9       	ldd	r22, Y+49	; 0x31
    2378:	7a a9       	ldd	r23, Y+50	; 0x32
    237a:	8b a9       	ldd	r24, Y+51	; 0x33
    237c:	9c a9       	ldd	r25, Y+52	; 0x34
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <LCD_VoidInit4BitMode+0x32e>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	98 ab       	std	Y+48, r25	; 0x30
    2394:	8f a7       	std	Y+47, r24	; 0x2f
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <LCD_VoidInit4BitMode+0x3ac>
	else if (__tmp > 65535)
    2398:	69 a9       	ldd	r22, Y+49	; 0x31
    239a:	7a a9       	ldd	r23, Y+50	; 0x32
    239c:	8b a9       	ldd	r24, Y+51	; 0x33
    239e:	9c a9       	ldd	r25, Y+52	; 0x34
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <LCD_VoidInit4BitMode+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6d a9       	ldd	r22, Y+53	; 0x35
    23b2:	7e a9       	ldd	r23, Y+54	; 0x36
    23b4:	8f a9       	ldd	r24, Y+55	; 0x37
    23b6:	98 ad       	ldd	r25, Y+56	; 0x38
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	98 ab       	std	Y+48, r25	; 0x30
    23d6:	8f a7       	std	Y+47, r24	; 0x2f
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_VoidInit4BitMode+0x38e>
    23da:	80 e9       	ldi	r24, 0x90	; 144
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	9e a7       	std	Y+46, r25	; 0x2e
    23e0:	8d a7       	std	Y+45, r24	; 0x2d
    23e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_VoidInit4BitMode+0x37c>
    23ea:	9e a7       	std	Y+46, r25	; 0x2e
    23ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f0:	98 a9       	ldd	r25, Y+48	; 0x30
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	98 ab       	std	Y+48, r25	; 0x30
    23f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fa:	98 a9       	ldd	r25, Y+48	; 0x30
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <LCD_VoidInit4BitMode+0x370>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <LCD_VoidInit4BitMode+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	69 a9       	ldd	r22, Y+49	; 0x31
    2404:	7a a9       	ldd	r23, Y+50	; 0x32
    2406:	8b a9       	ldd	r24, Y+51	; 0x33
    2408:	9c a9       	ldd	r25, Y+52	; 0x34
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	98 ab       	std	Y+48, r25	; 0x30
    2414:	8f a7       	std	Y+47, r24	; 0x2f
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	98 a9       	ldd	r25, Y+48	; 0x30
    241a:	9c a7       	std	Y+44, r25	; 0x2c
    241c:	8b a7       	std	Y+43, r24	; 0x2b
    241e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2420:	9c a5       	ldd	r25, Y+44	; 0x2c
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_VoidInit4BitMode+0x3b8>
    2426:	9c a7       	std	Y+44, r25	; 0x2c
    2428:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_VoidSendCommand4BitMode(0x28);	// 4 BIT Mode 2 lines
    242a:	88 e2       	ldi	r24, 0x28	; 40
    242c:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e8       	ldi	r26, 0x80	; 128
    2436:	bf e3       	ldi	r27, 0x3F	; 63
    2438:	8f a3       	std	Y+39, r24	; 0x27
    243a:	98 a7       	std	Y+40, r25	; 0x28
    243c:	a9 a7       	std	Y+41, r26	; 0x29
    243e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6f a1       	ldd	r22, Y+39	; 0x27
    2442:	78 a5       	ldd	r23, Y+40	; 0x28
    2444:	89 a5       	ldd	r24, Y+41	; 0x29
    2446:	9a a5       	ldd	r25, Y+42	; 0x2a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8b a3       	std	Y+35, r24	; 0x23
    245a:	9c a3       	std	Y+36, r25	; 0x24
    245c:	ad a3       	std	Y+37, r26	; 0x25
    245e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_VoidInit4BitMode+0x418>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9a a3       	std	Y+34, r25	; 0x22
    247e:	89 a3       	std	Y+33, r24	; 0x21
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_VoidInit4BitMode+0x496>
	else if (__tmp > 65535)
    2482:	6b a1       	ldd	r22, Y+35	; 0x23
    2484:	7c a1       	ldd	r23, Y+36	; 0x24
    2486:	8d a1       	ldd	r24, Y+37	; 0x25
    2488:	9e a1       	ldd	r25, Y+38	; 0x26
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_VoidInit4BitMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6f a1       	ldd	r22, Y+39	; 0x27
    249c:	78 a5       	ldd	r23, Y+40	; 0x28
    249e:	89 a5       	ldd	r24, Y+41	; 0x29
    24a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9a a3       	std	Y+34, r25	; 0x22
    24c0:	89 a3       	std	Y+33, r24	; 0x21
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_VoidInit4BitMode+0x478>
    24c4:	80 e9       	ldi	r24, 0x90	; 144
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	98 a3       	std	Y+32, r25	; 0x20
    24ca:	8f 8f       	std	Y+31, r24	; 0x1f
    24cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ce:	98 a1       	ldd	r25, Y+32	; 0x20
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_VoidInit4BitMode+0x466>
    24d4:	98 a3       	std	Y+32, r25	; 0x20
    24d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	89 a1       	ldd	r24, Y+33	; 0x21
    24da:	9a a1       	ldd	r25, Y+34	; 0x22
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	89 a1       	ldd	r24, Y+33	; 0x21
    24e4:	9a a1       	ldd	r25, Y+34	; 0x22
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_VoidInit4BitMode+0x45a>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_VoidInit4BitMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6b a1       	ldd	r22, Y+35	; 0x23
    24ee:	7c a1       	ldd	r23, Y+36	; 0x24
    24f0:	8d a1       	ldd	r24, Y+37	; 0x25
    24f2:	9e a1       	ldd	r25, Y+38	; 0x26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9a a3       	std	Y+34, r25	; 0x22
    24fe:	89 a3       	std	Y+33, r24	; 0x21
    2500:	89 a1       	ldd	r24, Y+33	; 0x21
    2502:	9a a1       	ldd	r25, Y+34	; 0x22
    2504:	9e 8f       	std	Y+30, r25	; 0x1e
    2506:	8d 8f       	std	Y+29, r24	; 0x1d
    2508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_VoidInit4BitMode+0x4a2>
    2510:	9e 8f       	std	Y+30, r25	; 0x1e
    2512:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidSendCommand4BitMode(0x0E);
    2514:	8e e0       	ldi	r24, 0x0E	; 14
    2516:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e8       	ldi	r26, 0x80	; 128
    2520:	bf e3       	ldi	r27, 0x3F	; 63
    2522:	89 8f       	std	Y+25, r24	; 0x19
    2524:	9a 8f       	std	Y+26, r25	; 0x1a
    2526:	ab 8f       	std	Y+27, r26	; 0x1b
    2528:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	69 8d       	ldd	r22, Y+25	; 0x19
    252c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	55 e4       	ldi	r21, 0x45	; 69
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8d 8b       	std	Y+21, r24	; 0x15
    2544:	9e 8b       	std	Y+22, r25	; 0x16
    2546:	af 8b       	std	Y+23, r26	; 0x17
    2548:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    254a:	6d 89       	ldd	r22, Y+21	; 0x15
    254c:	7e 89       	ldd	r23, Y+22	; 0x16
    254e:	8f 89       	ldd	r24, Y+23	; 0x17
    2550:	98 8d       	ldd	r25, Y+24	; 0x18
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <LCD_VoidInit4BitMode+0x502>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <LCD_VoidInit4BitMode+0x580>
	else if (__tmp > 65535)
    256c:	6d 89       	ldd	r22, Y+21	; 0x15
    256e:	7e 89       	ldd	r23, Y+22	; 0x16
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	98 8d       	ldd	r25, Y+24	; 0x18
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <LCD_VoidInit4BitMode+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	69 8d       	ldd	r22, Y+25	; 0x19
    2586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <LCD_VoidInit4BitMode+0x562>
    25ae:	80 e9       	ldi	r24, 0x90	; 144
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	9a 8b       	std	Y+18, r25	; 0x12
    25b4:	89 8b       	std	Y+17, r24	; 0x11
    25b6:	89 89       	ldd	r24, Y+17	; 0x11
    25b8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_VoidInit4BitMode+0x550>
    25be:	9a 8b       	std	Y+18, r25	; 0x12
    25c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	8b 89       	ldd	r24, Y+19	; 0x13
    25c4:	9c 89       	ldd	r25, Y+20	; 0x14
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9c 8b       	std	Y+20, r25	; 0x14
    25ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <LCD_VoidInit4BitMode+0x544>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <LCD_VoidInit4BitMode+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
    25ea:	8b 89       	ldd	r24, Y+19	; 0x13
    25ec:	9c 89       	ldd	r25, Y+20	; 0x14
    25ee:	98 8b       	std	Y+16, r25	; 0x10
    25f0:	8f 87       	std	Y+15, r24	; 0x0f
    25f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f4:	98 89       	ldd	r25, Y+16	; 0x10
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_VoidInit4BitMode+0x58c>
    25fa:	98 8b       	std	Y+16, r25	; 0x10
    25fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidSendCommand4BitMode(0x06);
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
	LCD_VoidSendCommand4BitMode(0x01);	// clear display
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e2       	ldi	r26, 0x20	; 32
    2610:	b2 e4       	ldi	r27, 0x42	; 66
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a e7       	ldi	r20, 0x7A	; 122
    2628:	55 e4       	ldi	r21, 0x45	; 69
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <LCD_VoidInit4BitMode+0x5f2>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <LCD_VoidInit4BitMode+0x670>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <LCD_VoidInit4BitMode+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_VoidInit4BitMode+0x652>
    269e:	80 e9       	ldi	r24, 0x90	; 144
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_VoidInit4BitMode+0x640>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <LCD_VoidInit4BitMode+0x634>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <LCD_VoidInit4BitMode+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_VoidInit4BitMode+0x67c>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

}
    26ee:	cc 5a       	subi	r28, 0xAC	; 172
    26f0:	df 4f       	sbci	r29, 0xFF	; 255
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	08 95       	ret

00002706 <LCD_VoidSendCommand4BitMode>:



void LCD_VoidSendCommand4BitMode(u8 Copy_u8Command)
{
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	c6 55       	subi	r28, 0x56	; 86
    2714:	d0 40       	sbci	r29, 0x00	; 0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	fe 01       	movw	r30, r28
    2722:	ea 5a       	subi	r30, 0xAA	; 170
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,PinLow);
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,PinLow);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	u8 port_data;
	DIO_VidGetPortValue(LCD_DATA_PORT,&port_data);
    273c:	9e 01       	movw	r18, r28
    273e:	2b 5a       	subi	r18, 0xAB	; 171
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	b9 01       	movw	r22, r18
    2746:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VidGetPortValue>
	 send_upper(port_data,Copy_u8Command);
    274a:	fe 01       	movw	r30, r28
    274c:	eb 5a       	subi	r30, 0xAB	; 171
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	98 2f       	mov	r25, r24
    2754:	90 7f       	andi	r25, 0xF0	; 240
    2756:	fe 01       	movw	r30, r28
    2758:	ea 5a       	subi	r30, 0xAA	; 170
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	82 95       	swap	r24
    2760:	8f 70       	andi	r24, 0x0F	; 15
    2762:	89 2b       	or	r24, r25
    2764:	fe 01       	movw	r30, r28
    2766:	eb 5a       	subi	r30, 0xAB	; 171
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 83       	st	Z, r24
	 DIO_VidSetPortValue(LCD_DATA_PORT,port_data);
    276c:	fe 01       	movw	r30, r28
    276e:	eb 5a       	subi	r30, 0xAB	; 171
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	90 81       	ld	r25, Z
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	69 2f       	mov	r22, r25
    2778:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

	 DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	62 e0       	ldi	r22, 0x02	; 2
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2786:	fe 01       	movw	r30, r28
    2788:	ef 5a       	subi	r30, 0xAF	; 175
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e8       	ldi	r26, 0x80	; 128
    2792:	bf e3       	ldi	r27, 0x3F	; 63
    2794:	80 83       	st	Z, r24
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	a2 83       	std	Z+2, r26	; 0x02
    279a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	8e 01       	movw	r16, r28
    279e:	03 5b       	subi	r16, 0xB3	; 179
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	fe 01       	movw	r30, r28
    27a4:	ef 5a       	subi	r30, 0xAF	; 175
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	55 e4       	ldi	r21, 0x45	; 69
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	80 83       	st	Z, r24
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	a2 83       	std	Z+2, r26	; 0x02
    27c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ca:	fe 01       	movw	r30, r28
    27cc:	e3 5b       	subi	r30, 0xB3	; 179
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	44 f4       	brge	.+16     	; 0x27f8 <LCD_VoidSendCommand4BitMode+0xf2>
		__ticks = 1;
    27e8:	fe 01       	movw	r30, r28
    27ea:	e5 5b       	subi	r30, 0xB5	; 181
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	64 c0       	rjmp	.+200    	; 0x28c0 <LCD_VoidSendCommand4BitMode+0x1ba>
	else if (__tmp > 65535)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e3 5b       	subi	r30, 0xB3	; 179
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	0c f0       	brlt	.+2      	; 0x2818 <LCD_VoidSendCommand4BitMode+0x112>
    2816:	43 c0       	rjmp	.+134    	; 0x289e <LCD_VoidSendCommand4BitMode+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2818:	fe 01       	movw	r30, r28
    281a:	ef 5a       	subi	r30, 0xAF	; 175
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e2       	ldi	r20, 0x20	; 32
    282c:	51 e4       	ldi	r21, 0x41	; 65
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8e 01       	movw	r16, r28
    2838:	05 5b       	subi	r16, 0xB5	; 181
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	f8 01       	movw	r30, r16
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	80 83       	st	Z, r24
    284e:	1f c0       	rjmp	.+62     	; 0x288e <LCD_VoidSendCommand4BitMode+0x188>
    2850:	fe 01       	movw	r30, r28
    2852:	e7 5b       	subi	r30, 0xB7	; 183
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 e9       	ldi	r24, 0x90	; 144
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	80 83       	st	Z, r24
    285e:	fe 01       	movw	r30, r28
    2860:	e7 5b       	subi	r30, 0xB7	; 183
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_VoidSendCommand4BitMode+0x162>
    286c:	fe 01       	movw	r30, r28
    286e:	e7 5b       	subi	r30, 0xB7	; 183
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	de 01       	movw	r26, r28
    2878:	a5 5b       	subi	r26, 0xB5	; 181
    287a:	bf 4f       	sbci	r27, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	e5 5b       	subi	r30, 0xB5	; 181
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	11 96       	adiw	r26, 0x01	; 1
    288a:	9c 93       	st	X, r25
    288c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	fe 01       	movw	r30, r28
    2890:	e5 5b       	subi	r30, 0xB5	; 181
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	d1 f6       	brne	.-76     	; 0x2850 <LCD_VoidSendCommand4BitMode+0x14a>
    289c:	27 c0       	rjmp	.+78     	; 0x28ec <LCD_VoidSendCommand4BitMode+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	8e 01       	movw	r16, r28
    28a0:	05 5b       	subi	r16, 0xB5	; 181
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 5b       	subi	r30, 0xB3	; 179
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	f8 01       	movw	r30, r16
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
    28c0:	de 01       	movw	r26, r28
    28c2:	a9 5b       	subi	r26, 0xB9	; 185
    28c4:	bf 4f       	sbci	r27, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e5 5b       	subi	r30, 0xB5	; 181
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	8d 93       	st	X+, r24
    28d2:	9c 93       	st	X, r25
    28d4:	fe 01       	movw	r30, r28
    28d6:	e9 5b       	subi	r30, 0xB9	; 185
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_VoidSendCommand4BitMode+0x1d8>
    28e2:	fe 01       	movw	r30, r28
    28e4:	e9 5b       	subi	r30, 0xB9	; 185
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
	     _delay_ms(1);
	     DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	62 e0       	ldi	r22, 0x02	; 2
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    28f6:	fe 01       	movw	r30, r28
    28f8:	ed 5b       	subi	r30, 0xBD	; 189
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e8       	ldi	r26, 0x80	; 128
    2902:	bf e3       	ldi	r27, 0x3F	; 63
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	8e 01       	movw	r16, r28
    290e:	01 5c       	subi	r16, 0xC1	; 193
    2910:	1f 4f       	sbci	r17, 0xFF	; 255
    2912:	fe 01       	movw	r30, r28
    2914:	ed 5b       	subi	r30, 0xBD	; 189
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	55 e4       	ldi	r21, 0x45	; 69
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	80 83       	st	Z, r24
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	a2 83       	std	Z+2, r26	; 0x02
    2938:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    293a:	fe 01       	movw	r30, r28
    293c:	ff 96       	adiw	r30, 0x3f	; 63
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <LCD_VoidSendCommand4BitMode+0x25a>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9e af       	std	Y+62, r25	; 0x3e
    295c:	8d af       	std	Y+61, r24	; 0x3d
    295e:	46 c0       	rjmp	.+140    	; 0x29ec <LCD_VoidSendCommand4BitMode+0x2e6>
	else if (__tmp > 65535)
    2960:	fe 01       	movw	r30, r28
    2962:	ff 96       	adiw	r30, 0x3f	; 63
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	64 f5       	brge	.+88     	; 0x29d4 <LCD_VoidSendCommand4BitMode+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	fe 01       	movw	r30, r28
    297e:	ed 5b       	subi	r30, 0xBD	; 189
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e af       	std	Y+62, r25	; 0x3e
    29a8:	8d af       	std	Y+61, r24	; 0x3d
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <LCD_VoidSendCommand4BitMode+0x2c4>
    29ac:	80 e9       	ldi	r24, 0x90	; 144
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	9c af       	std	Y+60, r25	; 0x3c
    29b2:	8b af       	std	Y+59, r24	; 0x3b
    29b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    29b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_VoidSendCommand4BitMode+0x2b2>
    29bc:	9c af       	std	Y+60, r25	; 0x3c
    29be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9e af       	std	Y+62, r25	; 0x3e
    29c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    29cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <LCD_VoidSendCommand4BitMode+0x2a6>
    29d2:	16 c0       	rjmp	.+44     	; 0x2a00 <LCD_VoidSendCommand4BitMode+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	fe 01       	movw	r30, r28
    29d6:	ff 96       	adiw	r30, 0x3f	; 63
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e af       	std	Y+62, r25	; 0x3e
    29ea:	8d af       	std	Y+61, r24	; 0x3d
    29ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    29f0:	9a af       	std	Y+58, r25	; 0x3a
    29f2:	89 af       	std	Y+57, r24	; 0x39
    29f4:	89 ad       	ldd	r24, Y+57	; 0x39
    29f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_VoidSendCommand4BitMode+0x2f2>
    29fc:	9a af       	std	Y+58, r25	; 0x3a
    29fe:	89 af       	std	Y+57, r24	; 0x39
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 ea       	ldi	r26, 0xA0	; 160
    2a06:	b1 e4       	ldi	r27, 0x41	; 65
    2a08:	8d ab       	std	Y+53, r24	; 0x35
    2a0a:	9e ab       	std	Y+54, r25	; 0x36
    2a0c:	af ab       	std	Y+55, r26	; 0x37
    2a0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6d a9       	ldd	r22, Y+53	; 0x35
    2a12:	7e a9       	ldd	r23, Y+54	; 0x36
    2a14:	8f a9       	ldd	r24, Y+55	; 0x37
    2a16:	98 ad       	ldd	r25, Y+56	; 0x38
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	55 e4       	ldi	r21, 0x45	; 69
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	89 ab       	std	Y+49, r24	; 0x31
    2a2a:	9a ab       	std	Y+50, r25	; 0x32
    2a2c:	ab ab       	std	Y+51, r26	; 0x33
    2a2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a30:	69 a9       	ldd	r22, Y+49	; 0x31
    2a32:	7a a9       	ldd	r23, Y+50	; 0x32
    2a34:	8b a9       	ldd	r24, Y+51	; 0x33
    2a36:	9c a9       	ldd	r25, Y+52	; 0x34
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <LCD_VoidSendCommand4BitMode+0x34c>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	98 ab       	std	Y+48, r25	; 0x30
    2a4e:	8f a7       	std	Y+47, r24	; 0x2f
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <LCD_VoidSendCommand4BitMode+0x3ca>
	else if (__tmp > 65535)
    2a52:	69 a9       	ldd	r22, Y+49	; 0x31
    2a54:	7a a9       	ldd	r23, Y+50	; 0x32
    2a56:	8b a9       	ldd	r24, Y+51	; 0x33
    2a58:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <LCD_VoidSendCommand4BitMode+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a70:	98 ad       	ldd	r25, Y+56	; 0x38
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	98 ab       	std	Y+48, r25	; 0x30
    2a90:	8f a7       	std	Y+47, r24	; 0x2f
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <LCD_VoidSendCommand4BitMode+0x3ac>
    2a94:	80 e9       	ldi	r24, 0x90	; 144
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	9e a7       	std	Y+46, r25	; 0x2e
    2a9a:	8d a7       	std	Y+45, r24	; 0x2d
    2a9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <LCD_VoidSendCommand4BitMode+0x39a>
    2aa4:	9e a7       	std	Y+46, r25	; 0x2e
    2aa6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	98 ab       	std	Y+48, r25	; 0x30
    2ab0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <LCD_VoidSendCommand4BitMode+0x38e>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <LCD_VoidSendCommand4BitMode+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	69 a9       	ldd	r22, Y+49	; 0x31
    2abe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	98 ab       	std	Y+48, r25	; 0x30
    2ace:	8f a7       	std	Y+47, r24	; 0x2f
    2ad0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad4:	9c a7       	std	Y+44, r25	; 0x2c
    2ad6:	8b a7       	std	Y+43, r24	; 0x2b
    2ad8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ada:	9c a5       	ldd	r25, Y+44	; 0x2c
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_VoidSendCommand4BitMode+0x3d6>
    2ae0:	9c a7       	std	Y+44, r25	; 0x2c
    2ae2:	8b a7       	std	Y+43, r24	; 0x2b
	     _delay_ms(1);

	 _delay_ms(20);
	 DIO_VidGetPortValue(LCD_DATA_PORT,&port_data);
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2b 5a       	subi	r18, 0xAB	; 171
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	b9 01       	movw	r22, r18
    2aee:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VidGetPortValue>
	 send_lower(port_data,Copy_u8Command);
    2af2:	fe 01       	movw	r30, r28
    2af4:	eb 5a       	subi	r30, 0xAB	; 171
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	98 2f       	mov	r25, r24
    2afc:	90 7f       	andi	r25, 0xF0	; 240
    2afe:	fe 01       	movw	r30, r28
    2b00:	ea 5a       	subi	r30, 0xAA	; 170
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 70       	andi	r24, 0x0F	; 15
    2b08:	89 2b       	or	r24, r25
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	eb 5a       	subi	r30, 0xAB	; 171
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 83       	st	Z, r24
	 DIO_VidSetPortValue(LCD_DATA_PORT,port_data);
    2b12:	fe 01       	movw	r30, r28
    2b14:	eb 5a       	subi	r30, 0xAB	; 171
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	90 81       	ld	r25, Z
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	69 2f       	mov	r22, r25
    2b1e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

	 DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	8f a3       	std	Y+39, r24	; 0x27
    2b36:	98 a7       	std	Y+40, r25	; 0x28
    2b38:	a9 a7       	std	Y+41, r26	; 0x29
    2b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b40:	89 a5       	ldd	r24, Y+41	; 0x29
    2b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a e7       	ldi	r20, 0x7A	; 122
    2b4a:	55 e4       	ldi	r21, 0x45	; 69
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8b a3       	std	Y+35, r24	; 0x23
    2b56:	9c a3       	std	Y+36, r25	; 0x24
    2b58:	ad a3       	std	Y+37, r26	; 0x25
    2b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b60:	8d a1       	ldd	r24, Y+37	; 0x25
    2b62:	9e a1       	ldd	r25, Y+38	; 0x26
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_VoidSendCommand4BitMode+0x478>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9a a3       	std	Y+34, r25	; 0x22
    2b7a:	89 a3       	std	Y+33, r24	; 0x21
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <LCD_VoidSendCommand4BitMode+0x4f6>
	else if (__tmp > 65535)
    2b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b80:	7c a1       	ldd	r23, Y+36	; 0x24
    2b82:	8d a1       	ldd	r24, Y+37	; 0x25
    2b84:	9e a1       	ldd	r25, Y+38	; 0x26
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <LCD_VoidSendCommand4BitMode+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	6f a1       	ldd	r22, Y+39	; 0x27
    2b98:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9a a3       	std	Y+34, r25	; 0x22
    2bbc:	89 a3       	std	Y+33, r24	; 0x21
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <LCD_VoidSendCommand4BitMode+0x4d8>
    2bc0:	80 e9       	ldi	r24, 0x90	; 144
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	98 a3       	std	Y+32, r25	; 0x20
    2bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bca:	98 a1       	ldd	r25, Y+32	; 0x20
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_VoidSendCommand4BitMode+0x4c6>
    2bd0:	98 a3       	std	Y+32, r25	; 0x20
    2bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	9a a3       	std	Y+34, r25	; 0x22
    2bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	9a a1       	ldd	r25, Y+34	; 0x22
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <LCD_VoidSendCommand4BitMode+0x4ba>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <LCD_VoidSendCommand4BitMode+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bea:	7c a1       	ldd	r23, Y+36	; 0x24
    2bec:	8d a1       	ldd	r24, Y+37	; 0x25
    2bee:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9a a3       	std	Y+34, r25	; 0x22
    2bfa:	89 a3       	std	Y+33, r24	; 0x21
    2bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2c00:	9e 8f       	std	Y+30, r25	; 0x1e
    2c02:	8d 8f       	std	Y+29, r24	; 0x1d
    2c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_VoidSendCommand4BitMode+0x502>
    2c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0e:	8d 8f       	std	Y+29, r24	; 0x1d
	     _delay_ms(1);
	     DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	62 e0       	ldi	r22, 0x02	; 2
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e8       	ldi	r26, 0x80	; 128
    2c20:	bf e3       	ldi	r27, 0x3F	; 63
    2c22:	89 8f       	std	Y+25, r24	; 0x19
    2c24:	9a 8f       	std	Y+26, r25	; 0x1a
    2c26:	ab 8f       	std	Y+27, r26	; 0x1b
    2c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	55 e4       	ldi	r21, 0x45	; 69
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8d 8b       	std	Y+21, r24	; 0x15
    2c44:	9e 8b       	std	Y+22, r25	; 0x16
    2c46:	af 8b       	std	Y+23, r26	; 0x17
    2c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <LCD_VoidSendCommand4BitMode+0x566>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c 8b       	std	Y+20, r25	; 0x14
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <LCD_VoidSendCommand4BitMode+0x5e4>
	else if (__tmp > 65535)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <LCD_VoidSendCommand4BitMode+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	69 8d       	ldd	r22, Y+25	; 0x19
    2c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9c 8b       	std	Y+20, r25	; 0x14
    2caa:	8b 8b       	std	Y+19, r24	; 0x13
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <LCD_VoidSendCommand4BitMode+0x5c6>
    2cae:	80 e9       	ldi	r24, 0x90	; 144
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	9a 8b       	std	Y+18, r25	; 0x12
    2cb4:	89 8b       	std	Y+17, r24	; 0x11
    2cb6:	89 89       	ldd	r24, Y+17	; 0x11
    2cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_VoidSendCommand4BitMode+0x5b4>
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <LCD_VoidSendCommand4BitMode+0x5a8>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <LCD_VoidSendCommand4BitMode+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	8b 89       	ldd	r24, Y+19	; 0x13
    2cec:	9c 89       	ldd	r25, Y+20	; 0x14
    2cee:	98 8b       	std	Y+16, r25	; 0x10
    2cf0:	8f 87       	std	Y+15, r24	; 0x0f
    2cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf4:	98 89       	ldd	r25, Y+16	; 0x10
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_VoidSendCommand4BitMode+0x5f0>
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 ea       	ldi	r26, 0xA0	; 160
    2d04:	b0 e4       	ldi	r27, 0x40	; 64
    2d06:	8b 87       	std	Y+11, r24	; 0x0b
    2d08:	9c 87       	std	Y+12, r25	; 0x0c
    2d0a:	ad 87       	std	Y+13, r26	; 0x0d
    2d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a e7       	ldi	r20, 0x7A	; 122
    2d1c:	55 e4       	ldi	r21, 0x45	; 69
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8f 83       	std	Y+7, r24	; 0x07
    2d28:	98 87       	std	Y+8, r25	; 0x08
    2d2a:	a9 87       	std	Y+9, r26	; 0x09
    2d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <LCD_VoidSendCommand4BitMode+0x64a>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <LCD_VoidSendCommand4BitMode+0x6c8>
	else if (__tmp > 65535)
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <LCD_VoidSendCommand4BitMode+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <LCD_VoidSendCommand4BitMode+0x6aa>
    2d92:	80 e9       	ldi	r24, 0x90	; 144
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <LCD_VoidSendCommand4BitMode+0x698>
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <LCD_VoidSendCommand4BitMode+0x68c>
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <LCD_VoidSendCommand4BitMode+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <LCD_VoidSendCommand4BitMode+0x6d4>
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
	     _delay_ms(1);

	_delay_ms(5);
}
    2de2:	ca 5a       	subi	r28, 0xAA	; 170
    2de4:	df 4f       	sbci	r29, 0xFF	; 255
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	08 95       	ret

00002dfa <LCD_VoidSendData4BitMode>:


 u8 ROW_Check=1,Cloumn_Check=0;


void LCD_VoidSendData4BitMode(u8 Copy_u8Data){
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	c6 55       	subi	r28, 0x56	; 86
    2e08:	d0 40       	sbci	r29, 0x00	; 0
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	fe 01       	movw	r30, r28
    2e16:	ea 5a       	subi	r30, 0xAA	; 170
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 83       	st	Z, r24
    	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,PinHigh);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,PinLow);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

		u8 port_data;
		DIO_VidGetPortValue(LCD_DATA_PORT,&port_data);
    2e30:	9e 01       	movw	r18, r28
    2e32:	2b 5a       	subi	r18, 0xAB	; 171
    2e34:	3f 4f       	sbci	r19, 0xFF	; 255
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	b9 01       	movw	r22, r18
    2e3a:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VidGetPortValue>
		 send_upper(port_data,Copy_u8Data);
    2e3e:	fe 01       	movw	r30, r28
    2e40:	eb 5a       	subi	r30, 0xAB	; 171
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	98 2f       	mov	r25, r24
    2e48:	90 7f       	andi	r25, 0xF0	; 240
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	ea 5a       	subi	r30, 0xAA	; 170
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	82 95       	swap	r24
    2e54:	8f 70       	andi	r24, 0x0F	; 15
    2e56:	89 2b       	or	r24, r25
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 5a       	subi	r30, 0xAB	; 171
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 83       	st	Z, r24
		 DIO_VidSetPortValue(LCD_DATA_PORT,port_data);
    2e60:	fe 01       	movw	r30, r28
    2e62:	eb 5a       	subi	r30, 0xAB	; 171
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	90 81       	ld	r25, Z
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	69 2f       	mov	r22, r25
    2e6c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

		 DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	62 e0       	ldi	r22, 0x02	; 2
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	ef 5a       	subi	r30, 0xAF	; 175
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	a0 e8       	ldi	r26, 0x80	; 128
    2e86:	bf e3       	ldi	r27, 0x3F	; 63
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e90:	8e 01       	movw	r16, r28
    2e92:	03 5b       	subi	r16, 0xB3	; 179
    2e94:	1f 4f       	sbci	r17, 0xFF	; 255
    2e96:	fe 01       	movw	r30, r28
    2e98:	ef 5a       	subi	r30, 0xAF	; 175
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	60 81       	ld	r22, Z
    2e9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ea0:	82 81       	ldd	r24, Z+2	; 0x02
    2ea2:	93 81       	ldd	r25, Z+3	; 0x03
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	4a e7       	ldi	r20, 0x7A	; 122
    2eaa:	55 e4       	ldi	r21, 0x45	; 69
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	80 83       	st	Z, r24
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	a2 83       	std	Z+2, r26	; 0x02
    2ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e3 5b       	subi	r30, 0xB3	; 179
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	44 f4       	brge	.+16     	; 0x2eec <LCD_VoidSendData4BitMode+0xf2>
		__ticks = 1;
    2edc:	fe 01       	movw	r30, r28
    2ede:	e5 5b       	subi	r30, 0xB5	; 181
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	64 c0       	rjmp	.+200    	; 0x2fb4 <LCD_VoidSendData4BitMode+0x1ba>
	else if (__tmp > 65535)
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 5b       	subi	r30, 0xB3	; 179
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	0c f0       	brlt	.+2      	; 0x2f0c <LCD_VoidSendData4BitMode+0x112>
    2f0a:	43 c0       	rjmp	.+134    	; 0x2f92 <LCD_VoidSendData4BitMode+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	ef 5a       	subi	r30, 0xAF	; 175
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e2       	ldi	r20, 0x20	; 32
    2f20:	51 e4       	ldi	r21, 0x41	; 65
    2f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	8e 01       	movw	r16, r28
    2f2c:	05 5b       	subi	r16, 0xB5	; 181
    2f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f30:	bc 01       	movw	r22, r24
    2f32:	cd 01       	movw	r24, r26
    2f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
    2f42:	1f c0       	rjmp	.+62     	; 0x2f82 <LCD_VoidSendData4BitMode+0x188>
    2f44:	fe 01       	movw	r30, r28
    2f46:	e7 5b       	subi	r30, 0xB7	; 183
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 e9       	ldi	r24, 0x90	; 144
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	fe 01       	movw	r30, r28
    2f54:	e7 5b       	subi	r30, 0xB7	; 183
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <LCD_VoidSendData4BitMode+0x162>
    2f60:	fe 01       	movw	r30, r28
    2f62:	e7 5b       	subi	r30, 0xB7	; 183
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	de 01       	movw	r26, r28
    2f6c:	a5 5b       	subi	r26, 0xB5	; 181
    2f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	e5 5b       	subi	r30, 0xB5	; 181
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	11 96       	adiw	r26, 0x01	; 1
    2f7e:	9c 93       	st	X, r25
    2f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	fe 01       	movw	r30, r28
    2f84:	e5 5b       	subi	r30, 0xB5	; 181
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	d1 f6       	brne	.-76     	; 0x2f44 <LCD_VoidSendData4BitMode+0x14a>
    2f90:	27 c0       	rjmp	.+78     	; 0x2fe0 <LCD_VoidSendData4BitMode+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f92:	8e 01       	movw	r16, r28
    2f94:	05 5b       	subi	r16, 0xB5	; 181
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e3 5b       	subi	r30, 0xB3	; 179
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	f8 01       	movw	r30, r16
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    2fb4:	de 01       	movw	r26, r28
    2fb6:	a9 5b       	subi	r26, 0xB9	; 185
    2fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e5 5b       	subi	r30, 0xB5	; 181
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	8d 93       	st	X+, r24
    2fc6:	9c 93       	st	X, r25
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e9 5b       	subi	r30, 0xB9	; 185
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <LCD_VoidSendData4BitMode+0x1d8>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e9 5b       	subi	r30, 0xB9	; 185
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	80 83       	st	Z, r24
		     _delay_ms(1);
		     DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	62 e0       	ldi	r22, 0x02	; 2
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2fea:	fe 01       	movw	r30, r28
    2fec:	ed 5b       	subi	r30, 0xBD	; 189
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a0 e8       	ldi	r26, 0x80	; 128
    2ff6:	bf e3       	ldi	r27, 0x3F	; 63
    2ff8:	80 83       	st	Z, r24
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	a2 83       	std	Z+2, r26	; 0x02
    2ffe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	8e 01       	movw	r16, r28
    3002:	01 5c       	subi	r16, 0xC1	; 193
    3004:	1f 4f       	sbci	r17, 0xFF	; 255
    3006:	fe 01       	movw	r30, r28
    3008:	ed 5b       	subi	r30, 0xBD	; 189
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a e7       	ldi	r20, 0x7A	; 122
    301a:	55 e4       	ldi	r21, 0x45	; 69
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	f8 01       	movw	r30, r16
    3026:	80 83       	st	Z, r24
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	a2 83       	std	Z+2, r26	; 0x02
    302c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    302e:	fe 01       	movw	r30, r28
    3030:	ff 96       	adiw	r30, 0x3f	; 63
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <LCD_VoidSendData4BitMode+0x25a>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e af       	std	Y+62, r25	; 0x3e
    3050:	8d af       	std	Y+61, r24	; 0x3d
    3052:	46 c0       	rjmp	.+140    	; 0x30e0 <LCD_VoidSendData4BitMode+0x2e6>
	else if (__tmp > 65535)
    3054:	fe 01       	movw	r30, r28
    3056:	ff 96       	adiw	r30, 0x3f	; 63
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	64 f5       	brge	.+88     	; 0x30c8 <LCD_VoidSendData4BitMode+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	fe 01       	movw	r30, r28
    3072:	ed 5b       	subi	r30, 0xBD	; 189
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e2       	ldi	r20, 0x20	; 32
    3084:	51 e4       	ldi	r21, 0x41	; 65
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e af       	std	Y+62, r25	; 0x3e
    309c:	8d af       	std	Y+61, r24	; 0x3d
    309e:	0f c0       	rjmp	.+30     	; 0x30be <LCD_VoidSendData4BitMode+0x2c4>
    30a0:	80 e9       	ldi	r24, 0x90	; 144
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	9c af       	std	Y+60, r25	; 0x3c
    30a6:	8b af       	std	Y+59, r24	; 0x3b
    30a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    30aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <LCD_VoidSendData4BitMode+0x2b2>
    30b0:	9c af       	std	Y+60, r25	; 0x3c
    30b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    30b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	9e af       	std	Y+62, r25	; 0x3e
    30bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30be:	8d ad       	ldd	r24, Y+61	; 0x3d
    30c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <LCD_VoidSendData4BitMode+0x2a6>
    30c6:	16 c0       	rjmp	.+44     	; 0x30f4 <LCD_VoidSendData4BitMode+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c8:	fe 01       	movw	r30, r28
    30ca:	ff 96       	adiw	r30, 0x3f	; 63
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9e af       	std	Y+62, r25	; 0x3e
    30de:	8d af       	std	Y+61, r24	; 0x3d
    30e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    30e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    30e4:	9a af       	std	Y+58, r25	; 0x3a
    30e6:	89 af       	std	Y+57, r24	; 0x39
    30e8:	89 ad       	ldd	r24, Y+57	; 0x39
    30ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <LCD_VoidSendData4BitMode+0x2f2>
    30f0:	9a af       	std	Y+58, r25	; 0x3a
    30f2:	89 af       	std	Y+57, r24	; 0x39
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a0 ea       	ldi	r26, 0xA0	; 160
    30fa:	b1 e4       	ldi	r27, 0x41	; 65
    30fc:	8d ab       	std	Y+53, r24	; 0x35
    30fe:	9e ab       	std	Y+54, r25	; 0x36
    3100:	af ab       	std	Y+55, r26	; 0x37
    3102:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3104:	6d a9       	ldd	r22, Y+53	; 0x35
    3106:	7e a9       	ldd	r23, Y+54	; 0x36
    3108:	8f a9       	ldd	r24, Y+55	; 0x37
    310a:	98 ad       	ldd	r25, Y+56	; 0x38
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a e7       	ldi	r20, 0x7A	; 122
    3112:	55 e4       	ldi	r21, 0x45	; 69
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	89 ab       	std	Y+49, r24	; 0x31
    311e:	9a ab       	std	Y+50, r25	; 0x32
    3120:	ab ab       	std	Y+51, r26	; 0x33
    3122:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3124:	69 a9       	ldd	r22, Y+49	; 0x31
    3126:	7a a9       	ldd	r23, Y+50	; 0x32
    3128:	8b a9       	ldd	r24, Y+51	; 0x33
    312a:	9c a9       	ldd	r25, Y+52	; 0x34
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3138:	88 23       	and	r24, r24
    313a:	2c f4       	brge	.+10     	; 0x3146 <LCD_VoidSendData4BitMode+0x34c>
		__ticks = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	98 ab       	std	Y+48, r25	; 0x30
    3142:	8f a7       	std	Y+47, r24	; 0x2f
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <LCD_VoidSendData4BitMode+0x3ca>
	else if (__tmp > 65535)
    3146:	69 a9       	ldd	r22, Y+49	; 0x31
    3148:	7a a9       	ldd	r23, Y+50	; 0x32
    314a:	8b a9       	ldd	r24, Y+51	; 0x33
    314c:	9c a9       	ldd	r25, Y+52	; 0x34
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	4c f5       	brge	.+82     	; 0x31b0 <LCD_VoidSendData4BitMode+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315e:	6d a9       	ldd	r22, Y+53	; 0x35
    3160:	7e a9       	ldd	r23, Y+54	; 0x36
    3162:	8f a9       	ldd	r24, Y+55	; 0x37
    3164:	98 ad       	ldd	r25, Y+56	; 0x38
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e2       	ldi	r20, 0x20	; 32
    316c:	51 e4       	ldi	r21, 0x41	; 65
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	98 ab       	std	Y+48, r25	; 0x30
    3184:	8f a7       	std	Y+47, r24	; 0x2f
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <LCD_VoidSendData4BitMode+0x3ac>
    3188:	80 e9       	ldi	r24, 0x90	; 144
    318a:	91 e0       	ldi	r25, 0x01	; 1
    318c:	9e a7       	std	Y+46, r25	; 0x2e
    318e:	8d a7       	std	Y+45, r24	; 0x2d
    3190:	8d a5       	ldd	r24, Y+45	; 0x2d
    3192:	9e a5       	ldd	r25, Y+46	; 0x2e
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <LCD_VoidSendData4BitMode+0x39a>
    3198:	9e a7       	std	Y+46, r25	; 0x2e
    319a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319c:	8f a5       	ldd	r24, Y+47	; 0x2f
    319e:	98 a9       	ldd	r25, Y+48	; 0x30
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	98 ab       	std	Y+48, r25	; 0x30
    31a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a8:	98 a9       	ldd	r25, Y+48	; 0x30
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	69 f7       	brne	.-38     	; 0x3188 <LCD_VoidSendData4BitMode+0x38e>
    31ae:	14 c0       	rjmp	.+40     	; 0x31d8 <LCD_VoidSendData4BitMode+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b0:	69 a9       	ldd	r22, Y+49	; 0x31
    31b2:	7a a9       	ldd	r23, Y+50	; 0x32
    31b4:	8b a9       	ldd	r24, Y+51	; 0x33
    31b6:	9c a9       	ldd	r25, Y+52	; 0x34
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	98 ab       	std	Y+48, r25	; 0x30
    31c2:	8f a7       	std	Y+47, r24	; 0x2f
    31c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c6:	98 a9       	ldd	r25, Y+48	; 0x30
    31c8:	9c a7       	std	Y+44, r25	; 0x2c
    31ca:	8b a7       	std	Y+43, r24	; 0x2b
    31cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <LCD_VoidSendData4BitMode+0x3d6>
    31d4:	9c a7       	std	Y+44, r25	; 0x2c
    31d6:	8b a7       	std	Y+43, r24	; 0x2b
		     _delay_ms(1);

		 _delay_ms(20);

		 DIO_VidGetPortValue(LCD_DATA_PORT,&port_data);
    31d8:	9e 01       	movw	r18, r28
    31da:	2b 5a       	subi	r18, 0xAB	; 171
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	b9 01       	movw	r22, r18
    31e2:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VidGetPortValue>
		 send_lower(port_data,Copy_u8Data);
    31e6:	fe 01       	movw	r30, r28
    31e8:	eb 5a       	subi	r30, 0xAB	; 171
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	98 2f       	mov	r25, r24
    31f0:	90 7f       	andi	r25, 0xF0	; 240
    31f2:	fe 01       	movw	r30, r28
    31f4:	ea 5a       	subi	r30, 0xAA	; 170
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 81       	ld	r24, Z
    31fa:	8f 70       	andi	r24, 0x0F	; 15
    31fc:	89 2b       	or	r24, r25
    31fe:	fe 01       	movw	r30, r28
    3200:	eb 5a       	subi	r30, 0xAB	; 171
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 83       	st	Z, r24
		 DIO_VidSetPortValue(LCD_DATA_PORT,port_data);
    3206:	fe 01       	movw	r30, r28
    3208:	eb 5a       	subi	r30, 0xAB	; 171
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	90 81       	ld	r25, Z
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	69 2f       	mov	r22, r25
    3212:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_VidSetPortValue>

		 DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinHigh);
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	62 e0       	ldi	r22, 0x02	; 2
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 e8       	ldi	r26, 0x80	; 128
    3226:	bf e3       	ldi	r27, 0x3F	; 63
    3228:	8f a3       	std	Y+39, r24	; 0x27
    322a:	98 a7       	std	Y+40, r25	; 0x28
    322c:	a9 a7       	std	Y+41, r26	; 0x29
    322e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3230:	6f a1       	ldd	r22, Y+39	; 0x27
    3232:	78 a5       	ldd	r23, Y+40	; 0x28
    3234:	89 a5       	ldd	r24, Y+41	; 0x29
    3236:	9a a5       	ldd	r25, Y+42	; 0x2a
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	4a e7       	ldi	r20, 0x7A	; 122
    323e:	55 e4       	ldi	r21, 0x45	; 69
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8b a3       	std	Y+35, r24	; 0x23
    324a:	9c a3       	std	Y+36, r25	; 0x24
    324c:	ad a3       	std	Y+37, r26	; 0x25
    324e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3250:	6b a1       	ldd	r22, Y+35	; 0x23
    3252:	7c a1       	ldd	r23, Y+36	; 0x24
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e8       	ldi	r20, 0x80	; 128
    325e:	5f e3       	ldi	r21, 0x3F	; 63
    3260:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3264:	88 23       	and	r24, r24
    3266:	2c f4       	brge	.+10     	; 0x3272 <LCD_VoidSendData4BitMode+0x478>
		__ticks = 1;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9a a3       	std	Y+34, r25	; 0x22
    326e:	89 a3       	std	Y+33, r24	; 0x21
    3270:	3f c0       	rjmp	.+126    	; 0x32f0 <LCD_VoidSendData4BitMode+0x4f6>
	else if (__tmp > 65535)
    3272:	6b a1       	ldd	r22, Y+35	; 0x23
    3274:	7c a1       	ldd	r23, Y+36	; 0x24
    3276:	8d a1       	ldd	r24, Y+37	; 0x25
    3278:	9e a1       	ldd	r25, Y+38	; 0x26
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	3f ef       	ldi	r19, 0xFF	; 255
    327e:	4f e7       	ldi	r20, 0x7F	; 127
    3280:	57 e4       	ldi	r21, 0x47	; 71
    3282:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3286:	18 16       	cp	r1, r24
    3288:	4c f5       	brge	.+82     	; 0x32dc <LCD_VoidSendData4BitMode+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328a:	6f a1       	ldd	r22, Y+39	; 0x27
    328c:	78 a5       	ldd	r23, Y+40	; 0x28
    328e:	89 a5       	ldd	r24, Y+41	; 0x29
    3290:	9a a5       	ldd	r25, Y+42	; 0x2a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e2       	ldi	r20, 0x20	; 32
    3298:	51 e4       	ldi	r21, 0x41	; 65
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9a a3       	std	Y+34, r25	; 0x22
    32b0:	89 a3       	std	Y+33, r24	; 0x21
    32b2:	0f c0       	rjmp	.+30     	; 0x32d2 <LCD_VoidSendData4BitMode+0x4d8>
    32b4:	80 e9       	ldi	r24, 0x90	; 144
    32b6:	91 e0       	ldi	r25, 0x01	; 1
    32b8:	98 a3       	std	Y+32, r25	; 0x20
    32ba:	8f 8f       	std	Y+31, r24	; 0x1f
    32bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32be:	98 a1       	ldd	r25, Y+32	; 0x20
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <LCD_VoidSendData4BitMode+0x4c6>
    32c4:	98 a3       	std	Y+32, r25	; 0x20
    32c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ca:	9a a1       	ldd	r25, Y+34	; 0x22
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	9a a3       	std	Y+34, r25	; 0x22
    32d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d2:	89 a1       	ldd	r24, Y+33	; 0x21
    32d4:	9a a1       	ldd	r25, Y+34	; 0x22
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	69 f7       	brne	.-38     	; 0x32b4 <LCD_VoidSendData4BitMode+0x4ba>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <LCD_VoidSendData4BitMode+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32dc:	6b a1       	ldd	r22, Y+35	; 0x23
    32de:	7c a1       	ldd	r23, Y+36	; 0x24
    32e0:	8d a1       	ldd	r24, Y+37	; 0x25
    32e2:	9e a1       	ldd	r25, Y+38	; 0x26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9a a3       	std	Y+34, r25	; 0x22
    32ee:	89 a3       	std	Y+33, r24	; 0x21
    32f0:	89 a1       	ldd	r24, Y+33	; 0x21
    32f2:	9a a1       	ldd	r25, Y+34	; 0x22
    32f4:	9e 8f       	std	Y+30, r25	; 0x1e
    32f6:	8d 8f       	std	Y+29, r24	; 0x1d
    32f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_VoidSendData4BitMode+0x502>
    3300:	9e 8f       	std	Y+30, r25	; 0x1e
    3302:	8d 8f       	std	Y+29, r24	; 0x1d
		     _delay_ms(1);
		     DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,PinLow);
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	62 e0       	ldi	r22, 0x02	; 2
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 e8       	ldi	r26, 0x80	; 128
    3314:	bf e3       	ldi	r27, 0x3F	; 63
    3316:	89 8f       	std	Y+25, r24	; 0x19
    3318:	9a 8f       	std	Y+26, r25	; 0x1a
    331a:	ab 8f       	std	Y+27, r26	; 0x1b
    331c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	4a e7       	ldi	r20, 0x7A	; 122
    332c:	55 e4       	ldi	r21, 0x45	; 69
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8d 8b       	std	Y+21, r24	; 0x15
    3338:	9e 8b       	std	Y+22, r25	; 0x16
    333a:	af 8b       	std	Y+23, r26	; 0x17
    333c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    333e:	6d 89       	ldd	r22, Y+21	; 0x15
    3340:	7e 89       	ldd	r23, Y+22	; 0x16
    3342:	8f 89       	ldd	r24, Y+23	; 0x17
    3344:	98 8d       	ldd	r25, Y+24	; 0x18
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	2c f4       	brge	.+10     	; 0x3360 <LCD_VoidSendData4BitMode+0x566>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9c 8b       	std	Y+20, r25	; 0x14
    335c:	8b 8b       	std	Y+19, r24	; 0x13
    335e:	3f c0       	rjmp	.+126    	; 0x33de <LCD_VoidSendData4BitMode+0x5e4>
	else if (__tmp > 65535)
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	4c f5       	brge	.+82     	; 0x33ca <LCD_VoidSendData4BitMode+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3378:	69 8d       	ldd	r22, Y+25	; 0x19
    337a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9c 8b       	std	Y+20, r25	; 0x14
    339e:	8b 8b       	std	Y+19, r24	; 0x13
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <LCD_VoidSendData4BitMode+0x5c6>
    33a2:	80 e9       	ldi	r24, 0x90	; 144
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	9a 8b       	std	Y+18, r25	; 0x12
    33a8:	89 8b       	std	Y+17, r24	; 0x11
    33aa:	89 89       	ldd	r24, Y+17	; 0x11
    33ac:	9a 89       	ldd	r25, Y+18	; 0x12
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LCD_VoidSendData4BitMode+0x5b4>
    33b2:	9a 8b       	std	Y+18, r25	; 0x12
    33b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8b 89       	ldd	r24, Y+19	; 0x13
    33b8:	9c 89       	ldd	r25, Y+20	; 0x14
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9c 8b       	std	Y+20, r25	; 0x14
    33be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8b 89       	ldd	r24, Y+19	; 0x13
    33c2:	9c 89       	ldd	r25, Y+20	; 0x14
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <LCD_VoidSendData4BitMode+0x5a8>
    33c8:	14 c0       	rjmp	.+40     	; 0x33f2 <LCD_VoidSendData4BitMode+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	6d 89       	ldd	r22, Y+21	; 0x15
    33cc:	7e 89       	ldd	r23, Y+22	; 0x16
    33ce:	8f 89       	ldd	r24, Y+23	; 0x17
    33d0:	98 8d       	ldd	r25, Y+24	; 0x18
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9c 8b       	std	Y+20, r25	; 0x14
    33dc:	8b 8b       	std	Y+19, r24	; 0x13
    33de:	8b 89       	ldd	r24, Y+19	; 0x13
    33e0:	9c 89       	ldd	r25, Y+20	; 0x14
    33e2:	98 8b       	std	Y+16, r25	; 0x10
    33e4:	8f 87       	std	Y+15, r24	; 0x0f
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	98 89       	ldd	r25, Y+16	; 0x10
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <LCD_VoidSendData4BitMode+0x5f0>
    33ee:	98 8b       	std	Y+16, r25	; 0x10
    33f0:	8f 87       	std	Y+15, r24	; 0x0f
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a0 ea       	ldi	r26, 0xA0	; 160
    33f8:	b0 e4       	ldi	r27, 0x40	; 64
    33fa:	8b 87       	std	Y+11, r24	; 0x0b
    33fc:	9c 87       	std	Y+12, r25	; 0x0c
    33fe:	ad 87       	std	Y+13, r26	; 0x0d
    3400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	6b 85       	ldd	r22, Y+11	; 0x0b
    3404:	7c 85       	ldd	r23, Y+12	; 0x0c
    3406:	8d 85       	ldd	r24, Y+13	; 0x0d
    3408:	9e 85       	ldd	r25, Y+14	; 0x0e
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a e7       	ldi	r20, 0x7A	; 122
    3410:	55 e4       	ldi	r21, 0x45	; 69
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	8f 83       	std	Y+7, r24	; 0x07
    341c:	98 87       	std	Y+8, r25	; 0x08
    341e:	a9 87       	std	Y+9, r26	; 0x09
    3420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <LCD_VoidSendData4BitMode+0x64a>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <LCD_VoidSendData4BitMode+0x6c8>
	else if (__tmp > 65535)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <LCD_VoidSendData4BitMode+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <LCD_VoidSendData4BitMode+0x6aa>
    3486:	80 e9       	ldi	r24, 0x90	; 144
    3488:	91 e0       	ldi	r25, 0x01	; 1
    348a:	9c 83       	std	Y+4, r25	; 0x04
    348c:	8b 83       	std	Y+3, r24	; 0x03
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <LCD_VoidSendData4BitMode+0x698>
    3496:	9c 83       	std	Y+4, r25	; 0x04
    3498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <LCD_VoidSendData4BitMode+0x68c>
    34ac:	14 c0       	rjmp	.+40     	; 0x34d6 <LCD_VoidSendData4BitMode+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	6f 81       	ldd	r22, Y+7	; 0x07
    34b0:	78 85       	ldd	r23, Y+8	; 0x08
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	9a 83       	std	Y+2, r25	; 0x02
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <LCD_VoidSendData4BitMode+0x6d4>
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
		     _delay_ms(1);

		_delay_ms(5);
	Cloumn_Check++;
    34d6:	80 91 aa 01 	lds	r24, 0x01AA
    34da:	8f 5f       	subi	r24, 0xFF	; 255
    34dc:	80 93 aa 01 	sts	0x01AA, r24
	if(Cloumn_Check==16 && ROW_Check==1){
    34e0:	80 91 aa 01 	lds	r24, 0x01AA
    34e4:	80 31       	cpi	r24, 0x10	; 16
    34e6:	a9 f4       	brne	.+42     	; 0x3512 <LCD_VoidSendData4BitMode+0x718>
    34e8:	80 91 a8 01 	lds	r24, 0x01A8
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	89 f4       	brne	.+34     	; 0x3512 <LCD_VoidSendData4BitMode+0x718>
		ROW_Check++;
    34f0:	80 91 a8 01 	lds	r24, 0x01A8
    34f4:	8f 5f       	subi	r24, 0xFF	; 255
    34f6:	80 93 a8 01 	sts	0x01A8, r24
		Cloumn_Check=Cloumn_Check%16;
    34fa:	80 91 aa 01 	lds	r24, 0x01AA
    34fe:	8f 70       	andi	r24, 0x0F	; 15
    3500:	80 93 aa 01 	sts	0x01AA, r24
			LCD_VoidSetPosition4BitMode(ROW_Check,Cloumn_Check);
    3504:	80 91 a8 01 	lds	r24, 0x01A8
    3508:	90 91 aa 01 	lds	r25, 0x01AA
    350c:	69 2f       	mov	r22, r25
    350e:	0e 94 33 1c 	call	0x3866	; 0x3866 <LCD_VoidSetPosition4BitMode>
		}

}
    3512:	ca 5a       	subi	r28, 0xAA	; 170
    3514:	df 4f       	sbci	r29, 0xFF	; 255
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret

0000352a <LCD_VoidSendString4BitMode>:

void LCD_VoidSendString4BitMode(s8 * Copy_u8ptrString){
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	00 d0       	rcall	.+0      	; 0x3530 <LCD_VoidSendString4BitMode+0x6>
    3530:	0f 92       	push	r0
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02

	u8 LCD_u8Iterator =0;
    353a:	19 82       	std	Y+1, r1	; 0x01
    353c:	0e c0       	rjmp	.+28     	; 0x355a <LCD_VoidSendString4BitMode+0x30>

	while(Copy_u8ptrString[LCD_u8Iterator]!='\0'){
		LCD_VoidSendData4BitMode(Copy_u8ptrString[LCD_u8Iterator]);
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	9b 81       	ldd	r25, Y+3	; 0x03
    3548:	fc 01       	movw	r30, r24
    354a:	e2 0f       	add	r30, r18
    354c:	f3 1f       	adc	r31, r19
    354e:	80 81       	ld	r24, Z
    3550:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
		LCD_u8Iterator++;
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	89 83       	std	Y+1, r24	; 0x01

void LCD_VoidSendString4BitMode(s8 * Copy_u8ptrString){

	u8 LCD_u8Iterator =0;

	while(Copy_u8ptrString[LCD_u8Iterator]!='\0'){
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	9b 81       	ldd	r25, Y+3	; 0x03
    3564:	fc 01       	movw	r30, r24
    3566:	e2 0f       	add	r30, r18
    3568:	f3 1f       	adc	r31, r19
    356a:	80 81       	ld	r24, Z
    356c:	88 23       	and	r24, r24
    356e:	39 f7       	brne	.-50     	; 0x353e <LCD_VoidSendString4BitMode+0x14>
		LCD_VoidSendData4BitMode(Copy_u8ptrString[LCD_u8Iterator]);
		LCD_u8Iterator++;


	}
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <Inttostring>:

int Inttostring(char str[], int num)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	2c 97       	sbiw	r28, 0x0c	; 12
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	9a 87       	std	Y+10, r25	; 0x0a
    3592:	89 87       	std	Y+9, r24	; 0x09
    3594:	7c 87       	std	Y+12, r23	; 0x0c
    3596:	6b 87       	std	Y+11, r22	; 0x0b
    int i, rem, len = 0, n;
    3598:	1c 82       	std	Y+4, r1	; 0x04
    359a:	1b 82       	std	Y+3, r1	; 0x03

    n = num;
    359c:	8b 85       	ldd	r24, Y+11	; 0x0b
    359e:	9c 85       	ldd	r25, Y+12	; 0x0c
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <Inttostring+0x48>
    while (n != 0)
    {
        len++;
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    35a8:	9c 81       	ldd	r25, Y+4	; 0x04
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
        n /= 10;
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	9a 81       	ldd	r25, Y+2	; 0x02
    35b4:	2a e0       	ldi	r18, 0x0A	; 10
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	b9 01       	movw	r22, r18
    35ba:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__divmodhi4>
    35be:	cb 01       	movw	r24, r22
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
int Inttostring(char str[], int num)
{
    int i, rem, len = 0, n;

    n = num;
    while (n != 0)
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <Inttostring+0x2a>
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    35cc:	18 86       	std	Y+8, r1	; 0x08
    35ce:	1f 82       	std	Y+7, r1	; 0x07
    35d0:	2a c0       	rjmp	.+84     	; 0x3626 <Inttostring+0xaa>
    {
        rem = num % 10;
    35d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35d6:	2a e0       	ldi	r18, 0x0A	; 10
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	b9 01       	movw	r22, r18
    35dc:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__divmodhi4>
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
        num = num / 10;
    35e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    35e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    35e8:	2a e0       	ldi	r18, 0x0A	; 10
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	b9 01       	movw	r22, r18
    35ee:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__divmodhi4>
    35f2:	cb 01       	movw	r24, r22
    35f4:	9c 87       	std	Y+12, r25	; 0x0c
    35f6:	8b 87       	std	Y+11, r24	; 0x0b
        str[len - (i + 1)] = rem + '0';
    35f8:	8f 81       	ldd	r24, Y+7	; 0x07
    35fa:	98 85       	ldd	r25, Y+8	; 0x08
    35fc:	9c 01       	movw	r18, r24
    35fe:	20 95       	com	r18
    3600:	30 95       	com	r19
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	82 0f       	add	r24, r18
    3608:	93 1f       	adc	r25, r19
    360a:	9c 01       	movw	r18, r24
    360c:	89 85       	ldd	r24, Y+9	; 0x09
    360e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3610:	fc 01       	movw	r30, r24
    3612:	e2 0f       	add	r30, r18
    3614:	f3 1f       	adc	r31, r19
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	80 5d       	subi	r24, 0xD0	; 208
    361a:	80 83       	st	Z, r24
    while (n != 0)
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    361c:	8f 81       	ldd	r24, Y+7	; 0x07
    361e:	98 85       	ldd	r25, Y+8	; 0x08
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	98 87       	std	Y+8, r25	; 0x08
    3624:	8f 83       	std	Y+7, r24	; 0x07
    3626:	2f 81       	ldd	r18, Y+7	; 0x07
    3628:	38 85       	ldd	r19, Y+8	; 0x08
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	9c 81       	ldd	r25, Y+4	; 0x04
    362e:	28 17       	cp	r18, r24
    3630:	39 07       	cpc	r19, r25
    3632:	7c f2       	brlt	.-98     	; 0x35d2 <Inttostring+0x56>
    {
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    3634:	2b 81       	ldd	r18, Y+3	; 0x03
    3636:	3c 81       	ldd	r19, Y+4	; 0x04
    3638:	89 85       	ldd	r24, Y+9	; 0x09
    363a:	9a 85       	ldd	r25, Y+10	; 0x0a
    363c:	fc 01       	movw	r30, r24
    363e:	e2 0f       	add	r30, r18
    3640:	f3 1f       	adc	r31, r19
    3642:	10 82       	st	Z, r1
    return i;
    3644:	8f 81       	ldd	r24, Y+7	; 0x07
    3646:	98 85       	ldd	r25, Y+8	; 0x08
}
    3648:	2c 96       	adiw	r28, 0x0c	; 12
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <LCD_VoidSendInteger4BitMode>:
void LCD_VoidSendInteger4BitMode(u32 Copy_s32Int){
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	64 97       	sbiw	r28, 0x14	; 20
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	69 8b       	std	Y+17, r22	; 0x11
    3670:	7a 8b       	std	Y+18, r23	; 0x12
    3672:	8b 8b       	std	Y+19, r24	; 0x13
    3674:	9c 8b       	std	Y+20, r25	; 0x14
	      s8 ASCi[16];
		 // sprintf(ASCi, "%d", Copy_s32Int);
	      Inttostring(ASCi,Copy_s32Int);
    3676:	ce 01       	movw	r24, r28
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	29 89       	ldd	r18, Y+17	; 0x11
    367c:	3a 89       	ldd	r19, Y+18	; 0x12
    367e:	b9 01       	movw	r22, r18
    3680:	0e 94 be 1a 	call	0x357c	; 0x357c <Inttostring>
		  LCD_VoidSendString4BitMode(ASCi);
    3684:	ce 01       	movw	r24, r28
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	0e 94 95 1a 	call	0x352a	; 0x352a <LCD_VoidSendString4BitMode>
}
    368c:	64 96       	adiw	r28, 0x14	; 20
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <Floattostring>:

void Floattostring(char str[], float num,int afterpoint)
{
    369e:	df 93       	push	r29
    36a0:	cf 93       	push	r28
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	6c 97       	sbiw	r28, 0x1c	; 28
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	9e 8b       	std	Y+22, r25	; 0x16
    36b4:	8d 8b       	std	Y+21, r24	; 0x15
    36b6:	4f 8b       	std	Y+23, r20	; 0x17
    36b8:	58 8f       	std	Y+24, r21	; 0x18
    36ba:	69 8f       	std	Y+25, r22	; 0x19
    36bc:	7a 8f       	std	Y+26, r23	; 0x1a
    36be:	3c 8f       	std	Y+28, r19	; 0x1c
    36c0:	2b 8f       	std	Y+27, r18	; 0x1b
    char str_fpart[6];
  // Extract integer part
   int ipart = (int)num;
    36c2:	6f 89       	ldd	r22, Y+23	; 0x17
    36c4:	78 8d       	ldd	r23, Y+24	; 0x18
    36c6:	89 8d       	ldd	r24, Y+25	; 0x19
    36c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36ca:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9e 87       	std	Y+14, r25	; 0x0e
    36d4:	8d 87       	std	Y+13, r24	; 0x0d

   // Extract floating part
   float fpart = num - (float)ipart;
    36d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36da:	aa 27       	eor	r26, r26
    36dc:	97 fd       	sbrc	r25, 7
    36de:	a0 95       	com	r26
    36e0:	ba 2f       	mov	r27, r26
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    36ea:	9b 01       	movw	r18, r22
    36ec:	ac 01       	movw	r20, r24
    36ee:	6f 89       	ldd	r22, Y+23	; 0x17
    36f0:	78 8d       	ldd	r23, Y+24	; 0x18
    36f2:	89 8d       	ldd	r24, Y+25	; 0x19
    36f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	89 87       	std	Y+9, r24	; 0x09
    3700:	9a 87       	std	Y+10, r25	; 0x0a
    3702:	ab 87       	std	Y+11, r26	; 0x0b
    3704:	bc 87       	std	Y+12, r27	; 0x0c

   for(int j=0; j < afterpoint;j++){
    3706:	1a 82       	std	Y+2, r1	; 0x02
    3708:	19 82       	std	Y+1, r1	; 0x01
    370a:	15 c0       	rjmp	.+42     	; 0x3736 <Floattostring+0x98>
      fpart*=10;
    370c:	69 85       	ldd	r22, Y+9	; 0x09
    370e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3710:	8b 85       	ldd	r24, Y+11	; 0x0b
    3712:	9c 85       	ldd	r25, Y+12	; 0x0c
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e2       	ldi	r20, 0x20	; 32
    371a:	51 e4       	ldi	r21, 0x41	; 65
    371c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	89 87       	std	Y+9, r24	; 0x09
    3726:	9a 87       	std	Y+10, r25	; 0x0a
    3728:	ab 87       	std	Y+11, r26	; 0x0b
    372a:	bc 87       	std	Y+12, r27	; 0x0c
   int ipart = (int)num;

   // Extract floating part
   float fpart = num - (float)ipart;

   for(int j=0; j < afterpoint;j++){
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	29 81       	ldd	r18, Y+1	; 0x01
    3738:	3a 81       	ldd	r19, Y+2	; 0x02
    373a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    373c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373e:	28 17       	cp	r18, r24
    3740:	39 07       	cpc	r19, r25
    3742:	24 f3       	brlt	.-56     	; 0x370c <Floattostring+0x6e>
      fpart*=10;
   }
   // convert integer part to string
    int i = Inttostring(str,ipart);
    3744:	8d 89       	ldd	r24, Y+21	; 0x15
    3746:	9e 89       	ldd	r25, Y+22	; 0x16
    3748:	2d 85       	ldd	r18, Y+13	; 0x0d
    374a:	3e 85       	ldd	r19, Y+14	; 0x0e
    374c:	b9 01       	movw	r22, r18
    374e:	0e 94 be 1a 	call	0x357c	; 0x357c <Inttostring>
    3752:	98 87       	std	Y+8, r25	; 0x08
    3754:	8f 83       	std	Y+7, r24	; 0x07

   // check for display option after point
   if (afterpoint != 0) {
    3756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	49 f0       	breq	.+18     	; 0x3770 <Floattostring+0xd2>
       str[i] = '.'; // add dot
    375e:	2f 81       	ldd	r18, Y+7	; 0x07
    3760:	38 85       	ldd	r19, Y+8	; 0x08
    3762:	8d 89       	ldd	r24, Y+21	; 0x15
    3764:	9e 89       	ldd	r25, Y+22	; 0x16
    3766:	fc 01       	movw	r30, r24
    3768:	e2 0f       	add	r30, r18
    376a:	f3 1f       	adc	r31, r19
    376c:	8e e2       	ldi	r24, 0x2E	; 46
    376e:	80 83       	st	Z, r24
   }
   int f = Inttostring(str_fpart,fpart);
    3770:	69 85       	ldd	r22, Y+9	; 0x09
    3772:	7a 85       	ldd	r23, Y+10	; 0x0a
    3774:	8b 85       	ldd	r24, Y+11	; 0x0b
    3776:	9c 85       	ldd	r25, Y+12	; 0x0c
    3778:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9c 01       	movw	r18, r24
    3782:	ce 01       	movw	r24, r28
    3784:	0f 96       	adiw	r24, 0x0f	; 15
    3786:	b9 01       	movw	r22, r18
    3788:	0e 94 be 1a 	call	0x357c	; 0x357c <Inttostring>
    378c:	9e 83       	std	Y+6, r25	; 0x06
    378e:	8d 83       	std	Y+5, r24	; 0x05

int z;
for( z=0 ; z<afterpoint ; z++){
    3790:	1c 82       	std	Y+4, r1	; 0x04
    3792:	1b 82       	std	Y+3, r1	; 0x03
    3794:	1d c0       	rjmp	.+58     	; 0x37d0 <Floattostring+0x132>
    str[i+1+z]=str_fpart[z];
    3796:	8f 81       	ldd	r24, Y+7	; 0x07
    3798:	98 85       	ldd	r25, Y+8	; 0x08
    379a:	9c 01       	movw	r18, r24
    379c:	2f 5f       	subi	r18, 0xFF	; 255
    379e:	3f 4f       	sbci	r19, 0xFF	; 255
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	9c 81       	ldd	r25, Y+4	; 0x04
    37a4:	82 0f       	add	r24, r18
    37a6:	93 1f       	adc	r25, r19
    37a8:	9c 01       	movw	r18, r24
    37aa:	8d 89       	ldd	r24, Y+21	; 0x15
    37ac:	9e 89       	ldd	r25, Y+22	; 0x16
    37ae:	dc 01       	movw	r26, r24
    37b0:	a2 0f       	add	r26, r18
    37b2:	b3 1f       	adc	r27, r19
    37b4:	2b 81       	ldd	r18, Y+3	; 0x03
    37b6:	3c 81       	ldd	r19, Y+4	; 0x04
    37b8:	ce 01       	movw	r24, r28
    37ba:	0f 96       	adiw	r24, 0x0f	; 15
    37bc:	fc 01       	movw	r30, r24
    37be:	e2 0f       	add	r30, r18
    37c0:	f3 1f       	adc	r31, r19
    37c2:	80 81       	ld	r24, Z
    37c4:	8c 93       	st	X, r24
       str[i] = '.'; // add dot
   }
   int f = Inttostring(str_fpart,fpart);

int z;
for( z=0 ; z<afterpoint ; z++){
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	9c 83       	std	Y+4, r25	; 0x04
    37ce:	8b 83       	std	Y+3, r24	; 0x03
    37d0:	2b 81       	ldd	r18, Y+3	; 0x03
    37d2:	3c 81       	ldd	r19, Y+4	; 0x04
    37d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d8:	28 17       	cp	r18, r24
    37da:	39 07       	cpc	r19, r25
    37dc:	e4 f2       	brlt	.-72     	; 0x3796 <Floattostring+0xf8>
    str[i+1+z]=str_fpart[z];
}
str[i+afterpoint+1]='\0';
    37de:	2f 81       	ldd	r18, Y+7	; 0x07
    37e0:	38 85       	ldd	r19, Y+8	; 0x08
    37e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e6:	82 0f       	add	r24, r18
    37e8:	93 1f       	adc	r25, r19
    37ea:	9c 01       	movw	r18, r24
    37ec:	2f 5f       	subi	r18, 0xFF	; 255
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
    37f0:	8d 89       	ldd	r24, Y+21	; 0x15
    37f2:	9e 89       	ldd	r25, Y+22	; 0x16
    37f4:	fc 01       	movw	r30, r24
    37f6:	e2 0f       	add	r30, r18
    37f8:	f3 1f       	adc	r31, r19
    37fa:	10 82       	st	Z, r1

}
    37fc:	6c 96       	adiw	r28, 0x1c	; 28
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <LCD_VoidSendFloat4BitMode>:
void LCD_VoidSendFloat4BitMode(f32 Copy_f32float,u8 Copy_u8NumberofDigits){
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	65 97       	sbiw	r28, 0x15	; 21
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	69 8b       	std	Y+17, r22	; 0x11
    3824:	7a 8b       	std	Y+18, r23	; 0x12
    3826:	8b 8b       	std	Y+19, r24	; 0x13
    3828:	9c 8b       	std	Y+20, r25	; 0x14
    382a:	4d 8b       	std	Y+21, r20	; 0x15
	      s8 ASCi[16];
	      Floattostring(ASCi,Copy_f32float,Copy_u8NumberofDigits);
    382c:	be 01       	movw	r22, r28
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	8d 89       	ldd	r24, Y+21	; 0x15
    3834:	e8 2f       	mov	r30, r24
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	29 89       	ldd	r18, Y+17	; 0x11
    383a:	3a 89       	ldd	r19, Y+18	; 0x12
    383c:	4b 89       	ldd	r20, Y+19	; 0x13
    383e:	5c 89       	ldd	r21, Y+20	; 0x14
    3840:	cb 01       	movw	r24, r22
    3842:	ba 01       	movw	r22, r20
    3844:	a9 01       	movw	r20, r18
    3846:	9f 01       	movw	r18, r30
    3848:	0e 94 4f 1b 	call	0x369e	; 0x369e <Floattostring>
		  LCD_VoidSendString4BitMode(ASCi);
    384c:	ce 01       	movw	r24, r28
    384e:	01 96       	adiw	r24, 0x01	; 1
    3850:	0e 94 95 1a 	call	0x352a	; 0x352a <LCD_VoidSendString4BitMode>
}
    3854:	65 96       	adiw	r28, 0x15	; 21
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <LCD_VoidSetPosition4BitMode>:

void LCD_VoidSetPosition4BitMode(u8 Copy_u8Row,u8 Copy_u8Col){
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <LCD_VoidSetPosition4BitMode+0x6>
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row==LCD_ROW_1){
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	81 30       	cpi	r24, 0x01	; 1
    3878:	29 f4       	brne	.+10     	; 0x3884 <LCD_VoidSetPosition4BitMode+0x1e>
		LCD_VoidSendCommand4BitMode((0x80)+Copy_u8Col);
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	80 58       	subi	r24, 0x80	; 128
    387e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <LCD_VoidSetPosition4BitMode+0x2c>
	}
	else if(Copy_u8Row==LCD_ROW_2){
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	82 30       	cpi	r24, 0x02	; 2
    3888:	21 f4       	brne	.+8      	; 0x3892 <LCD_VoidSetPosition4BitMode+0x2c>
		LCD_VoidSendCommand4BitMode((0x80)+64+Copy_u8Col);
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	80 54       	subi	r24, 0x40	; 64
    388e:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>

 }

}
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	08 95       	ret

0000389c <main>:
#include <util/delay.h>

u32 arrttointeger(u32 arr[],u32 numberofdigits);


int main(){
    389c:	ef 92       	push	r14
    389e:	ff 92       	push	r15
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	c2 56       	subi	r28, 0x62	; 98
    38ae:	d0 40       	sbci	r29, 0x00	; 0
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
	KPD_VoidInit();
    38ba:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <KPD_VoidInit>
	LCD_VoidInit4BitMode();
    38be:	0e 94 35 10 	call	0x206a	; 0x206a <LCD_VoidInit4BitMode>
	LCD_VoidSendString4BitMode("Welcome to AVR  4-digit Calc");
    38c2:	83 e6       	ldi	r24, 0x63	; 99
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 95 1a 	call	0x352a	; 0x352a <LCD_VoidSendString4BitMode>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	aa ef       	ldi	r26, 0xFA	; 250
    38d0:	b4 e4       	ldi	r27, 0x44	; 68
    38d2:	89 8f       	std	Y+25, r24	; 0x19
    38d4:	9a 8f       	std	Y+26, r25	; 0x1a
    38d6:	ab 8f       	std	Y+27, r26	; 0x1b
    38d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	69 8d       	ldd	r22, Y+25	; 0x19
    38dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	4a e7       	ldi	r20, 0x7A	; 122
    38e8:	55 e4       	ldi	r21, 0x45	; 69
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	8d 8b       	std	Y+21, r24	; 0x15
    38f4:	9e 8b       	std	Y+22, r25	; 0x16
    38f6:	af 8b       	std	Y+23, r26	; 0x17
    38f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    390e:	88 23       	and	r24, r24
    3910:	2c f4       	brge	.+10     	; 0x391c <main+0x80>
		__ticks = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 8b       	std	Y+20, r25	; 0x14
    3918:	8b 8b       	std	Y+19, r24	; 0x13
    391a:	3f c0       	rjmp	.+126    	; 0x399a <main+0xfe>
	else if (__tmp > 65535)
    391c:	6d 89       	ldd	r22, Y+21	; 0x15
    391e:	7e 89       	ldd	r23, Y+22	; 0x16
    3920:	8f 89       	ldd	r24, Y+23	; 0x17
    3922:	98 8d       	ldd	r25, Y+24	; 0x18
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3930:	18 16       	cp	r1, r24
    3932:	4c f5       	brge	.+82     	; 0x3986 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3934:	69 8d       	ldd	r22, Y+25	; 0x19
    3936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e2       	ldi	r20, 0x20	; 32
    3942:	51 e4       	ldi	r21, 0x41	; 65
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9c 8b       	std	Y+20, r25	; 0x14
    395a:	8b 8b       	std	Y+19, r24	; 0x13
    395c:	0f c0       	rjmp	.+30     	; 0x397c <main+0xe0>
    395e:	80 e9       	ldi	r24, 0x90	; 144
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	9a 8b       	std	Y+18, r25	; 0x12
    3964:	89 8b       	std	Y+17, r24	; 0x11
    3966:	89 89       	ldd	r24, Y+17	; 0x11
    3968:	9a 89       	ldd	r25, Y+18	; 0x12
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <main+0xce>
    396e:	9a 8b       	std	Y+18, r25	; 0x12
    3970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	8b 89       	ldd	r24, Y+19	; 0x13
    3974:	9c 89       	ldd	r25, Y+20	; 0x14
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	69 f7       	brne	.-38     	; 0x395e <main+0xc2>
    3984:	14 c0       	rjmp	.+40     	; 0x39ae <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3986:	6d 89       	ldd	r22, Y+21	; 0x15
    3988:	7e 89       	ldd	r23, Y+22	; 0x16
    398a:	8f 89       	ldd	r24, Y+23	; 0x17
    398c:	98 8d       	ldd	r25, Y+24	; 0x18
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9c 8b       	std	Y+20, r25	; 0x14
    3998:	8b 8b       	std	Y+19, r24	; 0x13
    399a:	8b 89       	ldd	r24, Y+19	; 0x13
    399c:	9c 89       	ldd	r25, Y+20	; 0x14
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	8f 87       	std	Y+15, r24	; 0x0f
    39a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a4:	98 89       	ldd	r25, Y+16	; 0x10
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <main+0x10a>
    39aa:	98 8b       	std	Y+16, r25	; 0x10
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_VoidSendCommand4BitMode(0x01);
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
	LCD_VoidSetPosition4BitMode(1,0);
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 33 1c 	call	0x3866	; 0x3866 <LCD_VoidSetPosition4BitMode>

    u32 in1,op=0;
    39bc:	1d aa       	std	Y+53, r1	; 0x35
    39be:	1e aa       	std	Y+54, r1	; 0x36
    39c0:	1f aa       	std	Y+55, r1	; 0x37
    39c2:	18 ae       	std	Y+56, r1	; 0x38

    u32 arr1[4],arr2[4];
    u32 num1=0,num2=0;
    39c4:	19 aa       	std	Y+49, r1	; 0x31
    39c6:	1a aa       	std	Y+50, r1	; 0x32
    39c8:	1b aa       	std	Y+51, r1	; 0x33
    39ca:	1c aa       	std	Y+52, r1	; 0x34
    39cc:	1d a6       	std	Y+45, r1	; 0x2d
    39ce:	1e a6       	std	Y+46, r1	; 0x2e
    39d0:	1f a6       	std	Y+47, r1	; 0x2f
    39d2:	18 aa       	std	Y+48, r1	; 0x30
    u32 iterator1=0,iterator2=0;
    39d4:	19 a6       	std	Y+41, r1	; 0x29
    39d6:	1a a6       	std	Y+42, r1	; 0x2a
    39d8:	1b a6       	std	Y+43, r1	; 0x2b
    39da:	1c a6       	std	Y+44, r1	; 0x2c
    39dc:	1d a2       	std	Y+37, r1	; 0x25
    39de:	1e a2       	std	Y+38, r1	; 0x26
    39e0:	1f a2       	std	Y+39, r1	; 0x27
    39e2:	18 a6       	std	Y+40, r1	; 0x28
	while(1){
		in1=KPD_u8GetPressedKey();
    39e4:	0e 94 93 0b 	call	0x1726	; 0x1726 <KPD_u8GetPressedKey>
    39e8:	88 2f       	mov	r24, r24
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	89 af       	std	Y+57, r24	; 0x39
    39f2:	9a af       	std	Y+58, r25	; 0x3a
    39f4:	ab af       	std	Y+59, r26	; 0x3b
    39f6:	bc af       	std	Y+60, r27	; 0x3c

		if(in1!=0xff && in1=='='&& op>0 && iterator1>0 && iterator2>0){
    39f8:	89 ad       	ldd	r24, Y+57	; 0x39
    39fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    39fc:	ab ad       	ldd	r26, Y+59	; 0x3b
    39fe:	bc ad       	ldd	r27, Y+60	; 0x3c
    3a00:	8f 3f       	cpi	r24, 0xFF	; 255
    3a02:	91 05       	cpc	r25, r1
    3a04:	a1 05       	cpc	r26, r1
    3a06:	b1 05       	cpc	r27, r1
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <main+0x170>
    3a0a:	87 c2       	rjmp	.+1294   	; 0x3f1a <main+0x67e>
    3a0c:	89 ad       	ldd	r24, Y+57	; 0x39
    3a0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a10:	ab ad       	ldd	r26, Y+59	; 0x3b
    3a12:	bc ad       	ldd	r27, Y+60	; 0x3c
    3a14:	8d 33       	cpi	r24, 0x3D	; 61
    3a16:	91 05       	cpc	r25, r1
    3a18:	a1 05       	cpc	r26, r1
    3a1a:	b1 05       	cpc	r27, r1
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <main+0x184>
    3a1e:	7d c2       	rjmp	.+1274   	; 0x3f1a <main+0x67e>
    3a20:	8d a9       	ldd	r24, Y+53	; 0x35
    3a22:	9e a9       	ldd	r25, Y+54	; 0x36
    3a24:	af a9       	ldd	r26, Y+55	; 0x37
    3a26:	b8 ad       	ldd	r27, Y+56	; 0x38
    3a28:	00 97       	sbiw	r24, 0x00	; 0
    3a2a:	a1 05       	cpc	r26, r1
    3a2c:	b1 05       	cpc	r27, r1
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <main+0x196>
    3a30:	74 c2       	rjmp	.+1256   	; 0x3f1a <main+0x67e>
    3a32:	89 a5       	ldd	r24, Y+41	; 0x29
    3a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a36:	ab a5       	ldd	r26, Y+43	; 0x2b
    3a38:	bc a5       	ldd	r27, Y+44	; 0x2c
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	a1 05       	cpc	r26, r1
    3a3e:	b1 05       	cpc	r27, r1
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <main+0x1a8>
    3a42:	6b c2       	rjmp	.+1238   	; 0x3f1a <main+0x67e>
    3a44:	8d a1       	ldd	r24, Y+37	; 0x25
    3a46:	9e a1       	ldd	r25, Y+38	; 0x26
    3a48:	af a1       	ldd	r26, Y+39	; 0x27
    3a4a:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	a1 05       	cpc	r26, r1
    3a50:	b1 05       	cpc	r27, r1
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <main+0x1ba>
    3a54:	62 c2       	rjmp	.+1220   	; 0x3f1a <main+0x67e>
				LCD_VoidSendData4BitMode(in1);
    3a56:	89 ad       	ldd	r24, Y+57	; 0x39
    3a58:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
				num1=arrttointeger(arr1,iterator1);
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	cd 96       	adiw	r24, 0x3d	; 61
    3a60:	29 a5       	ldd	r18, Y+41	; 0x29
    3a62:	3a a5       	ldd	r19, Y+42	; 0x2a
    3a64:	4b a5       	ldd	r20, Y+43	; 0x2b
    3a66:	5c a5       	ldd	r21, Y+44	; 0x2c
    3a68:	ba 01       	movw	r22, r20
    3a6a:	a9 01       	movw	r20, r18
    3a6c:	0e 94 03 21 	call	0x4206	; 0x4206 <arrttointeger>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	89 ab       	std	Y+49, r24	; 0x31
    3a76:	9a ab       	std	Y+50, r25	; 0x32
    3a78:	ab ab       	std	Y+51, r26	; 0x33
    3a7a:	bc ab       	std	Y+52, r27	; 0x34
				num2=arrttointeger(arr2,iterator2);
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	83 5b       	subi	r24, 0xB3	; 179
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	2d a1       	ldd	r18, Y+37	; 0x25
    3a84:	3e a1       	ldd	r19, Y+38	; 0x26
    3a86:	4f a1       	ldd	r20, Y+39	; 0x27
    3a88:	58 a5       	ldd	r21, Y+40	; 0x28
    3a8a:	ba 01       	movw	r22, r20
    3a8c:	a9 01       	movw	r20, r18
    3a8e:	0e 94 03 21 	call	0x4206	; 0x4206 <arrttointeger>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	8d a7       	std	Y+45, r24	; 0x2d
    3a98:	9e a7       	std	Y+46, r25	; 0x2e
    3a9a:	af a7       	std	Y+47, r26	; 0x2f
    3a9c:	b8 ab       	std	Y+48, r27	; 0x30
				LCD_VoidSendCommand4BitMode(0x01);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
				LCD_VoidSetPosition4BitMode(1,0);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	0e 94 33 1c 	call	0x3866	; 0x3866 <LCD_VoidSetPosition4BitMode>
				LCD_VoidSendString4BitMode("Result=");
    3aac:	80 e8       	ldi	r24, 0x80	; 128
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 95 1a 	call	0x352a	; 0x352a <LCD_VoidSendString4BitMode>
				LCD_VoidSetPosition4BitMode(2,0);
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	0e 94 33 1c 	call	0x3866	; 0x3866 <LCD_VoidSetPosition4BitMode>
				u32 res;
				f32 f;

				switch(op){
    3abc:	ed a8       	ldd	r14, Y+53	; 0x35
    3abe:	fe a8       	ldd	r15, Y+54	; 0x36
    3ac0:	0f a9       	ldd	r16, Y+55	; 0x37
    3ac2:	18 ad       	ldd	r17, Y+56	; 0x38
    3ac4:	a3 96       	adiw	r28, 0x23	; 35
    3ac6:	ec ae       	std	Y+60, r14	; 0x3c
    3ac8:	fd ae       	std	Y+61, r15	; 0x3d
    3aca:	0e af       	std	Y+62, r16	; 0x3e
    3acc:	1f af       	std	Y+63, r17	; 0x3f
    3ace:	a3 97       	sbiw	r28, 0x23	; 35
    3ad0:	a3 96       	adiw	r28, 0x23	; 35
    3ad2:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ad4:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ad6:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ad8:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ada:	a3 97       	sbiw	r28, 0x23	; 35
    3adc:	8b 32       	cpi	r24, 0x2B	; 43
    3ade:	91 05       	cpc	r25, r1
    3ae0:	a1 05       	cpc	r26, r1
    3ae2:	b1 05       	cpc	r27, r1
    3ae4:	e1 f1       	breq	.+120    	; 0x3b5e <main+0x2c2>
    3ae6:	a3 96       	adiw	r28, 0x23	; 35
    3ae8:	8c ad       	ldd	r24, Y+60	; 0x3c
    3aea:	9d ad       	ldd	r25, Y+61	; 0x3d
    3aec:	ae ad       	ldd	r26, Y+62	; 0x3e
    3aee:	bf ad       	ldd	r27, Y+63	; 0x3f
    3af0:	a3 97       	sbiw	r28, 0x23	; 35
    3af2:	8c 32       	cpi	r24, 0x2C	; 44
    3af4:	91 05       	cpc	r25, r1
    3af6:	a1 05       	cpc	r26, r1
    3af8:	b1 05       	cpc	r27, r1
    3afa:	c8 f4       	brcc	.+50     	; 0x3b2e <main+0x292>
    3afc:	a3 96       	adiw	r28, 0x23	; 35
    3afe:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b00:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b02:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b04:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b06:	a3 97       	sbiw	r28, 0x23	; 35
    3b08:	85 32       	cpi	r24, 0x25	; 37
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	a1 05       	cpc	r26, r1
    3b0e:	b1 05       	cpc	r27, r1
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <main+0x278>
    3b12:	4d c1       	rjmp	.+666    	; 0x3dae <main+0x512>
    3b14:	a3 96       	adiw	r28, 0x23	; 35
    3b16:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b18:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b1a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b1e:	a3 97       	sbiw	r28, 0x23	; 35
    3b20:	8a 32       	cpi	r24, 0x2A	; 42
    3b22:	91 05       	cpc	r25, r1
    3b24:	a1 05       	cpc	r26, r1
    3b26:	b1 05       	cpc	r27, r1
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <main+0x290>
    3b2a:	77 c0       	rjmp	.+238    	; 0x3c1a <main+0x37e>
    3b2c:	70 c1       	rjmp	.+736    	; 0x3e0e <main+0x572>
    3b2e:	a3 96       	adiw	r28, 0x23	; 35
    3b30:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b32:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b34:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b36:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b38:	a3 97       	sbiw	r28, 0x23	; 35
    3b3a:	8d 32       	cpi	r24, 0x2D	; 45
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	a1 05       	cpc	r26, r1
    3b40:	b1 05       	cpc	r27, r1
    3b42:	d1 f1       	breq	.+116    	; 0x3bb8 <main+0x31c>
    3b44:	a3 96       	adiw	r28, 0x23	; 35
    3b46:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b48:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b4e:	a3 97       	sbiw	r28, 0x23	; 35
    3b50:	8f 32       	cpi	r24, 0x2F	; 47
    3b52:	91 05       	cpc	r25, r1
    3b54:	a1 05       	cpc	r26, r1
    3b56:	b1 05       	cpc	r27, r1
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <main+0x2c0>
    3b5a:	90 c0       	rjmp	.+288    	; 0x3c7c <main+0x3e0>
    3b5c:	58 c1       	rjmp	.+688    	; 0x3e0e <main+0x572>
				case '+' :
					res=num1+num2;
    3b5e:	29 a9       	ldd	r18, Y+49	; 0x31
    3b60:	3a a9       	ldd	r19, Y+50	; 0x32
    3b62:	4b a9       	ldd	r20, Y+51	; 0x33
    3b64:	5c a9       	ldd	r21, Y+52	; 0x34
    3b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b6a:	af a5       	ldd	r26, Y+47	; 0x2f
    3b6c:	b8 a9       	ldd	r27, Y+48	; 0x30
    3b6e:	82 0f       	add	r24, r18
    3b70:	93 1f       	adc	r25, r19
    3b72:	a4 1f       	adc	r26, r20
    3b74:	b5 1f       	adc	r27, r21
    3b76:	89 a3       	std	Y+33, r24	; 0x21
    3b78:	9a a3       	std	Y+34, r25	; 0x22
    3b7a:	ab a3       	std	Y+35, r26	; 0x23
    3b7c:	bc a3       	std	Y+36, r27	; 0x24
					if(res==0){
    3b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b80:	9a a1       	ldd	r25, Y+34	; 0x22
    3b82:	ab a1       	ldd	r26, Y+35	; 0x23
    3b84:	bc a1       	ldd	r27, Y+36	; 0x24
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	a1 05       	cpc	r26, r1
    3b8a:	b1 05       	cpc	r27, r1
    3b8c:	21 f4       	brne	.+8      	; 0x3b96 <main+0x2fa>
						LCD_VoidSendData4BitMode('0');
    3b8e:	80 e3       	ldi	r24, 0x30	; 48
    3b90:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3b94:	3c c1       	rjmp	.+632    	; 0x3e0e <main+0x572>
					}
					else{
					LCD_VoidSendInteger4BitMode(num1+num2);
    3b96:	89 a9       	ldd	r24, Y+49	; 0x31
    3b98:	9a a9       	ldd	r25, Y+50	; 0x32
    3b9a:	ab a9       	ldd	r26, Y+51	; 0x33
    3b9c:	bc a9       	ldd	r27, Y+52	; 0x34
    3b9e:	2d a5       	ldd	r18, Y+45	; 0x2d
    3ba0:	3e a5       	ldd	r19, Y+46	; 0x2e
    3ba2:	4f a5       	ldd	r20, Y+47	; 0x2f
    3ba4:	58 a9       	ldd	r21, Y+48	; 0x30
    3ba6:	82 0f       	add	r24, r18
    3ba8:	93 1f       	adc	r25, r19
    3baa:	a4 1f       	adc	r26, r20
    3bac:	b5 1f       	adc	r27, r21
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    3bb6:	2b c1       	rjmp	.+598    	; 0x3e0e <main+0x572>
					}
					break;
				case '-' :
				res=num1-num2;
    3bb8:	29 a9       	ldd	r18, Y+49	; 0x31
    3bba:	3a a9       	ldd	r19, Y+50	; 0x32
    3bbc:	4b a9       	ldd	r20, Y+51	; 0x33
    3bbe:	5c a9       	ldd	r21, Y+52	; 0x34
    3bc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bc4:	af a5       	ldd	r26, Y+47	; 0x2f
    3bc6:	b8 a9       	ldd	r27, Y+48	; 0x30
    3bc8:	79 01       	movw	r14, r18
    3bca:	8a 01       	movw	r16, r20
    3bcc:	e8 1a       	sub	r14, r24
    3bce:	f9 0a       	sbc	r15, r25
    3bd0:	0a 0b       	sbc	r16, r26
    3bd2:	1b 0b       	sbc	r17, r27
    3bd4:	d8 01       	movw	r26, r16
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	89 a3       	std	Y+33, r24	; 0x21
    3bda:	9a a3       	std	Y+34, r25	; 0x22
    3bdc:	ab a3       	std	Y+35, r26	; 0x23
    3bde:	bc a3       	std	Y+36, r27	; 0x24
				if(res==0){
    3be0:	89 a1       	ldd	r24, Y+33	; 0x21
    3be2:	9a a1       	ldd	r25, Y+34	; 0x22
    3be4:	ab a1       	ldd	r26, Y+35	; 0x23
    3be6:	bc a1       	ldd	r27, Y+36	; 0x24
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	a1 05       	cpc	r26, r1
    3bec:	b1 05       	cpc	r27, r1
    3bee:	21 f4       	brne	.+8      	; 0x3bf8 <main+0x35c>
					LCD_VoidSendData4BitMode('0');
    3bf0:	80 e3       	ldi	r24, 0x30	; 48
    3bf2:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3bf6:	0b c1       	rjmp	.+534    	; 0x3e0e <main+0x572>
				}
				else{
				LCD_VoidSendInteger4BitMode(num1-num2);
    3bf8:	89 a9       	ldd	r24, Y+49	; 0x31
    3bfa:	9a a9       	ldd	r25, Y+50	; 0x32
    3bfc:	ab a9       	ldd	r26, Y+51	; 0x33
    3bfe:	bc a9       	ldd	r27, Y+52	; 0x34
    3c00:	2d a5       	ldd	r18, Y+45	; 0x2d
    3c02:	3e a5       	ldd	r19, Y+46	; 0x2e
    3c04:	4f a5       	ldd	r20, Y+47	; 0x2f
    3c06:	58 a9       	ldd	r21, Y+48	; 0x30
    3c08:	82 1b       	sub	r24, r18
    3c0a:	93 0b       	sbc	r25, r19
    3c0c:	a4 0b       	sbc	r26, r20
    3c0e:	b5 0b       	sbc	r27, r21
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    3c18:	fa c0       	rjmp	.+500    	; 0x3e0e <main+0x572>
				}
				break;
				case '*' :
					res=num1*num2;
    3c1a:	89 a9       	ldd	r24, Y+49	; 0x31
    3c1c:	9a a9       	ldd	r25, Y+50	; 0x32
    3c1e:	ab a9       	ldd	r26, Y+51	; 0x33
    3c20:	bc a9       	ldd	r27, Y+52	; 0x34
    3c22:	2d a5       	ldd	r18, Y+45	; 0x2d
    3c24:	3e a5       	ldd	r19, Y+46	; 0x2e
    3c26:	4f a5       	ldd	r20, Y+47	; 0x2f
    3c28:	58 a9       	ldd	r21, Y+48	; 0x30
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	0e 94 cb 21 	call	0x4396	; 0x4396 <__mulsi3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	89 a3       	std	Y+33, r24	; 0x21
    3c38:	9a a3       	std	Y+34, r25	; 0x22
    3c3a:	ab a3       	std	Y+35, r26	; 0x23
    3c3c:	bc a3       	std	Y+36, r27	; 0x24
				if(res==0){
    3c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c40:	9a a1       	ldd	r25, Y+34	; 0x22
    3c42:	ab a1       	ldd	r26, Y+35	; 0x23
    3c44:	bc a1       	ldd	r27, Y+36	; 0x24
    3c46:	00 97       	sbiw	r24, 0x00	; 0
    3c48:	a1 05       	cpc	r26, r1
    3c4a:	b1 05       	cpc	r27, r1
    3c4c:	21 f4       	brne	.+8      	; 0x3c56 <main+0x3ba>
					LCD_VoidSendData4BitMode('0');
    3c4e:	80 e3       	ldi	r24, 0x30	; 48
    3c50:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3c54:	dc c0       	rjmp	.+440    	; 0x3e0e <main+0x572>
				}
				else{
				LCD_VoidSendInteger4BitMode(num1*num2);
    3c56:	89 a9       	ldd	r24, Y+49	; 0x31
    3c58:	9a a9       	ldd	r25, Y+50	; 0x32
    3c5a:	ab a9       	ldd	r26, Y+51	; 0x33
    3c5c:	bc a9       	ldd	r27, Y+52	; 0x34
    3c5e:	2d a5       	ldd	r18, Y+45	; 0x2d
    3c60:	3e a5       	ldd	r19, Y+46	; 0x2e
    3c62:	4f a5       	ldd	r20, Y+47	; 0x2f
    3c64:	58 a9       	ldd	r21, Y+48	; 0x30
    3c66:	bc 01       	movw	r22, r24
    3c68:	cd 01       	movw	r24, r26
    3c6a:	0e 94 cb 21 	call	0x4396	; 0x4396 <__mulsi3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    3c7a:	c9 c0       	rjmp	.+402    	; 0x3e0e <main+0x572>
				}
				break;
				case '/' :
					 f=(float)num1/num2;
    3c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    3c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    3c80:	8b a9       	ldd	r24, Y+51	; 0x33
    3c82:	9c a9       	ldd	r25, Y+52	; 0x34
    3c84:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3c88:	7b 01       	movw	r14, r22
    3c8a:	8c 01       	movw	r16, r24
    3c8c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c8e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c92:	98 a9       	ldd	r25, Y+48	; 0x30
    3c94:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3c98:	9b 01       	movw	r18, r22
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	c8 01       	movw	r24, r16
    3c9e:	b7 01       	movw	r22, r14
    3ca0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    3caa:	9e 8f       	std	Y+30, r25	; 0x1e
    3cac:	af 8f       	std	Y+31, r26	; 0x1f
    3cae:	b8 a3       	std	Y+32, r27	; 0x20

					if(f==0){
    3cb0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3cb2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3cb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cb6:	98 a1       	ldd	r25, Y+32	; 0x20
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	21 f4       	brne	.+8      	; 0x3cd0 <main+0x434>
						LCD_VoidSendData4BitMode('0');
    3cc8:	80 e3       	ldi	r24, 0x30	; 48
    3cca:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3cce:	9f c0       	rjmp	.+318    	; 0x3e0e <main+0x572>
					}

					else if(f<1 && f>0){
    3cd0:	6f 96       	adiw	r28, 0x1f	; 31
    3cd2:	1f ae       	std	Y+63, r1	; 0x3f
    3cd4:	6f 97       	sbiw	r28, 0x1f	; 31
    3cd6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3cd8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cdc:	98 a1       	ldd	r25, Y+32	; 0x20
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e8       	ldi	r20, 0x80	; 128
    3ce4:	5f e3       	ldi	r21, 0x3F	; 63
    3ce6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cea:	88 23       	and	r24, r24
    3cec:	24 f4       	brge	.+8      	; 0x3cf6 <main+0x45a>
    3cee:	01 e0       	ldi	r16, 0x01	; 1
    3cf0:	6f 96       	adiw	r28, 0x1f	; 31
    3cf2:	0f af       	std	Y+63, r16	; 0x3f
    3cf4:	6f 97       	sbiw	r28, 0x1f	; 31
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	6f 96       	adiw	r28, 0x1f	; 31
    3cfa:	1f ad       	ldd	r17, Y+63	; 0x3f
    3cfc:	6f 97       	sbiw	r28, 0x1f	; 31
    3cfe:	81 27       	eor	r24, r17
    3d00:	88 23       	and	r24, r24
    3d02:	c9 f5       	brne	.+114    	; 0x3d76 <main+0x4da>
    3d04:	6e 96       	adiw	r28, 0x1e	; 30
    3d06:	1f ae       	std	Y+63, r1	; 0x3f
    3d08:	6e 97       	sbiw	r28, 0x1e	; 30
    3d0a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3d0c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d10:	98 a1       	ldd	r25, Y+32	; 0x20
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d1e:	18 16       	cp	r1, r24
    3d20:	24 f4       	brge	.+8      	; 0x3d2a <main+0x48e>
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	6e 96       	adiw	r28, 0x1e	; 30
    3d26:	8f af       	std	Y+63, r24	; 0x3f
    3d28:	6e 97       	sbiw	r28, 0x1e	; 30
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	6e 96       	adiw	r28, 0x1e	; 30
    3d2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d30:	6e 97       	sbiw	r28, 0x1e	; 30
    3d32:	89 27       	eor	r24, r25
    3d34:	88 23       	and	r24, r24
    3d36:	f9 f4       	brne	.+62     	; 0x3d76 <main+0x4da>
						LCD_VoidSendData4BitMode('0');
    3d38:	80 e3       	ldi	r24, 0x30	; 48
    3d3a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
						LCD_VoidSendFloat4BitMode((float)num1/num2,4);
    3d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d40:	7a a9       	ldd	r23, Y+50	; 0x32
    3d42:	8b a9       	ldd	r24, Y+51	; 0x33
    3d44:	9c a9       	ldd	r25, Y+52	; 0x34
    3d46:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3d4a:	7b 01       	movw	r14, r22
    3d4c:	8c 01       	movw	r16, r24
    3d4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d50:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d54:	98 a9       	ldd	r25, Y+48	; 0x30
    3d56:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3d5a:	9b 01       	movw	r18, r22
    3d5c:	ac 01       	movw	r20, r24
    3d5e:	c8 01       	movw	r24, r16
    3d60:	b7 01       	movw	r22, r14
    3d62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	bc 01       	movw	r22, r24
    3d6c:	cd 01       	movw	r24, r26
    3d6e:	44 e0       	ldi	r20, 0x04	; 4
    3d70:	0e 94 07 1c 	call	0x380e	; 0x380e <LCD_VoidSendFloat4BitMode>
    3d74:	4c c0       	rjmp	.+152    	; 0x3e0e <main+0x572>
					}
					else{

					LCD_VoidSendFloat4BitMode((float)num1/num2,4);
    3d76:	69 a9       	ldd	r22, Y+49	; 0x31
    3d78:	7a a9       	ldd	r23, Y+50	; 0x32
    3d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d7e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3d82:	7b 01       	movw	r14, r22
    3d84:	8c 01       	movw	r16, r24
    3d86:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d88:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d8e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3d92:	9b 01       	movw	r18, r22
    3d94:	ac 01       	movw	r20, r24
    3d96:	c8 01       	movw	r24, r16
    3d98:	b7 01       	movw	r22, r14
    3d9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	bc 01       	movw	r22, r24
    3da4:	cd 01       	movw	r24, r26
    3da6:	44 e0       	ldi	r20, 0x04	; 4
    3da8:	0e 94 07 1c 	call	0x380e	; 0x380e <LCD_VoidSendFloat4BitMode>
    3dac:	30 c0       	rjmp	.+96     	; 0x3e0e <main+0x572>

					}
					break;
				case '%' :
					res=num1%num2;
    3dae:	89 a9       	ldd	r24, Y+49	; 0x31
    3db0:	9a a9       	ldd	r25, Y+50	; 0x32
    3db2:	ab a9       	ldd	r26, Y+51	; 0x33
    3db4:	bc a9       	ldd	r27, Y+52	; 0x34
    3db6:	2d a5       	ldd	r18, Y+45	; 0x2d
    3db8:	3e a5       	ldd	r19, Y+46	; 0x2e
    3dba:	4f a5       	ldd	r20, Y+47	; 0x2f
    3dbc:	58 a9       	ldd	r21, Y+48	; 0x30
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 fd 21 	call	0x43fa	; 0x43fa <__udivmodsi4>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	89 a3       	std	Y+33, r24	; 0x21
    3dcc:	9a a3       	std	Y+34, r25	; 0x22
    3dce:	ab a3       	std	Y+35, r26	; 0x23
    3dd0:	bc a3       	std	Y+36, r27	; 0x24
				if(res==0){
    3dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd6:	ab a1       	ldd	r26, Y+35	; 0x23
    3dd8:	bc a1       	ldd	r27, Y+36	; 0x24
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	a1 05       	cpc	r26, r1
    3dde:	b1 05       	cpc	r27, r1
    3de0:	21 f4       	brne	.+8      	; 0x3dea <main+0x54e>
					LCD_VoidSendData4BitMode('0');
    3de2:	80 e3       	ldi	r24, 0x30	; 48
    3de4:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3de8:	12 c0       	rjmp	.+36     	; 0x3e0e <main+0x572>
				}
				else{
				LCD_VoidSendInteger4BitMode(num1%num2);
    3dea:	89 a9       	ldd	r24, Y+49	; 0x31
    3dec:	9a a9       	ldd	r25, Y+50	; 0x32
    3dee:	ab a9       	ldd	r26, Y+51	; 0x33
    3df0:	bc a9       	ldd	r27, Y+52	; 0x34
    3df2:	2d a5       	ldd	r18, Y+45	; 0x2d
    3df4:	3e a5       	ldd	r19, Y+46	; 0x2e
    3df6:	4f a5       	ldd	r20, Y+47	; 0x2f
    3df8:	58 a9       	ldd	r21, Y+48	; 0x30
    3dfa:	bc 01       	movw	r22, r24
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	0e 94 fd 21 	call	0x43fa	; 0x43fa <__udivmodsi4>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	aa ef       	ldi	r26, 0xFA	; 250
    3e14:	b4 e4       	ldi	r27, 0x44	; 68
    3e16:	8b 87       	std	Y+11, r24	; 0x0b
    3e18:	9c 87       	std	Y+12, r25	; 0x0c
    3e1a:	ad 87       	std	Y+13, r26	; 0x0d
    3e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	4a e7       	ldi	r20, 0x7A	; 122
    3e2c:	55 e4       	ldi	r21, 0x45	; 69
    3e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	8f 83       	std	Y+7, r24	; 0x07
    3e38:	98 87       	std	Y+8, r25	; 0x08
    3e3a:	a9 87       	std	Y+9, r26	; 0x09
    3e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e40:	78 85       	ldd	r23, Y+8	; 0x08
    3e42:	89 85       	ldd	r24, Y+9	; 0x09
    3e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	40 e8       	ldi	r20, 0x80	; 128
    3e4c:	5f e3       	ldi	r21, 0x3F	; 63
    3e4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e52:	88 23       	and	r24, r24
    3e54:	2c f4       	brge	.+10     	; 0x3e60 <main+0x5c4>
		__ticks = 1;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	3f c0       	rjmp	.+126    	; 0x3ede <main+0x642>
	else if (__tmp > 65535)
    3e60:	6f 81       	ldd	r22, Y+7	; 0x07
    3e62:	78 85       	ldd	r23, Y+8	; 0x08
    3e64:	89 85       	ldd	r24, Y+9	; 0x09
    3e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	3f ef       	ldi	r19, 0xFF	; 255
    3e6c:	4f e7       	ldi	r20, 0x7F	; 127
    3e6e:	57 e4       	ldi	r21, 0x47	; 71
    3e70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e74:	18 16       	cp	r1, r24
    3e76:	4c f5       	brge	.+82     	; 0x3eca <main+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e2       	ldi	r20, 0x20	; 32
    3e86:	51 e4       	ldi	r21, 0x41	; 65
    3e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8c:	dc 01       	movw	r26, r24
    3e8e:	cb 01       	movw	r24, r22
    3e90:	bc 01       	movw	r22, r24
    3e92:	cd 01       	movw	r24, r26
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
    3ea0:	0f c0       	rjmp	.+30     	; 0x3ec0 <main+0x624>
    3ea2:	80 e9       	ldi	r24, 0x90	; 144
    3ea4:	91 e0       	ldi	r25, 0x01	; 1
    3ea6:	9c 83       	std	Y+4, r25	; 0x04
    3ea8:	8b 83       	std	Y+3, r24	; 0x03
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	9c 81       	ldd	r25, Y+4	; 0x04
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	f1 f7       	brne	.-4      	; 0x3eae <main+0x612>
    3eb2:	9c 83       	std	Y+4, r25	; 0x04
    3eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	9e 83       	std	Y+6, r25	; 0x06
    3ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec4:	00 97       	sbiw	r24, 0x00	; 0
    3ec6:	69 f7       	brne	.-38     	; 0x3ea2 <main+0x606>
    3ec8:	14 c0       	rjmp	.+40     	; 0x3ef2 <main+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ecc:	78 85       	ldd	r23, Y+8	; 0x08
    3ece:	89 85       	ldd	r24, Y+9	; 0x09
    3ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	9e 83       	std	Y+6, r25	; 0x06
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee2:	9a 83       	std	Y+2, r25	; 0x02
    3ee4:	89 83       	std	Y+1, r24	; 0x01
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	f1 f7       	brne	.-4      	; 0x3eea <main+0x64e>
    3eee:	9a 83       	std	Y+2, r25	; 0x02
    3ef0:	89 83       	std	Y+1, r24	; 0x01
				}
				break;
				}

				_delay_ms(2000);
				iterator1=0;
    3ef2:	19 a6       	std	Y+41, r1	; 0x29
    3ef4:	1a a6       	std	Y+42, r1	; 0x2a
    3ef6:	1b a6       	std	Y+43, r1	; 0x2b
    3ef8:	1c a6       	std	Y+44, r1	; 0x2c
				iterator2=0;
    3efa:	1d a2       	std	Y+37, r1	; 0x25
    3efc:	1e a2       	std	Y+38, r1	; 0x26
    3efe:	1f a2       	std	Y+39, r1	; 0x27
    3f00:	18 a6       	std	Y+40, r1	; 0x28
				op=0;
    3f02:	1d aa       	std	Y+53, r1	; 0x35
    3f04:	1e aa       	std	Y+54, r1	; 0x36
    3f06:	1f aa       	std	Y+55, r1	; 0x37
    3f08:	18 ae       	std	Y+56, r1	; 0x38
				LCD_VoidSendCommand4BitMode(0x01);
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_VoidSendCommand4BitMode>
				LCD_VoidSetPosition4BitMode(1,0);
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	0e 94 33 1c 	call	0x3866	; 0x3866 <LCD_VoidSetPosition4BitMode>
    3f18:	65 cd       	rjmp	.-1334   	; 0x39e4 <main+0x148>

			}

		else if((in1!=0xff) && ( iterator1>0) && (op==0)
    3f1a:	89 ad       	ldd	r24, Y+57	; 0x39
    3f1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f1e:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f20:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f22:	8f 3f       	cpi	r24, 0xFF	; 255
    3f24:	91 05       	cpc	r25, r1
    3f26:	a1 05       	cpc	r26, r1
    3f28:	b1 05       	cpc	r27, r1
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <main+0x692>
    3f2c:	4a c0       	rjmp	.+148    	; 0x3fc2 <main+0x726>
    3f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f32:	ab a5       	ldd	r26, Y+43	; 0x2b
    3f34:	bc a5       	ldd	r27, Y+44	; 0x2c
    3f36:	00 97       	sbiw	r24, 0x00	; 0
    3f38:	a1 05       	cpc	r26, r1
    3f3a:	b1 05       	cpc	r27, r1
    3f3c:	09 f4       	brne	.+2      	; 0x3f40 <main+0x6a4>
    3f3e:	41 c0       	rjmp	.+130    	; 0x3fc2 <main+0x726>
    3f40:	8d a9       	ldd	r24, Y+53	; 0x35
    3f42:	9e a9       	ldd	r25, Y+54	; 0x36
    3f44:	af a9       	ldd	r26, Y+55	; 0x37
    3f46:	b8 ad       	ldd	r27, Y+56	; 0x38
    3f48:	00 97       	sbiw	r24, 0x00	; 0
    3f4a:	a1 05       	cpc	r26, r1
    3f4c:	b1 05       	cpc	r27, r1
    3f4e:	c9 f5       	brne	.+114    	; 0x3fc2 <main+0x726>
    3f50:	89 ad       	ldd	r24, Y+57	; 0x39
    3f52:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f54:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f56:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f58:	8b 32       	cpi	r24, 0x2B	; 43
    3f5a:	91 05       	cpc	r25, r1
    3f5c:	a1 05       	cpc	r26, r1
    3f5e:	b1 05       	cpc	r27, r1
    3f60:	21 f1       	breq	.+72     	; 0x3faa <main+0x70e>
    3f62:	89 ad       	ldd	r24, Y+57	; 0x39
    3f64:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f66:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f68:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f6a:	8d 32       	cpi	r24, 0x2D	; 45
    3f6c:	91 05       	cpc	r25, r1
    3f6e:	a1 05       	cpc	r26, r1
    3f70:	b1 05       	cpc	r27, r1
    3f72:	d9 f0       	breq	.+54     	; 0x3faa <main+0x70e>
    3f74:	89 ad       	ldd	r24, Y+57	; 0x39
    3f76:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f78:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f7a:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f7c:	8a 32       	cpi	r24, 0x2A	; 42
    3f7e:	91 05       	cpc	r25, r1
    3f80:	a1 05       	cpc	r26, r1
    3f82:	b1 05       	cpc	r27, r1
    3f84:	91 f0       	breq	.+36     	; 0x3faa <main+0x70e>
    3f86:	89 ad       	ldd	r24, Y+57	; 0x39
    3f88:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f8a:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f8c:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f8e:	8f 32       	cpi	r24, 0x2F	; 47
    3f90:	91 05       	cpc	r25, r1
    3f92:	a1 05       	cpc	r26, r1
    3f94:	b1 05       	cpc	r27, r1
    3f96:	49 f0       	breq	.+18     	; 0x3faa <main+0x70e>
    3f98:	89 ad       	ldd	r24, Y+57	; 0x39
    3f9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f9c:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f9e:	bc ad       	ldd	r27, Y+60	; 0x3c
    3fa0:	85 32       	cpi	r24, 0x25	; 37
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	a1 05       	cpc	r26, r1
    3fa6:	b1 05       	cpc	r27, r1
    3fa8:	61 f4       	brne	.+24     	; 0x3fc2 <main+0x726>
    	&&(in1=='+' ||in1=='-' ||in1=='*' ||in1=='/' ||in1=='%' )){

		 op=in1;
    3faa:	89 ad       	ldd	r24, Y+57	; 0x39
    3fac:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fae:	ab ad       	ldd	r26, Y+59	; 0x3b
    3fb0:	bc ad       	ldd	r27, Y+60	; 0x3c
    3fb2:	8d ab       	std	Y+53, r24	; 0x35
    3fb4:	9e ab       	std	Y+54, r25	; 0x36
    3fb6:	af ab       	std	Y+55, r26	; 0x37
    3fb8:	b8 af       	std	Y+56, r27	; 0x38
		 LCD_VoidSendData4BitMode(op);
    3fba:	8d a9       	ldd	r24, Y+53	; 0x35
    3fbc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    3fc0:	11 cd       	rjmp	.-1502   	; 0x39e4 <main+0x148>

    }
		else if(in1!=0xff && op==0 &&iterator1<4){
    3fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    3fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fc6:	ab ad       	ldd	r26, Y+59	; 0x3b
    3fc8:	bc ad       	ldd	r27, Y+60	; 0x3c
    3fca:	8f 3f       	cpi	r24, 0xFF	; 255
    3fcc:	91 05       	cpc	r25, r1
    3fce:	a1 05       	cpc	r26, r1
    3fd0:	b1 05       	cpc	r27, r1
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <main+0x73a>
    3fd4:	89 c0       	rjmp	.+274    	; 0x40e8 <main+0x84c>
    3fd6:	8d a9       	ldd	r24, Y+53	; 0x35
    3fd8:	9e a9       	ldd	r25, Y+54	; 0x36
    3fda:	af a9       	ldd	r26, Y+55	; 0x37
    3fdc:	b8 ad       	ldd	r27, Y+56	; 0x38
    3fde:	00 97       	sbiw	r24, 0x00	; 0
    3fe0:	a1 05       	cpc	r26, r1
    3fe2:	b1 05       	cpc	r27, r1
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <main+0x74c>
    3fe6:	80 c0       	rjmp	.+256    	; 0x40e8 <main+0x84c>
    3fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    3fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fec:	ab a5       	ldd	r26, Y+43	; 0x2b
    3fee:	bc a5       	ldd	r27, Y+44	; 0x2c
    3ff0:	84 30       	cpi	r24, 0x04	; 4
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	a1 05       	cpc	r26, r1
    3ff6:	b1 05       	cpc	r27, r1
    3ff8:	08 f0       	brcs	.+2      	; 0x3ffc <main+0x760>
    3ffa:	76 c0       	rjmp	.+236    	; 0x40e8 <main+0x84c>

			arr1[iterator1++]=in1;
    3ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4000:	ab a5       	ldd	r26, Y+43	; 0x2b
    4002:	bc a5       	ldd	r27, Y+44	; 0x2c
    4004:	9c 01       	movw	r18, r24
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	22 0f       	add	r18, r18
    400c:	33 1f       	adc	r19, r19
    400e:	ce 01       	movw	r24, r28
    4010:	01 96       	adiw	r24, 0x01	; 1
    4012:	82 0f       	add	r24, r18
    4014:	93 1f       	adc	r25, r19
    4016:	fc 01       	movw	r30, r24
    4018:	fc 96       	adiw	r30, 0x3c	; 60
    401a:	89 ad       	ldd	r24, Y+57	; 0x39
    401c:	9a ad       	ldd	r25, Y+58	; 0x3a
    401e:	ab ad       	ldd	r26, Y+59	; 0x3b
    4020:	bc ad       	ldd	r27, Y+60	; 0x3c
    4022:	80 83       	st	Z, r24
    4024:	91 83       	std	Z+1, r25	; 0x01
    4026:	a2 83       	std	Z+2, r26	; 0x02
    4028:	b3 83       	std	Z+3, r27	; 0x03
    402a:	89 a5       	ldd	r24, Y+41	; 0x29
    402c:	9a a5       	ldd	r25, Y+42	; 0x2a
    402e:	ab a5       	ldd	r26, Y+43	; 0x2b
    4030:	bc a5       	ldd	r27, Y+44	; 0x2c
    4032:	01 96       	adiw	r24, 0x01	; 1
    4034:	a1 1d       	adc	r26, r1
    4036:	b1 1d       	adc	r27, r1
    4038:	89 a7       	std	Y+41, r24	; 0x29
    403a:	9a a7       	std	Y+42, r25	; 0x2a
    403c:	ab a7       	std	Y+43, r26	; 0x2b
    403e:	bc a7       	std	Y+44, r27	; 0x2c
			if(arr1[iterator1-1]==0){
    4040:	89 a5       	ldd	r24, Y+41	; 0x29
    4042:	9a a5       	ldd	r25, Y+42	; 0x2a
    4044:	ab a5       	ldd	r26, Y+43	; 0x2b
    4046:	bc a5       	ldd	r27, Y+44	; 0x2c
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	a1 09       	sbc	r26, r1
    404c:	b1 09       	sbc	r27, r1
    404e:	9c 01       	movw	r18, r24
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	22 0f       	add	r18, r18
    4056:	33 1f       	adc	r19, r19
    4058:	ce 01       	movw	r24, r28
    405a:	01 96       	adiw	r24, 0x01	; 1
    405c:	82 0f       	add	r24, r18
    405e:	93 1f       	adc	r25, r19
    4060:	fc 01       	movw	r30, r24
    4062:	fc 96       	adiw	r30, 0x3c	; 60
    4064:	80 81       	ld	r24, Z
    4066:	91 81       	ldd	r25, Z+1	; 0x01
    4068:	a2 81       	ldd	r26, Z+2	; 0x02
    406a:	b3 81       	ldd	r27, Z+3	; 0x03
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	a1 05       	cpc	r26, r1
    4070:	b1 05       	cpc	r27, r1
    4072:	21 f4       	brne	.+8      	; 0x407c <main+0x7e0>
				LCD_VoidSendData4BitMode('0');
    4074:	80 e3       	ldi	r24, 0x30	; 48
    4076:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    407a:	b4 cc       	rjmp	.-1688   	; 0x39e4 <main+0x148>
			}
			else if(arr1[iterator1-1]>0){
    407c:	89 a5       	ldd	r24, Y+41	; 0x29
    407e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4080:	ab a5       	ldd	r26, Y+43	; 0x2b
    4082:	bc a5       	ldd	r27, Y+44	; 0x2c
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	a1 09       	sbc	r26, r1
    4088:	b1 09       	sbc	r27, r1
    408a:	9c 01       	movw	r18, r24
    408c:	22 0f       	add	r18, r18
    408e:	33 1f       	adc	r19, r19
    4090:	22 0f       	add	r18, r18
    4092:	33 1f       	adc	r19, r19
    4094:	ce 01       	movw	r24, r28
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	82 0f       	add	r24, r18
    409a:	93 1f       	adc	r25, r19
    409c:	fc 01       	movw	r30, r24
    409e:	fc 96       	adiw	r30, 0x3c	; 60
    40a0:	80 81       	ld	r24, Z
    40a2:	91 81       	ldd	r25, Z+1	; 0x01
    40a4:	a2 81       	ldd	r26, Z+2	; 0x02
    40a6:	b3 81       	ldd	r27, Z+3	; 0x03
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	a1 05       	cpc	r26, r1
    40ac:	b1 05       	cpc	r27, r1
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <main+0x816>
    40b0:	99 cc       	rjmp	.-1742   	; 0x39e4 <main+0x148>
				LCD_VoidSendInteger4BitMode(arr1[iterator1-1]);
    40b2:	89 a5       	ldd	r24, Y+41	; 0x29
    40b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    40b6:	ab a5       	ldd	r26, Y+43	; 0x2b
    40b8:	bc a5       	ldd	r27, Y+44	; 0x2c
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	a1 09       	sbc	r26, r1
    40be:	b1 09       	sbc	r27, r1
    40c0:	9c 01       	movw	r18, r24
    40c2:	22 0f       	add	r18, r18
    40c4:	33 1f       	adc	r19, r19
    40c6:	22 0f       	add	r18, r18
    40c8:	33 1f       	adc	r19, r19
    40ca:	ce 01       	movw	r24, r28
    40cc:	01 96       	adiw	r24, 0x01	; 1
    40ce:	82 0f       	add	r24, r18
    40d0:	93 1f       	adc	r25, r19
    40d2:	fc 01       	movw	r30, r24
    40d4:	fc 96       	adiw	r30, 0x3c	; 60
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	a2 81       	ldd	r26, Z+2	; 0x02
    40dc:	b3 81       	ldd	r27, Z+3	; 0x03
    40de:	bc 01       	movw	r22, r24
    40e0:	cd 01       	movw	r24, r26
    40e2:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    40e6:	7e cc       	rjmp	.-1796   	; 0x39e4 <main+0x148>
			}

		}
		else	if(in1!=0xff && op>0 &&iterator2<4){
    40e8:	89 ad       	ldd	r24, Y+57	; 0x39
    40ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    40ec:	ab ad       	ldd	r26, Y+59	; 0x3b
    40ee:	bc ad       	ldd	r27, Y+60	; 0x3c
    40f0:	8f 3f       	cpi	r24, 0xFF	; 255
    40f2:	91 05       	cpc	r25, r1
    40f4:	a1 05       	cpc	r26, r1
    40f6:	b1 05       	cpc	r27, r1
    40f8:	09 f4       	brne	.+2      	; 0x40fc <main+0x860>
    40fa:	74 cc       	rjmp	.-1816   	; 0x39e4 <main+0x148>
    40fc:	8d a9       	ldd	r24, Y+53	; 0x35
    40fe:	9e a9       	ldd	r25, Y+54	; 0x36
    4100:	af a9       	ldd	r26, Y+55	; 0x37
    4102:	b8 ad       	ldd	r27, Y+56	; 0x38
    4104:	00 97       	sbiw	r24, 0x00	; 0
    4106:	a1 05       	cpc	r26, r1
    4108:	b1 05       	cpc	r27, r1
    410a:	09 f4       	brne	.+2      	; 0x410e <main+0x872>
    410c:	6b cc       	rjmp	.-1834   	; 0x39e4 <main+0x148>
    410e:	8d a1       	ldd	r24, Y+37	; 0x25
    4110:	9e a1       	ldd	r25, Y+38	; 0x26
    4112:	af a1       	ldd	r26, Y+39	; 0x27
    4114:	b8 a5       	ldd	r27, Y+40	; 0x28
    4116:	84 30       	cpi	r24, 0x04	; 4
    4118:	91 05       	cpc	r25, r1
    411a:	a1 05       	cpc	r26, r1
    411c:	b1 05       	cpc	r27, r1
    411e:	08 f0       	brcs	.+2      	; 0x4122 <main+0x886>
    4120:	61 cc       	rjmp	.-1854   	; 0x39e4 <main+0x148>
					arr2[iterator2++]=in1;
    4122:	8d a1       	ldd	r24, Y+37	; 0x25
    4124:	9e a1       	ldd	r25, Y+38	; 0x26
    4126:	af a1       	ldd	r26, Y+39	; 0x27
    4128:	b8 a5       	ldd	r27, Y+40	; 0x28
    412a:	9e 01       	movw	r18, r28
    412c:	23 5b       	subi	r18, 0xB3	; 179
    412e:	3f 4f       	sbci	r19, 0xFF	; 255
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	88 0f       	add	r24, r24
    4136:	99 1f       	adc	r25, r25
    4138:	f9 01       	movw	r30, r18
    413a:	e8 0f       	add	r30, r24
    413c:	f9 1f       	adc	r31, r25
    413e:	89 ad       	ldd	r24, Y+57	; 0x39
    4140:	9a ad       	ldd	r25, Y+58	; 0x3a
    4142:	ab ad       	ldd	r26, Y+59	; 0x3b
    4144:	bc ad       	ldd	r27, Y+60	; 0x3c
    4146:	80 83       	st	Z, r24
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	a2 83       	std	Z+2, r26	; 0x02
    414c:	b3 83       	std	Z+3, r27	; 0x03
    414e:	8d a1       	ldd	r24, Y+37	; 0x25
    4150:	9e a1       	ldd	r25, Y+38	; 0x26
    4152:	af a1       	ldd	r26, Y+39	; 0x27
    4154:	b8 a5       	ldd	r27, Y+40	; 0x28
    4156:	01 96       	adiw	r24, 0x01	; 1
    4158:	a1 1d       	adc	r26, r1
    415a:	b1 1d       	adc	r27, r1
    415c:	8d a3       	std	Y+37, r24	; 0x25
    415e:	9e a3       	std	Y+38, r25	; 0x26
    4160:	af a3       	std	Y+39, r26	; 0x27
    4162:	b8 a7       	std	Y+40, r27	; 0x28
					if(arr2[iterator2-1]==0){
    4164:	8d a1       	ldd	r24, Y+37	; 0x25
    4166:	9e a1       	ldd	r25, Y+38	; 0x26
    4168:	af a1       	ldd	r26, Y+39	; 0x27
    416a:	b8 a5       	ldd	r27, Y+40	; 0x28
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	a1 09       	sbc	r26, r1
    4170:	b1 09       	sbc	r27, r1
    4172:	9e 01       	movw	r18, r28
    4174:	23 5b       	subi	r18, 0xB3	; 179
    4176:	3f 4f       	sbci	r19, 0xFF	; 255
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	88 0f       	add	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	f9 01       	movw	r30, r18
    4182:	e8 0f       	add	r30, r24
    4184:	f9 1f       	adc	r31, r25
    4186:	80 81       	ld	r24, Z
    4188:	91 81       	ldd	r25, Z+1	; 0x01
    418a:	a2 81       	ldd	r26, Z+2	; 0x02
    418c:	b3 81       	ldd	r27, Z+3	; 0x03
    418e:	00 97       	sbiw	r24, 0x00	; 0
    4190:	a1 05       	cpc	r26, r1
    4192:	b1 05       	cpc	r27, r1
    4194:	21 f4       	brne	.+8      	; 0x419e <main+0x902>
						LCD_VoidSendData4BitMode('0');
    4196:	80 e3       	ldi	r24, 0x30	; 48
    4198:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_VoidSendData4BitMode>
    419c:	23 cc       	rjmp	.-1978   	; 0x39e4 <main+0x148>
					}
					else if(arr2[iterator2-1]>0){
    419e:	8d a1       	ldd	r24, Y+37	; 0x25
    41a0:	9e a1       	ldd	r25, Y+38	; 0x26
    41a2:	af a1       	ldd	r26, Y+39	; 0x27
    41a4:	b8 a5       	ldd	r27, Y+40	; 0x28
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	a1 09       	sbc	r26, r1
    41aa:	b1 09       	sbc	r27, r1
    41ac:	9e 01       	movw	r18, r28
    41ae:	23 5b       	subi	r18, 0xB3	; 179
    41b0:	3f 4f       	sbci	r19, 0xFF	; 255
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	f9 01       	movw	r30, r18
    41bc:	e8 0f       	add	r30, r24
    41be:	f9 1f       	adc	r31, r25
    41c0:	80 81       	ld	r24, Z
    41c2:	91 81       	ldd	r25, Z+1	; 0x01
    41c4:	a2 81       	ldd	r26, Z+2	; 0x02
    41c6:	b3 81       	ldd	r27, Z+3	; 0x03
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	a1 05       	cpc	r26, r1
    41cc:	b1 05       	cpc	r27, r1
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <main+0x936>
    41d0:	09 cc       	rjmp	.-2030   	; 0x39e4 <main+0x148>
						LCD_VoidSendInteger4BitMode(arr2[iterator2-1]);
    41d2:	8d a1       	ldd	r24, Y+37	; 0x25
    41d4:	9e a1       	ldd	r25, Y+38	; 0x26
    41d6:	af a1       	ldd	r26, Y+39	; 0x27
    41d8:	b8 a5       	ldd	r27, Y+40	; 0x28
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	a1 09       	sbc	r26, r1
    41de:	b1 09       	sbc	r27, r1
    41e0:	9e 01       	movw	r18, r28
    41e2:	23 5b       	subi	r18, 0xB3	; 179
    41e4:	3f 4f       	sbci	r19, 0xFF	; 255
    41e6:	88 0f       	add	r24, r24
    41e8:	99 1f       	adc	r25, r25
    41ea:	88 0f       	add	r24, r24
    41ec:	99 1f       	adc	r25, r25
    41ee:	f9 01       	movw	r30, r18
    41f0:	e8 0f       	add	r30, r24
    41f2:	f9 1f       	adc	r31, r25
    41f4:	80 81       	ld	r24, Z
    41f6:	91 81       	ldd	r25, Z+1	; 0x01
    41f8:	a2 81       	ldd	r26, Z+2	; 0x02
    41fa:	b3 81       	ldd	r27, Z+3	; 0x03
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_VoidSendInteger4BitMode>
    4204:	ef cb       	rjmp	.-2082   	; 0x39e4 <main+0x148>

00004206 <arrttointeger>:
	}




u32 arrttointeger(u32 arr[],u32 numberofdigits){
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	df 93       	push	r29
    4210:	cf 93       	push	r28
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	2e 97       	sbiw	r28, 0x0e	; 14
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	f8 94       	cli
    421c:	de bf       	out	0x3e, r29	; 62
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	9a 87       	std	Y+10, r25	; 0x0a
    4224:	89 87       	std	Y+9, r24	; 0x09
    4226:	4b 87       	std	Y+11, r20	; 0x0b
    4228:	5c 87       	std	Y+12, r21	; 0x0c
    422a:	6d 87       	std	Y+13, r22	; 0x0d
    422c:	7e 87       	std	Y+14, r23	; 0x0e
int snum=0;
    422e:	18 86       	std	Y+8, r1	; 0x08
    4230:	1f 82       	std	Y+7, r1	; 0x07
 for(int i=0;i<numberofdigits-1;i++){
    4232:	1e 82       	std	Y+6, r1	; 0x06
    4234:	1d 82       	std	Y+5, r1	; 0x05
    4236:	57 c0       	rjmp	.+174    	; 0x42e6 <arrttointeger+0xe0>
   for(int j=0;j<numberofdigits-i-1;j++){
    4238:	1c 82       	std	Y+4, r1	; 0x04
    423a:	1b 82       	std	Y+3, r1	; 0x03
    423c:	30 c0       	rjmp	.+96     	; 0x429e <arrttointeger+0x98>
    arr[i]*=10;
    423e:	8d 81       	ldd	r24, Y+5	; 0x05
    4240:	9e 81       	ldd	r25, Y+6	; 0x06
    4242:	9c 01       	movw	r18, r24
    4244:	22 0f       	add	r18, r18
    4246:	33 1f       	adc	r19, r19
    4248:	22 0f       	add	r18, r18
    424a:	33 1f       	adc	r19, r19
    424c:	89 85       	ldd	r24, Y+9	; 0x09
    424e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4250:	8c 01       	movw	r16, r24
    4252:	02 0f       	add	r16, r18
    4254:	13 1f       	adc	r17, r19
    4256:	8d 81       	ldd	r24, Y+5	; 0x05
    4258:	9e 81       	ldd	r25, Y+6	; 0x06
    425a:	9c 01       	movw	r18, r24
    425c:	22 0f       	add	r18, r18
    425e:	33 1f       	adc	r19, r19
    4260:	22 0f       	add	r18, r18
    4262:	33 1f       	adc	r19, r19
    4264:	89 85       	ldd	r24, Y+9	; 0x09
    4266:	9a 85       	ldd	r25, Y+10	; 0x0a
    4268:	fc 01       	movw	r30, r24
    426a:	e2 0f       	add	r30, r18
    426c:	f3 1f       	adc	r31, r19
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	a2 81       	ldd	r26, Z+2	; 0x02
    4274:	b3 81       	ldd	r27, Z+3	; 0x03
    4276:	2a e0       	ldi	r18, 0x0A	; 10
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	40 e0       	ldi	r20, 0x00	; 0
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	bc 01       	movw	r22, r24
    4280:	cd 01       	movw	r24, r26
    4282:	0e 94 cb 21 	call	0x4396	; 0x4396 <__mulsi3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	f8 01       	movw	r30, r16
    428c:	80 83       	st	Z, r24
    428e:	91 83       	std	Z+1, r25	; 0x01
    4290:	a2 83       	std	Z+2, r26	; 0x02
    4292:	b3 83       	std	Z+3, r27	; 0x03


u32 arrttointeger(u32 arr[],u32 numberofdigits){
int snum=0;
 for(int i=0;i<numberofdigits-1;i++){
   for(int j=0;j<numberofdigits-i-1;j++){
    4294:	8b 81       	ldd	r24, Y+3	; 0x03
    4296:	9c 81       	ldd	r25, Y+4	; 0x04
    4298:	01 96       	adiw	r24, 0x01	; 1
    429a:	9c 83       	std	Y+4, r25	; 0x04
    429c:	8b 83       	std	Y+3, r24	; 0x03
    429e:	8b 81       	ldd	r24, Y+3	; 0x03
    42a0:	9c 81       	ldd	r25, Y+4	; 0x04
    42a2:	7c 01       	movw	r14, r24
    42a4:	00 27       	eor	r16, r16
    42a6:	f7 fc       	sbrc	r15, 7
    42a8:	00 95       	com	r16
    42aa:	10 2f       	mov	r17, r16
    42ac:	8d 81       	ldd	r24, Y+5	; 0x05
    42ae:	9e 81       	ldd	r25, Y+6	; 0x06
    42b0:	9c 01       	movw	r18, r24
    42b2:	44 27       	eor	r20, r20
    42b4:	37 fd       	sbrc	r19, 7
    42b6:	40 95       	com	r20
    42b8:	54 2f       	mov	r21, r20
    42ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    42bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    42be:	ad 85       	ldd	r26, Y+13	; 0x0d
    42c0:	be 85       	ldd	r27, Y+14	; 0x0e
    42c2:	82 1b       	sub	r24, r18
    42c4:	93 0b       	sbc	r25, r19
    42c6:	a4 0b       	sbc	r26, r20
    42c8:	b5 0b       	sbc	r27, r21
    42ca:	01 97       	sbiw	r24, 0x01	; 1
    42cc:	a1 09       	sbc	r26, r1
    42ce:	b1 09       	sbc	r27, r1
    42d0:	e8 16       	cp	r14, r24
    42d2:	f9 06       	cpc	r15, r25
    42d4:	0a 07       	cpc	r16, r26
    42d6:	1b 07       	cpc	r17, r27
    42d8:	08 f4       	brcc	.+2      	; 0x42dc <arrttointeger+0xd6>
    42da:	b1 cf       	rjmp	.-158    	; 0x423e <arrttointeger+0x38>



u32 arrttointeger(u32 arr[],u32 numberofdigits){
int snum=0;
 for(int i=0;i<numberofdigits-1;i++){
    42dc:	8d 81       	ldd	r24, Y+5	; 0x05
    42de:	9e 81       	ldd	r25, Y+6	; 0x06
    42e0:	01 96       	adiw	r24, 0x01	; 1
    42e2:	9e 83       	std	Y+6, r25	; 0x06
    42e4:	8d 83       	std	Y+5, r24	; 0x05
    42e6:	8d 81       	ldd	r24, Y+5	; 0x05
    42e8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ea:	9c 01       	movw	r18, r24
    42ec:	44 27       	eor	r20, r20
    42ee:	37 fd       	sbrc	r19, 7
    42f0:	40 95       	com	r20
    42f2:	54 2f       	mov	r21, r20
    42f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    42f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    42f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    42fa:	be 85       	ldd	r27, Y+14	; 0x0e
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	a1 09       	sbc	r26, r1
    4300:	b1 09       	sbc	r27, r1
    4302:	28 17       	cp	r18, r24
    4304:	39 07       	cpc	r19, r25
    4306:	4a 07       	cpc	r20, r26
    4308:	5b 07       	cpc	r21, r27
    430a:	08 f4       	brcc	.+2      	; 0x430e <arrttointeger+0x108>
    430c:	95 cf       	rjmp	.-214    	; 0x4238 <arrttointeger+0x32>
   for(int j=0;j<numberofdigits-i-1;j++){
    arr[i]*=10;
   }
 }
 for(int i=0;i<numberofdigits;i++){
    430e:	1a 82       	std	Y+2, r1	; 0x02
    4310:	19 82       	std	Y+1, r1	; 0x01
    4312:	1c c0       	rjmp	.+56     	; 0x434c <arrttointeger+0x146>
    snum+=arr[i];
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	9c 01       	movw	r18, r24
    431a:	22 0f       	add	r18, r18
    431c:	33 1f       	adc	r19, r19
    431e:	22 0f       	add	r18, r18
    4320:	33 1f       	adc	r19, r19
    4322:	89 85       	ldd	r24, Y+9	; 0x09
    4324:	9a 85       	ldd	r25, Y+10	; 0x0a
    4326:	fc 01       	movw	r30, r24
    4328:	e2 0f       	add	r30, r18
    432a:	f3 1f       	adc	r31, r19
    432c:	80 81       	ld	r24, Z
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	a2 81       	ldd	r26, Z+2	; 0x02
    4332:	b3 81       	ldd	r27, Z+3	; 0x03
    4334:	9c 01       	movw	r18, r24
    4336:	8f 81       	ldd	r24, Y+7	; 0x07
    4338:	98 85       	ldd	r25, Y+8	; 0x08
    433a:	82 0f       	add	r24, r18
    433c:	93 1f       	adc	r25, r19
    433e:	98 87       	std	Y+8, r25	; 0x08
    4340:	8f 83       	std	Y+7, r24	; 0x07
 for(int i=0;i<numberofdigits-1;i++){
   for(int j=0;j<numberofdigits-i-1;j++){
    arr[i]*=10;
   }
 }
 for(int i=0;i<numberofdigits;i++){
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	9a 81       	ldd	r25, Y+2	; 0x02
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	9a 83       	std	Y+2, r25	; 0x02
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	9a 81       	ldd	r25, Y+2	; 0x02
    4350:	9c 01       	movw	r18, r24
    4352:	44 27       	eor	r20, r20
    4354:	37 fd       	sbrc	r19, 7
    4356:	40 95       	com	r20
    4358:	54 2f       	mov	r21, r20
    435a:	8b 85       	ldd	r24, Y+11	; 0x0b
    435c:	9c 85       	ldd	r25, Y+12	; 0x0c
    435e:	ad 85       	ldd	r26, Y+13	; 0x0d
    4360:	be 85       	ldd	r27, Y+14	; 0x0e
    4362:	28 17       	cp	r18, r24
    4364:	39 07       	cpc	r19, r25
    4366:	4a 07       	cpc	r20, r26
    4368:	5b 07       	cpc	r21, r27
    436a:	a0 f2       	brcs	.-88     	; 0x4314 <arrttointeger+0x10e>
    snum+=arr[i];
 }
 return snum;
    436c:	8f 81       	ldd	r24, Y+7	; 0x07
    436e:	98 85       	ldd	r25, Y+8	; 0x08
    4370:	aa 27       	eor	r26, r26
    4372:	97 fd       	sbrc	r25, 7
    4374:	a0 95       	com	r26
    4376:	ba 2f       	mov	r27, r26
}
    4378:	bc 01       	movw	r22, r24
    437a:	cd 01       	movw	r24, r26
    437c:	2e 96       	adiw	r28, 0x0e	; 14
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	1f 91       	pop	r17
    438e:	0f 91       	pop	r16
    4390:	ff 90       	pop	r15
    4392:	ef 90       	pop	r14
    4394:	08 95       	ret

00004396 <__mulsi3>:
    4396:	62 9f       	mul	r22, r18
    4398:	d0 01       	movw	r26, r0
    439a:	73 9f       	mul	r23, r19
    439c:	f0 01       	movw	r30, r0
    439e:	82 9f       	mul	r24, r18
    43a0:	e0 0d       	add	r30, r0
    43a2:	f1 1d       	adc	r31, r1
    43a4:	64 9f       	mul	r22, r20
    43a6:	e0 0d       	add	r30, r0
    43a8:	f1 1d       	adc	r31, r1
    43aa:	92 9f       	mul	r25, r18
    43ac:	f0 0d       	add	r31, r0
    43ae:	83 9f       	mul	r24, r19
    43b0:	f0 0d       	add	r31, r0
    43b2:	74 9f       	mul	r23, r20
    43b4:	f0 0d       	add	r31, r0
    43b6:	65 9f       	mul	r22, r21
    43b8:	f0 0d       	add	r31, r0
    43ba:	99 27       	eor	r25, r25
    43bc:	72 9f       	mul	r23, r18
    43be:	b0 0d       	add	r27, r0
    43c0:	e1 1d       	adc	r30, r1
    43c2:	f9 1f       	adc	r31, r25
    43c4:	63 9f       	mul	r22, r19
    43c6:	b0 0d       	add	r27, r0
    43c8:	e1 1d       	adc	r30, r1
    43ca:	f9 1f       	adc	r31, r25
    43cc:	bd 01       	movw	r22, r26
    43ce:	cf 01       	movw	r24, r30
    43d0:	11 24       	eor	r1, r1
    43d2:	08 95       	ret

000043d4 <__divmodhi4>:
    43d4:	97 fb       	bst	r25, 7
    43d6:	09 2e       	mov	r0, r25
    43d8:	07 26       	eor	r0, r23
    43da:	0a d0       	rcall	.+20     	; 0x43f0 <__divmodhi4_neg1>
    43dc:	77 fd       	sbrc	r23, 7
    43de:	04 d0       	rcall	.+8      	; 0x43e8 <__divmodhi4_neg2>
    43e0:	2e d0       	rcall	.+92     	; 0x443e <__udivmodhi4>
    43e2:	06 d0       	rcall	.+12     	; 0x43f0 <__divmodhi4_neg1>
    43e4:	00 20       	and	r0, r0
    43e6:	1a f4       	brpl	.+6      	; 0x43ee <__divmodhi4_exit>

000043e8 <__divmodhi4_neg2>:
    43e8:	70 95       	com	r23
    43ea:	61 95       	neg	r22
    43ec:	7f 4f       	sbci	r23, 0xFF	; 255

000043ee <__divmodhi4_exit>:
    43ee:	08 95       	ret

000043f0 <__divmodhi4_neg1>:
    43f0:	f6 f7       	brtc	.-4      	; 0x43ee <__divmodhi4_exit>
    43f2:	90 95       	com	r25
    43f4:	81 95       	neg	r24
    43f6:	9f 4f       	sbci	r25, 0xFF	; 255
    43f8:	08 95       	ret

000043fa <__udivmodsi4>:
    43fa:	a1 e2       	ldi	r26, 0x21	; 33
    43fc:	1a 2e       	mov	r1, r26
    43fe:	aa 1b       	sub	r26, r26
    4400:	bb 1b       	sub	r27, r27
    4402:	fd 01       	movw	r30, r26
    4404:	0d c0       	rjmp	.+26     	; 0x4420 <__udivmodsi4_ep>

00004406 <__udivmodsi4_loop>:
    4406:	aa 1f       	adc	r26, r26
    4408:	bb 1f       	adc	r27, r27
    440a:	ee 1f       	adc	r30, r30
    440c:	ff 1f       	adc	r31, r31
    440e:	a2 17       	cp	r26, r18
    4410:	b3 07       	cpc	r27, r19
    4412:	e4 07       	cpc	r30, r20
    4414:	f5 07       	cpc	r31, r21
    4416:	20 f0       	brcs	.+8      	; 0x4420 <__udivmodsi4_ep>
    4418:	a2 1b       	sub	r26, r18
    441a:	b3 0b       	sbc	r27, r19
    441c:	e4 0b       	sbc	r30, r20
    441e:	f5 0b       	sbc	r31, r21

00004420 <__udivmodsi4_ep>:
    4420:	66 1f       	adc	r22, r22
    4422:	77 1f       	adc	r23, r23
    4424:	88 1f       	adc	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	1a 94       	dec	r1
    442a:	69 f7       	brne	.-38     	; 0x4406 <__udivmodsi4_loop>
    442c:	60 95       	com	r22
    442e:	70 95       	com	r23
    4430:	80 95       	com	r24
    4432:	90 95       	com	r25
    4434:	9b 01       	movw	r18, r22
    4436:	ac 01       	movw	r20, r24
    4438:	bd 01       	movw	r22, r26
    443a:	cf 01       	movw	r24, r30
    443c:	08 95       	ret

0000443e <__udivmodhi4>:
    443e:	aa 1b       	sub	r26, r26
    4440:	bb 1b       	sub	r27, r27
    4442:	51 e1       	ldi	r21, 0x11	; 17
    4444:	07 c0       	rjmp	.+14     	; 0x4454 <__udivmodhi4_ep>

00004446 <__udivmodhi4_loop>:
    4446:	aa 1f       	adc	r26, r26
    4448:	bb 1f       	adc	r27, r27
    444a:	a6 17       	cp	r26, r22
    444c:	b7 07       	cpc	r27, r23
    444e:	10 f0       	brcs	.+4      	; 0x4454 <__udivmodhi4_ep>
    4450:	a6 1b       	sub	r26, r22
    4452:	b7 0b       	sbc	r27, r23

00004454 <__udivmodhi4_ep>:
    4454:	88 1f       	adc	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	5a 95       	dec	r21
    445a:	a9 f7       	brne	.-22     	; 0x4446 <__udivmodhi4_loop>
    445c:	80 95       	com	r24
    445e:	90 95       	com	r25
    4460:	bc 01       	movw	r22, r24
    4462:	cd 01       	movw	r24, r26
    4464:	08 95       	ret

00004466 <__prologue_saves__>:
    4466:	2f 92       	push	r2
    4468:	3f 92       	push	r3
    446a:	4f 92       	push	r4
    446c:	5f 92       	push	r5
    446e:	6f 92       	push	r6
    4470:	7f 92       	push	r7
    4472:	8f 92       	push	r8
    4474:	9f 92       	push	r9
    4476:	af 92       	push	r10
    4478:	bf 92       	push	r11
    447a:	cf 92       	push	r12
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	cd b7       	in	r28, 0x3d	; 61
    448c:	de b7       	in	r29, 0x3e	; 62
    448e:	ca 1b       	sub	r28, r26
    4490:	db 0b       	sbc	r29, r27
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	09 94       	ijmp

0000449e <__epilogue_restores__>:
    449e:	2a 88       	ldd	r2, Y+18	; 0x12
    44a0:	39 88       	ldd	r3, Y+17	; 0x11
    44a2:	48 88       	ldd	r4, Y+16	; 0x10
    44a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    44a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    44a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    44aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    44ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    44ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    44b0:	b9 84       	ldd	r11, Y+9	; 0x09
    44b2:	c8 84       	ldd	r12, Y+8	; 0x08
    44b4:	df 80       	ldd	r13, Y+7	; 0x07
    44b6:	ee 80       	ldd	r14, Y+6	; 0x06
    44b8:	fd 80       	ldd	r15, Y+5	; 0x05
    44ba:	0c 81       	ldd	r16, Y+4	; 0x04
    44bc:	1b 81       	ldd	r17, Y+3	; 0x03
    44be:	aa 81       	ldd	r26, Y+2	; 0x02
    44c0:	b9 81       	ldd	r27, Y+1	; 0x01
    44c2:	ce 0f       	add	r28, r30
    44c4:	d1 1d       	adc	r29, r1
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	ed 01       	movw	r28, r26
    44d2:	08 95       	ret

000044d4 <sprintf>:
    44d4:	ae e0       	ldi	r26, 0x0E	; 14
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	e0 e7       	ldi	r30, 0x70	; 112
    44da:	f2 e2       	ldi	r31, 0x22	; 34
    44dc:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__prologue_saves__+0x1c>
    44e0:	0d 89       	ldd	r16, Y+21	; 0x15
    44e2:	1e 89       	ldd	r17, Y+22	; 0x16
    44e4:	86 e0       	ldi	r24, 0x06	; 6
    44e6:	8c 83       	std	Y+4, r24	; 0x04
    44e8:	1a 83       	std	Y+2, r17	; 0x02
    44ea:	09 83       	std	Y+1, r16	; 0x01
    44ec:	8f ef       	ldi	r24, 0xFF	; 255
    44ee:	9f e7       	ldi	r25, 0x7F	; 127
    44f0:	9e 83       	std	Y+6, r25	; 0x06
    44f2:	8d 83       	std	Y+5, r24	; 0x05
    44f4:	9e 01       	movw	r18, r28
    44f6:	27 5e       	subi	r18, 0xE7	; 231
    44f8:	3f 4f       	sbci	r19, 0xFF	; 255
    44fa:	ce 01       	movw	r24, r28
    44fc:	01 96       	adiw	r24, 0x01	; 1
    44fe:	6f 89       	ldd	r22, Y+23	; 0x17
    4500:	78 8d       	ldd	r23, Y+24	; 0x18
    4502:	a9 01       	movw	r20, r18
    4504:	0e 94 8e 22 	call	0x451c	; 0x451c <vfprintf>
    4508:	2f 81       	ldd	r18, Y+7	; 0x07
    450a:	38 85       	ldd	r19, Y+8	; 0x08
    450c:	02 0f       	add	r16, r18
    450e:	13 1f       	adc	r17, r19
    4510:	f8 01       	movw	r30, r16
    4512:	10 82       	st	Z, r1
    4514:	2e 96       	adiw	r28, 0x0e	; 14
    4516:	e4 e0       	ldi	r30, 0x04	; 4
    4518:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <__epilogue_restores__+0x1c>

0000451c <vfprintf>:
    451c:	ab e0       	ldi	r26, 0x0B	; 11
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e4 e9       	ldi	r30, 0x94	; 148
    4522:	f2 e2       	ldi	r31, 0x22	; 34
    4524:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__prologue_saves__>
    4528:	3c 01       	movw	r6, r24
    452a:	2b 01       	movw	r4, r22
    452c:	5a 01       	movw	r10, r20
    452e:	fc 01       	movw	r30, r24
    4530:	17 82       	std	Z+7, r1	; 0x07
    4532:	16 82       	std	Z+6, r1	; 0x06
    4534:	83 81       	ldd	r24, Z+3	; 0x03
    4536:	81 fd       	sbrc	r24, 1
    4538:	03 c0       	rjmp	.+6      	; 0x4540 <vfprintf+0x24>
    453a:	6f ef       	ldi	r22, 0xFF	; 255
    453c:	7f ef       	ldi	r23, 0xFF	; 255
    453e:	c6 c1       	rjmp	.+908    	; 0x48cc <vfprintf+0x3b0>
    4540:	9a e0       	ldi	r25, 0x0A	; 10
    4542:	89 2e       	mov	r8, r25
    4544:	1e 01       	movw	r2, r28
    4546:	08 94       	sec
    4548:	21 1c       	adc	r2, r1
    454a:	31 1c       	adc	r3, r1
    454c:	f3 01       	movw	r30, r6
    454e:	23 81       	ldd	r18, Z+3	; 0x03
    4550:	f2 01       	movw	r30, r4
    4552:	23 fd       	sbrc	r18, 3
    4554:	85 91       	lpm	r24, Z+
    4556:	23 ff       	sbrs	r18, 3
    4558:	81 91       	ld	r24, Z+
    455a:	2f 01       	movw	r4, r30
    455c:	88 23       	and	r24, r24
    455e:	09 f4       	brne	.+2      	; 0x4562 <vfprintf+0x46>
    4560:	b2 c1       	rjmp	.+868    	; 0x48c6 <vfprintf+0x3aa>
    4562:	85 32       	cpi	r24, 0x25	; 37
    4564:	39 f4       	brne	.+14     	; 0x4574 <vfprintf+0x58>
    4566:	23 fd       	sbrc	r18, 3
    4568:	85 91       	lpm	r24, Z+
    456a:	23 ff       	sbrs	r18, 3
    456c:	81 91       	ld	r24, Z+
    456e:	2f 01       	movw	r4, r30
    4570:	85 32       	cpi	r24, 0x25	; 37
    4572:	29 f4       	brne	.+10     	; 0x457e <vfprintf+0x62>
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	b3 01       	movw	r22, r6
    4578:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    457c:	e7 cf       	rjmp	.-50     	; 0x454c <vfprintf+0x30>
    457e:	98 2f       	mov	r25, r24
    4580:	ff 24       	eor	r15, r15
    4582:	ee 24       	eor	r14, r14
    4584:	99 24       	eor	r9, r9
    4586:	ff e1       	ldi	r31, 0x1F	; 31
    4588:	ff 15       	cp	r31, r15
    458a:	d0 f0       	brcs	.+52     	; 0x45c0 <vfprintf+0xa4>
    458c:	9b 32       	cpi	r25, 0x2B	; 43
    458e:	69 f0       	breq	.+26     	; 0x45aa <vfprintf+0x8e>
    4590:	9c 32       	cpi	r25, 0x2C	; 44
    4592:	28 f4       	brcc	.+10     	; 0x459e <vfprintf+0x82>
    4594:	90 32       	cpi	r25, 0x20	; 32
    4596:	59 f0       	breq	.+22     	; 0x45ae <vfprintf+0x92>
    4598:	93 32       	cpi	r25, 0x23	; 35
    459a:	91 f4       	brne	.+36     	; 0x45c0 <vfprintf+0xa4>
    459c:	0e c0       	rjmp	.+28     	; 0x45ba <vfprintf+0x9e>
    459e:	9d 32       	cpi	r25, 0x2D	; 45
    45a0:	49 f0       	breq	.+18     	; 0x45b4 <vfprintf+0x98>
    45a2:	90 33       	cpi	r25, 0x30	; 48
    45a4:	69 f4       	brne	.+26     	; 0x45c0 <vfprintf+0xa4>
    45a6:	41 e0       	ldi	r20, 0x01	; 1
    45a8:	24 c0       	rjmp	.+72     	; 0x45f2 <vfprintf+0xd6>
    45aa:	52 e0       	ldi	r21, 0x02	; 2
    45ac:	f5 2a       	or	r15, r21
    45ae:	84 e0       	ldi	r24, 0x04	; 4
    45b0:	f8 2a       	or	r15, r24
    45b2:	28 c0       	rjmp	.+80     	; 0x4604 <vfprintf+0xe8>
    45b4:	98 e0       	ldi	r25, 0x08	; 8
    45b6:	f9 2a       	or	r15, r25
    45b8:	25 c0       	rjmp	.+74     	; 0x4604 <vfprintf+0xe8>
    45ba:	e0 e1       	ldi	r30, 0x10	; 16
    45bc:	fe 2a       	or	r15, r30
    45be:	22 c0       	rjmp	.+68     	; 0x4604 <vfprintf+0xe8>
    45c0:	f7 fc       	sbrc	r15, 7
    45c2:	29 c0       	rjmp	.+82     	; 0x4616 <vfprintf+0xfa>
    45c4:	89 2f       	mov	r24, r25
    45c6:	80 53       	subi	r24, 0x30	; 48
    45c8:	8a 30       	cpi	r24, 0x0A	; 10
    45ca:	70 f4       	brcc	.+28     	; 0x45e8 <vfprintf+0xcc>
    45cc:	f6 fe       	sbrs	r15, 6
    45ce:	05 c0       	rjmp	.+10     	; 0x45da <vfprintf+0xbe>
    45d0:	98 9c       	mul	r9, r8
    45d2:	90 2c       	mov	r9, r0
    45d4:	11 24       	eor	r1, r1
    45d6:	98 0e       	add	r9, r24
    45d8:	15 c0       	rjmp	.+42     	; 0x4604 <vfprintf+0xe8>
    45da:	e8 9c       	mul	r14, r8
    45dc:	e0 2c       	mov	r14, r0
    45de:	11 24       	eor	r1, r1
    45e0:	e8 0e       	add	r14, r24
    45e2:	f0 e2       	ldi	r31, 0x20	; 32
    45e4:	ff 2a       	or	r15, r31
    45e6:	0e c0       	rjmp	.+28     	; 0x4604 <vfprintf+0xe8>
    45e8:	9e 32       	cpi	r25, 0x2E	; 46
    45ea:	29 f4       	brne	.+10     	; 0x45f6 <vfprintf+0xda>
    45ec:	f6 fc       	sbrc	r15, 6
    45ee:	6b c1       	rjmp	.+726    	; 0x48c6 <vfprintf+0x3aa>
    45f0:	40 e4       	ldi	r20, 0x40	; 64
    45f2:	f4 2a       	or	r15, r20
    45f4:	07 c0       	rjmp	.+14     	; 0x4604 <vfprintf+0xe8>
    45f6:	9c 36       	cpi	r25, 0x6C	; 108
    45f8:	19 f4       	brne	.+6      	; 0x4600 <vfprintf+0xe4>
    45fa:	50 e8       	ldi	r21, 0x80	; 128
    45fc:	f5 2a       	or	r15, r21
    45fe:	02 c0       	rjmp	.+4      	; 0x4604 <vfprintf+0xe8>
    4600:	98 36       	cpi	r25, 0x68	; 104
    4602:	49 f4       	brne	.+18     	; 0x4616 <vfprintf+0xfa>
    4604:	f2 01       	movw	r30, r4
    4606:	23 fd       	sbrc	r18, 3
    4608:	95 91       	lpm	r25, Z+
    460a:	23 ff       	sbrs	r18, 3
    460c:	91 91       	ld	r25, Z+
    460e:	2f 01       	movw	r4, r30
    4610:	99 23       	and	r25, r25
    4612:	09 f0       	breq	.+2      	; 0x4616 <vfprintf+0xfa>
    4614:	b8 cf       	rjmp	.-144    	; 0x4586 <vfprintf+0x6a>
    4616:	89 2f       	mov	r24, r25
    4618:	85 54       	subi	r24, 0x45	; 69
    461a:	83 30       	cpi	r24, 0x03	; 3
    461c:	18 f0       	brcs	.+6      	; 0x4624 <vfprintf+0x108>
    461e:	80 52       	subi	r24, 0x20	; 32
    4620:	83 30       	cpi	r24, 0x03	; 3
    4622:	38 f4       	brcc	.+14     	; 0x4632 <vfprintf+0x116>
    4624:	44 e0       	ldi	r20, 0x04	; 4
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	a4 0e       	add	r10, r20
    462a:	b5 1e       	adc	r11, r21
    462c:	5f e3       	ldi	r21, 0x3F	; 63
    462e:	59 83       	std	Y+1, r21	; 0x01
    4630:	0f c0       	rjmp	.+30     	; 0x4650 <vfprintf+0x134>
    4632:	93 36       	cpi	r25, 0x63	; 99
    4634:	31 f0       	breq	.+12     	; 0x4642 <vfprintf+0x126>
    4636:	93 37       	cpi	r25, 0x73	; 115
    4638:	79 f0       	breq	.+30     	; 0x4658 <vfprintf+0x13c>
    463a:	93 35       	cpi	r25, 0x53	; 83
    463c:	09 f0       	breq	.+2      	; 0x4640 <vfprintf+0x124>
    463e:	56 c0       	rjmp	.+172    	; 0x46ec <vfprintf+0x1d0>
    4640:	20 c0       	rjmp	.+64     	; 0x4682 <vfprintf+0x166>
    4642:	f5 01       	movw	r30, r10
    4644:	80 81       	ld	r24, Z
    4646:	89 83       	std	Y+1, r24	; 0x01
    4648:	42 e0       	ldi	r20, 0x02	; 2
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	a4 0e       	add	r10, r20
    464e:	b5 1e       	adc	r11, r21
    4650:	61 01       	movw	r12, r2
    4652:	01 e0       	ldi	r16, 0x01	; 1
    4654:	10 e0       	ldi	r17, 0x00	; 0
    4656:	12 c0       	rjmp	.+36     	; 0x467c <vfprintf+0x160>
    4658:	f5 01       	movw	r30, r10
    465a:	c0 80       	ld	r12, Z
    465c:	d1 80       	ldd	r13, Z+1	; 0x01
    465e:	f6 fc       	sbrc	r15, 6
    4660:	03 c0       	rjmp	.+6      	; 0x4668 <vfprintf+0x14c>
    4662:	6f ef       	ldi	r22, 0xFF	; 255
    4664:	7f ef       	ldi	r23, 0xFF	; 255
    4666:	02 c0       	rjmp	.+4      	; 0x466c <vfprintf+0x150>
    4668:	69 2d       	mov	r22, r9
    466a:	70 e0       	ldi	r23, 0x00	; 0
    466c:	42 e0       	ldi	r20, 0x02	; 2
    466e:	50 e0       	ldi	r21, 0x00	; 0
    4670:	a4 0e       	add	r10, r20
    4672:	b5 1e       	adc	r11, r21
    4674:	c6 01       	movw	r24, r12
    4676:	0e 94 76 24 	call	0x48ec	; 0x48ec <strnlen>
    467a:	8c 01       	movw	r16, r24
    467c:	5f e7       	ldi	r21, 0x7F	; 127
    467e:	f5 22       	and	r15, r21
    4680:	14 c0       	rjmp	.+40     	; 0x46aa <vfprintf+0x18e>
    4682:	f5 01       	movw	r30, r10
    4684:	c0 80       	ld	r12, Z
    4686:	d1 80       	ldd	r13, Z+1	; 0x01
    4688:	f6 fc       	sbrc	r15, 6
    468a:	03 c0       	rjmp	.+6      	; 0x4692 <vfprintf+0x176>
    468c:	6f ef       	ldi	r22, 0xFF	; 255
    468e:	7f ef       	ldi	r23, 0xFF	; 255
    4690:	02 c0       	rjmp	.+4      	; 0x4696 <vfprintf+0x17a>
    4692:	69 2d       	mov	r22, r9
    4694:	70 e0       	ldi	r23, 0x00	; 0
    4696:	42 e0       	ldi	r20, 0x02	; 2
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	a4 0e       	add	r10, r20
    469c:	b5 1e       	adc	r11, r21
    469e:	c6 01       	movw	r24, r12
    46a0:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <strnlen_P>
    46a4:	8c 01       	movw	r16, r24
    46a6:	50 e8       	ldi	r21, 0x80	; 128
    46a8:	f5 2a       	or	r15, r21
    46aa:	f3 fe       	sbrs	r15, 3
    46ac:	07 c0       	rjmp	.+14     	; 0x46bc <vfprintf+0x1a0>
    46ae:	1a c0       	rjmp	.+52     	; 0x46e4 <vfprintf+0x1c8>
    46b0:	80 e2       	ldi	r24, 0x20	; 32
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	b3 01       	movw	r22, r6
    46b6:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    46ba:	ea 94       	dec	r14
    46bc:	8e 2d       	mov	r24, r14
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	08 17       	cp	r16, r24
    46c2:	19 07       	cpc	r17, r25
    46c4:	a8 f3       	brcs	.-22     	; 0x46b0 <vfprintf+0x194>
    46c6:	0e c0       	rjmp	.+28     	; 0x46e4 <vfprintf+0x1c8>
    46c8:	f6 01       	movw	r30, r12
    46ca:	f7 fc       	sbrc	r15, 7
    46cc:	85 91       	lpm	r24, Z+
    46ce:	f7 fe       	sbrs	r15, 7
    46d0:	81 91       	ld	r24, Z+
    46d2:	6f 01       	movw	r12, r30
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	b3 01       	movw	r22, r6
    46d8:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    46dc:	e1 10       	cpse	r14, r1
    46de:	ea 94       	dec	r14
    46e0:	01 50       	subi	r16, 0x01	; 1
    46e2:	10 40       	sbci	r17, 0x00	; 0
    46e4:	01 15       	cp	r16, r1
    46e6:	11 05       	cpc	r17, r1
    46e8:	79 f7       	brne	.-34     	; 0x46c8 <vfprintf+0x1ac>
    46ea:	ea c0       	rjmp	.+468    	; 0x48c0 <vfprintf+0x3a4>
    46ec:	94 36       	cpi	r25, 0x64	; 100
    46ee:	11 f0       	breq	.+4      	; 0x46f4 <vfprintf+0x1d8>
    46f0:	99 36       	cpi	r25, 0x69	; 105
    46f2:	69 f5       	brne	.+90     	; 0x474e <vfprintf+0x232>
    46f4:	f7 fe       	sbrs	r15, 7
    46f6:	08 c0       	rjmp	.+16     	; 0x4708 <vfprintf+0x1ec>
    46f8:	f5 01       	movw	r30, r10
    46fa:	20 81       	ld	r18, Z
    46fc:	31 81       	ldd	r19, Z+1	; 0x01
    46fe:	42 81       	ldd	r20, Z+2	; 0x02
    4700:	53 81       	ldd	r21, Z+3	; 0x03
    4702:	84 e0       	ldi	r24, 0x04	; 4
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	0a c0       	rjmp	.+20     	; 0x471c <vfprintf+0x200>
    4708:	f5 01       	movw	r30, r10
    470a:	80 81       	ld	r24, Z
    470c:	91 81       	ldd	r25, Z+1	; 0x01
    470e:	9c 01       	movw	r18, r24
    4710:	44 27       	eor	r20, r20
    4712:	37 fd       	sbrc	r19, 7
    4714:	40 95       	com	r20
    4716:	54 2f       	mov	r21, r20
    4718:	82 e0       	ldi	r24, 0x02	; 2
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	a8 0e       	add	r10, r24
    471e:	b9 1e       	adc	r11, r25
    4720:	9f e6       	ldi	r25, 0x6F	; 111
    4722:	f9 22       	and	r15, r25
    4724:	57 ff       	sbrs	r21, 7
    4726:	09 c0       	rjmp	.+18     	; 0x473a <vfprintf+0x21e>
    4728:	50 95       	com	r21
    472a:	40 95       	com	r20
    472c:	30 95       	com	r19
    472e:	21 95       	neg	r18
    4730:	3f 4f       	sbci	r19, 0xFF	; 255
    4732:	4f 4f       	sbci	r20, 0xFF	; 255
    4734:	5f 4f       	sbci	r21, 0xFF	; 255
    4736:	e0 e8       	ldi	r30, 0x80	; 128
    4738:	fe 2a       	or	r15, r30
    473a:	ca 01       	movw	r24, r20
    473c:	b9 01       	movw	r22, r18
    473e:	a1 01       	movw	r20, r2
    4740:	2a e0       	ldi	r18, 0x0A	; 10
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	0e 94 ad 24 	call	0x495a	; 0x495a <__ultoa_invert>
    4748:	d8 2e       	mov	r13, r24
    474a:	d2 18       	sub	r13, r2
    474c:	40 c0       	rjmp	.+128    	; 0x47ce <vfprintf+0x2b2>
    474e:	95 37       	cpi	r25, 0x75	; 117
    4750:	29 f4       	brne	.+10     	; 0x475c <vfprintf+0x240>
    4752:	1f 2d       	mov	r17, r15
    4754:	1f 7e       	andi	r17, 0xEF	; 239
    4756:	2a e0       	ldi	r18, 0x0A	; 10
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	1d c0       	rjmp	.+58     	; 0x4796 <vfprintf+0x27a>
    475c:	1f 2d       	mov	r17, r15
    475e:	19 7f       	andi	r17, 0xF9	; 249
    4760:	9f 36       	cpi	r25, 0x6F	; 111
    4762:	61 f0       	breq	.+24     	; 0x477c <vfprintf+0x260>
    4764:	90 37       	cpi	r25, 0x70	; 112
    4766:	20 f4       	brcc	.+8      	; 0x4770 <vfprintf+0x254>
    4768:	98 35       	cpi	r25, 0x58	; 88
    476a:	09 f0       	breq	.+2      	; 0x476e <vfprintf+0x252>
    476c:	ac c0       	rjmp	.+344    	; 0x48c6 <vfprintf+0x3aa>
    476e:	0f c0       	rjmp	.+30     	; 0x478e <vfprintf+0x272>
    4770:	90 37       	cpi	r25, 0x70	; 112
    4772:	39 f0       	breq	.+14     	; 0x4782 <vfprintf+0x266>
    4774:	98 37       	cpi	r25, 0x78	; 120
    4776:	09 f0       	breq	.+2      	; 0x477a <vfprintf+0x25e>
    4778:	a6 c0       	rjmp	.+332    	; 0x48c6 <vfprintf+0x3aa>
    477a:	04 c0       	rjmp	.+8      	; 0x4784 <vfprintf+0x268>
    477c:	28 e0       	ldi	r18, 0x08	; 8
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	0a c0       	rjmp	.+20     	; 0x4796 <vfprintf+0x27a>
    4782:	10 61       	ori	r17, 0x10	; 16
    4784:	14 fd       	sbrc	r17, 4
    4786:	14 60       	ori	r17, 0x04	; 4
    4788:	20 e1       	ldi	r18, 0x10	; 16
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	04 c0       	rjmp	.+8      	; 0x4796 <vfprintf+0x27a>
    478e:	14 fd       	sbrc	r17, 4
    4790:	16 60       	ori	r17, 0x06	; 6
    4792:	20 e1       	ldi	r18, 0x10	; 16
    4794:	32 e0       	ldi	r19, 0x02	; 2
    4796:	17 ff       	sbrs	r17, 7
    4798:	08 c0       	rjmp	.+16     	; 0x47aa <vfprintf+0x28e>
    479a:	f5 01       	movw	r30, r10
    479c:	60 81       	ld	r22, Z
    479e:	71 81       	ldd	r23, Z+1	; 0x01
    47a0:	82 81       	ldd	r24, Z+2	; 0x02
    47a2:	93 81       	ldd	r25, Z+3	; 0x03
    47a4:	44 e0       	ldi	r20, 0x04	; 4
    47a6:	50 e0       	ldi	r21, 0x00	; 0
    47a8:	08 c0       	rjmp	.+16     	; 0x47ba <vfprintf+0x29e>
    47aa:	f5 01       	movw	r30, r10
    47ac:	80 81       	ld	r24, Z
    47ae:	91 81       	ldd	r25, Z+1	; 0x01
    47b0:	bc 01       	movw	r22, r24
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	42 e0       	ldi	r20, 0x02	; 2
    47b8:	50 e0       	ldi	r21, 0x00	; 0
    47ba:	a4 0e       	add	r10, r20
    47bc:	b5 1e       	adc	r11, r21
    47be:	a1 01       	movw	r20, r2
    47c0:	0e 94 ad 24 	call	0x495a	; 0x495a <__ultoa_invert>
    47c4:	d8 2e       	mov	r13, r24
    47c6:	d2 18       	sub	r13, r2
    47c8:	8f e7       	ldi	r24, 0x7F	; 127
    47ca:	f8 2e       	mov	r15, r24
    47cc:	f1 22       	and	r15, r17
    47ce:	f6 fe       	sbrs	r15, 6
    47d0:	0b c0       	rjmp	.+22     	; 0x47e8 <vfprintf+0x2cc>
    47d2:	5e ef       	ldi	r21, 0xFE	; 254
    47d4:	f5 22       	and	r15, r21
    47d6:	d9 14       	cp	r13, r9
    47d8:	38 f4       	brcc	.+14     	; 0x47e8 <vfprintf+0x2cc>
    47da:	f4 fe       	sbrs	r15, 4
    47dc:	07 c0       	rjmp	.+14     	; 0x47ec <vfprintf+0x2d0>
    47de:	f2 fc       	sbrc	r15, 2
    47e0:	05 c0       	rjmp	.+10     	; 0x47ec <vfprintf+0x2d0>
    47e2:	8f ee       	ldi	r24, 0xEF	; 239
    47e4:	f8 22       	and	r15, r24
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <vfprintf+0x2d0>
    47e8:	1d 2d       	mov	r17, r13
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <vfprintf+0x2d2>
    47ec:	19 2d       	mov	r17, r9
    47ee:	f4 fe       	sbrs	r15, 4
    47f0:	0d c0       	rjmp	.+26     	; 0x480c <vfprintf+0x2f0>
    47f2:	fe 01       	movw	r30, r28
    47f4:	ed 0d       	add	r30, r13
    47f6:	f1 1d       	adc	r31, r1
    47f8:	80 81       	ld	r24, Z
    47fa:	80 33       	cpi	r24, 0x30	; 48
    47fc:	19 f4       	brne	.+6      	; 0x4804 <vfprintf+0x2e8>
    47fe:	99 ee       	ldi	r25, 0xE9	; 233
    4800:	f9 22       	and	r15, r25
    4802:	08 c0       	rjmp	.+16     	; 0x4814 <vfprintf+0x2f8>
    4804:	1f 5f       	subi	r17, 0xFF	; 255
    4806:	f2 fe       	sbrs	r15, 2
    4808:	05 c0       	rjmp	.+10     	; 0x4814 <vfprintf+0x2f8>
    480a:	03 c0       	rjmp	.+6      	; 0x4812 <vfprintf+0x2f6>
    480c:	8f 2d       	mov	r24, r15
    480e:	86 78       	andi	r24, 0x86	; 134
    4810:	09 f0       	breq	.+2      	; 0x4814 <vfprintf+0x2f8>
    4812:	1f 5f       	subi	r17, 0xFF	; 255
    4814:	0f 2d       	mov	r16, r15
    4816:	f3 fc       	sbrc	r15, 3
    4818:	14 c0       	rjmp	.+40     	; 0x4842 <vfprintf+0x326>
    481a:	f0 fe       	sbrs	r15, 0
    481c:	0f c0       	rjmp	.+30     	; 0x483c <vfprintf+0x320>
    481e:	1e 15       	cp	r17, r14
    4820:	10 f0       	brcs	.+4      	; 0x4826 <vfprintf+0x30a>
    4822:	9d 2c       	mov	r9, r13
    4824:	0b c0       	rjmp	.+22     	; 0x483c <vfprintf+0x320>
    4826:	9d 2c       	mov	r9, r13
    4828:	9e 0c       	add	r9, r14
    482a:	91 1a       	sub	r9, r17
    482c:	1e 2d       	mov	r17, r14
    482e:	06 c0       	rjmp	.+12     	; 0x483c <vfprintf+0x320>
    4830:	80 e2       	ldi	r24, 0x20	; 32
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	b3 01       	movw	r22, r6
    4836:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    483a:	1f 5f       	subi	r17, 0xFF	; 255
    483c:	1e 15       	cp	r17, r14
    483e:	c0 f3       	brcs	.-16     	; 0x4830 <vfprintf+0x314>
    4840:	04 c0       	rjmp	.+8      	; 0x484a <vfprintf+0x32e>
    4842:	1e 15       	cp	r17, r14
    4844:	10 f4       	brcc	.+4      	; 0x484a <vfprintf+0x32e>
    4846:	e1 1a       	sub	r14, r17
    4848:	01 c0       	rjmp	.+2      	; 0x484c <vfprintf+0x330>
    484a:	ee 24       	eor	r14, r14
    484c:	04 ff       	sbrs	r16, 4
    484e:	0f c0       	rjmp	.+30     	; 0x486e <vfprintf+0x352>
    4850:	80 e3       	ldi	r24, 0x30	; 48
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	b3 01       	movw	r22, r6
    4856:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    485a:	02 ff       	sbrs	r16, 2
    485c:	1d c0       	rjmp	.+58     	; 0x4898 <vfprintf+0x37c>
    485e:	01 fd       	sbrc	r16, 1
    4860:	03 c0       	rjmp	.+6      	; 0x4868 <vfprintf+0x34c>
    4862:	88 e7       	ldi	r24, 0x78	; 120
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e c0       	rjmp	.+28     	; 0x4884 <vfprintf+0x368>
    4868:	88 e5       	ldi	r24, 0x58	; 88
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0b c0       	rjmp	.+22     	; 0x4884 <vfprintf+0x368>
    486e:	80 2f       	mov	r24, r16
    4870:	86 78       	andi	r24, 0x86	; 134
    4872:	91 f0       	breq	.+36     	; 0x4898 <vfprintf+0x37c>
    4874:	01 ff       	sbrs	r16, 1
    4876:	02 c0       	rjmp	.+4      	; 0x487c <vfprintf+0x360>
    4878:	8b e2       	ldi	r24, 0x2B	; 43
    487a:	01 c0       	rjmp	.+2      	; 0x487e <vfprintf+0x362>
    487c:	80 e2       	ldi	r24, 0x20	; 32
    487e:	f7 fc       	sbrc	r15, 7
    4880:	8d e2       	ldi	r24, 0x2D	; 45
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	b3 01       	movw	r22, r6
    4886:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    488a:	06 c0       	rjmp	.+12     	; 0x4898 <vfprintf+0x37c>
    488c:	80 e3       	ldi	r24, 0x30	; 48
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	b3 01       	movw	r22, r6
    4892:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    4896:	9a 94       	dec	r9
    4898:	d9 14       	cp	r13, r9
    489a:	c0 f3       	brcs	.-16     	; 0x488c <vfprintf+0x370>
    489c:	da 94       	dec	r13
    489e:	f1 01       	movw	r30, r2
    48a0:	ed 0d       	add	r30, r13
    48a2:	f1 1d       	adc	r31, r1
    48a4:	80 81       	ld	r24, Z
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	b3 01       	movw	r22, r6
    48aa:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    48ae:	dd 20       	and	r13, r13
    48b0:	a9 f7       	brne	.-22     	; 0x489c <vfprintf+0x380>
    48b2:	06 c0       	rjmp	.+12     	; 0x48c0 <vfprintf+0x3a4>
    48b4:	80 e2       	ldi	r24, 0x20	; 32
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	b3 01       	movw	r22, r6
    48ba:	0e 94 81 24 	call	0x4902	; 0x4902 <fputc>
    48be:	ea 94       	dec	r14
    48c0:	ee 20       	and	r14, r14
    48c2:	c1 f7       	brne	.-16     	; 0x48b4 <vfprintf+0x398>
    48c4:	43 ce       	rjmp	.-890    	; 0x454c <vfprintf+0x30>
    48c6:	f3 01       	movw	r30, r6
    48c8:	66 81       	ldd	r22, Z+6	; 0x06
    48ca:	77 81       	ldd	r23, Z+7	; 0x07
    48cc:	cb 01       	movw	r24, r22
    48ce:	2b 96       	adiw	r28, 0x0b	; 11
    48d0:	e2 e1       	ldi	r30, 0x12	; 18
    48d2:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__epilogue_restores__>

000048d6 <strnlen_P>:
    48d6:	fc 01       	movw	r30, r24
    48d8:	05 90       	lpm	r0, Z+
    48da:	61 50       	subi	r22, 0x01	; 1
    48dc:	70 40       	sbci	r23, 0x00	; 0
    48de:	01 10       	cpse	r0, r1
    48e0:	d8 f7       	brcc	.-10     	; 0x48d8 <strnlen_P+0x2>
    48e2:	80 95       	com	r24
    48e4:	90 95       	com	r25
    48e6:	8e 0f       	add	r24, r30
    48e8:	9f 1f       	adc	r25, r31
    48ea:	08 95       	ret

000048ec <strnlen>:
    48ec:	fc 01       	movw	r30, r24
    48ee:	61 50       	subi	r22, 0x01	; 1
    48f0:	70 40       	sbci	r23, 0x00	; 0
    48f2:	01 90       	ld	r0, Z+
    48f4:	01 10       	cpse	r0, r1
    48f6:	d8 f7       	brcc	.-10     	; 0x48ee <strnlen+0x2>
    48f8:	80 95       	com	r24
    48fa:	90 95       	com	r25
    48fc:	8e 0f       	add	r24, r30
    48fe:	9f 1f       	adc	r25, r31
    4900:	08 95       	ret

00004902 <fputc>:
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	8c 01       	movw	r16, r24
    490c:	eb 01       	movw	r28, r22
    490e:	8b 81       	ldd	r24, Y+3	; 0x03
    4910:	81 ff       	sbrs	r24, 1
    4912:	1b c0       	rjmp	.+54     	; 0x494a <fputc+0x48>
    4914:	82 ff       	sbrs	r24, 2
    4916:	0d c0       	rjmp	.+26     	; 0x4932 <fputc+0x30>
    4918:	2e 81       	ldd	r18, Y+6	; 0x06
    491a:	3f 81       	ldd	r19, Y+7	; 0x07
    491c:	8c 81       	ldd	r24, Y+4	; 0x04
    491e:	9d 81       	ldd	r25, Y+5	; 0x05
    4920:	28 17       	cp	r18, r24
    4922:	39 07       	cpc	r19, r25
    4924:	64 f4       	brge	.+24     	; 0x493e <fputc+0x3c>
    4926:	e8 81       	ld	r30, Y
    4928:	f9 81       	ldd	r31, Y+1	; 0x01
    492a:	01 93       	st	Z+, r16
    492c:	f9 83       	std	Y+1, r31	; 0x01
    492e:	e8 83       	st	Y, r30
    4930:	06 c0       	rjmp	.+12     	; 0x493e <fputc+0x3c>
    4932:	e8 85       	ldd	r30, Y+8	; 0x08
    4934:	f9 85       	ldd	r31, Y+9	; 0x09
    4936:	80 2f       	mov	r24, r16
    4938:	09 95       	icall
    493a:	89 2b       	or	r24, r25
    493c:	31 f4       	brne	.+12     	; 0x494a <fputc+0x48>
    493e:	8e 81       	ldd	r24, Y+6	; 0x06
    4940:	9f 81       	ldd	r25, Y+7	; 0x07
    4942:	01 96       	adiw	r24, 0x01	; 1
    4944:	9f 83       	std	Y+7, r25	; 0x07
    4946:	8e 83       	std	Y+6, r24	; 0x06
    4948:	02 c0       	rjmp	.+4      	; 0x494e <fputc+0x4c>
    494a:	0f ef       	ldi	r16, 0xFF	; 255
    494c:	1f ef       	ldi	r17, 0xFF	; 255
    494e:	c8 01       	movw	r24, r16
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	1f 91       	pop	r17
    4956:	0f 91       	pop	r16
    4958:	08 95       	ret

0000495a <__ultoa_invert>:
    495a:	fa 01       	movw	r30, r20
    495c:	aa 27       	eor	r26, r26
    495e:	28 30       	cpi	r18, 0x08	; 8
    4960:	51 f1       	breq	.+84     	; 0x49b6 <__ultoa_invert+0x5c>
    4962:	20 31       	cpi	r18, 0x10	; 16
    4964:	81 f1       	breq	.+96     	; 0x49c6 <__ultoa_invert+0x6c>
    4966:	e8 94       	clt
    4968:	6f 93       	push	r22
    496a:	6e 7f       	andi	r22, 0xFE	; 254
    496c:	6e 5f       	subi	r22, 0xFE	; 254
    496e:	7f 4f       	sbci	r23, 0xFF	; 255
    4970:	8f 4f       	sbci	r24, 0xFF	; 255
    4972:	9f 4f       	sbci	r25, 0xFF	; 255
    4974:	af 4f       	sbci	r26, 0xFF	; 255
    4976:	b1 e0       	ldi	r27, 0x01	; 1
    4978:	3e d0       	rcall	.+124    	; 0x49f6 <__ultoa_invert+0x9c>
    497a:	b4 e0       	ldi	r27, 0x04	; 4
    497c:	3c d0       	rcall	.+120    	; 0x49f6 <__ultoa_invert+0x9c>
    497e:	67 0f       	add	r22, r23
    4980:	78 1f       	adc	r23, r24
    4982:	89 1f       	adc	r24, r25
    4984:	9a 1f       	adc	r25, r26
    4986:	a1 1d       	adc	r26, r1
    4988:	68 0f       	add	r22, r24
    498a:	79 1f       	adc	r23, r25
    498c:	8a 1f       	adc	r24, r26
    498e:	91 1d       	adc	r25, r1
    4990:	a1 1d       	adc	r26, r1
    4992:	6a 0f       	add	r22, r26
    4994:	71 1d       	adc	r23, r1
    4996:	81 1d       	adc	r24, r1
    4998:	91 1d       	adc	r25, r1
    499a:	a1 1d       	adc	r26, r1
    499c:	20 d0       	rcall	.+64     	; 0x49de <__ultoa_invert+0x84>
    499e:	09 f4       	brne	.+2      	; 0x49a2 <__ultoa_invert+0x48>
    49a0:	68 94       	set
    49a2:	3f 91       	pop	r19
    49a4:	2a e0       	ldi	r18, 0x0A	; 10
    49a6:	26 9f       	mul	r18, r22
    49a8:	11 24       	eor	r1, r1
    49aa:	30 19       	sub	r19, r0
    49ac:	30 5d       	subi	r19, 0xD0	; 208
    49ae:	31 93       	st	Z+, r19
    49b0:	de f6       	brtc	.-74     	; 0x4968 <__ultoa_invert+0xe>
    49b2:	cf 01       	movw	r24, r30
    49b4:	08 95       	ret
    49b6:	46 2f       	mov	r20, r22
    49b8:	47 70       	andi	r20, 0x07	; 7
    49ba:	40 5d       	subi	r20, 0xD0	; 208
    49bc:	41 93       	st	Z+, r20
    49be:	b3 e0       	ldi	r27, 0x03	; 3
    49c0:	0f d0       	rcall	.+30     	; 0x49e0 <__ultoa_invert+0x86>
    49c2:	c9 f7       	brne	.-14     	; 0x49b6 <__ultoa_invert+0x5c>
    49c4:	f6 cf       	rjmp	.-20     	; 0x49b2 <__ultoa_invert+0x58>
    49c6:	46 2f       	mov	r20, r22
    49c8:	4f 70       	andi	r20, 0x0F	; 15
    49ca:	40 5d       	subi	r20, 0xD0	; 208
    49cc:	4a 33       	cpi	r20, 0x3A	; 58
    49ce:	18 f0       	brcs	.+6      	; 0x49d6 <__ultoa_invert+0x7c>
    49d0:	49 5d       	subi	r20, 0xD9	; 217
    49d2:	31 fd       	sbrc	r19, 1
    49d4:	40 52       	subi	r20, 0x20	; 32
    49d6:	41 93       	st	Z+, r20
    49d8:	02 d0       	rcall	.+4      	; 0x49de <__ultoa_invert+0x84>
    49da:	a9 f7       	brne	.-22     	; 0x49c6 <__ultoa_invert+0x6c>
    49dc:	ea cf       	rjmp	.-44     	; 0x49b2 <__ultoa_invert+0x58>
    49de:	b4 e0       	ldi	r27, 0x04	; 4
    49e0:	a6 95       	lsr	r26
    49e2:	97 95       	ror	r25
    49e4:	87 95       	ror	r24
    49e6:	77 95       	ror	r23
    49e8:	67 95       	ror	r22
    49ea:	ba 95       	dec	r27
    49ec:	c9 f7       	brne	.-14     	; 0x49e0 <__ultoa_invert+0x86>
    49ee:	00 97       	sbiw	r24, 0x00	; 0
    49f0:	61 05       	cpc	r22, r1
    49f2:	71 05       	cpc	r23, r1
    49f4:	08 95       	ret
    49f6:	9b 01       	movw	r18, r22
    49f8:	ac 01       	movw	r20, r24
    49fa:	0a 2e       	mov	r0, r26
    49fc:	06 94       	lsr	r0
    49fe:	57 95       	ror	r21
    4a00:	47 95       	ror	r20
    4a02:	37 95       	ror	r19
    4a04:	27 95       	ror	r18
    4a06:	ba 95       	dec	r27
    4a08:	c9 f7       	brne	.-14     	; 0x49fc <__ultoa_invert+0xa2>
    4a0a:	62 0f       	add	r22, r18
    4a0c:	73 1f       	adc	r23, r19
    4a0e:	84 1f       	adc	r24, r20
    4a10:	95 1f       	adc	r25, r21
    4a12:	a0 1d       	adc	r26, r0
    4a14:	08 95       	ret

00004a16 <_exit>:
    4a16:	f8 94       	cli

00004a18 <__stop_program>:
    4a18:	ff cf       	rjmp	.-2      	; 0x4a18 <__stop_program>
